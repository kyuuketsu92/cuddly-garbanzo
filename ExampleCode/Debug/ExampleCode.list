
ExampleCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d130  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  0800d2d0  0800d2d0  0000e2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d44c  0800d44c  0000f174  2**0
                  CONTENTS
  4 .ARM          00000008  0800d44c  0800d44c  0000e44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d454  0800d454  0000f174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d454  0800d454  0000e454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d458  0800d458  0000e458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000174  20000000  0800d45c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000684c  20000174  0800d5d0  0000f174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200069c0  0800d5d0  0000f9c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002598d  00000000  00000000  0000f1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005499  00000000  00000000  00034b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ed0  00000000  00000000  00039fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017e0  00000000  00000000  0003bea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000071b1  00000000  00000000  0003d680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026057  00000000  00000000  00044831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fe3b  00000000  00000000  0006a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a6c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008774  00000000  00000000  0010a708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00112e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000174 	.word	0x20000174
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d2b8 	.word	0x0800d2b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000178 	.word	0x20000178
 80001dc:	0800d2b8 	.word	0x0800d2b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fdb2 	bl	80010dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f848 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f906 	bl	800078c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f8da 	bl	8000738 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000584:	f000 f8aa 	bl	80006dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000588:	f007 fcb6 	bl	8007ef8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of screenMutex */
  screenMutexHandle = osMutexNew(&screenMutex_attributes);
 800058c:	4813      	ldr	r0, [pc, #76]	@ (80005dc <main+0x6c>)
 800058e:	f007 fec1 	bl	8008314 <osMutexNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a12      	ldr	r2, [pc, #72]	@ (80005e0 <main+0x70>)
 8000596:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of screenQueue */
  screenQueueHandle = osMessageQueueNew (8, sizeof(TASK_SCREEN_MESSAGE_), &screenQueue_attributes);
 8000598:	4a12      	ldr	r2, [pc, #72]	@ (80005e4 <main+0x74>)
 800059a:	2113      	movs	r1, #19
 800059c:	2008      	movs	r0, #8
 800059e:	f007 ffc7 	bl	8008530 <osMessageQueueNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a10      	ldr	r2, [pc, #64]	@ (80005e8 <main+0x78>)
 80005a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a8:	4a10      	ldr	r2, [pc, #64]	@ (80005ec <main+0x7c>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	4810      	ldr	r0, [pc, #64]	@ (80005f0 <main+0x80>)
 80005ae:	f007 fced 	bl	8007f8c <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a0f      	ldr	r2, [pc, #60]	@ (80005f4 <main+0x84>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* creation of screenTask */
  screenTaskHandle = osThreadNew(StartScreenTask, NULL, &screenTask_attributes);
 80005b8:	4a0f      	ldr	r2, [pc, #60]	@ (80005f8 <main+0x88>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	480f      	ldr	r0, [pc, #60]	@ (80005fc <main+0x8c>)
 80005be:	f007 fce5 	bl	8007f8c <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a0e      	ldr	r2, [pc, #56]	@ (8000600 <main+0x90>)
 80005c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of TasksInit */
  TasksInitHandle = osEventFlagsNew(&TasksInit_attributes);
 80005c8:	480e      	ldr	r0, [pc, #56]	@ (8000604 <main+0x94>)
 80005ca:	f007 fd8c 	bl	80080e6 <osEventFlagsNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000608 <main+0x98>)
 80005d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d4:	f007 fcb4 	bl	8007f40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <main+0x68>
 80005dc:	0800d3e0 	.word	0x0800d3e0
 80005e0:	20000238 	.word	0x20000238
 80005e4:	0800d3c8 	.word	0x0800d3c8
 80005e8:	20000234 	.word	0x20000234
 80005ec:	0800d380 	.word	0x0800d380
 80005f0:	08000869 	.word	0x08000869
 80005f4:	2000022c 	.word	0x2000022c
 80005f8:	0800d3a4 	.word	0x0800d3a4
 80005fc:	0800096d 	.word	0x0800096d
 8000600:	20000230 	.word	0x20000230
 8000604:	0800d3f0 	.word	0x0800d3f0
 8000608:	2000023c 	.word	0x2000023c

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	@ 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f00c f976 	bl	800c90c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b27      	ldr	r3, [pc, #156]	@ (80006d4 <SystemClock_Config+0xc8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a26      	ldr	r2, [pc, #152]	@ (80006d4 <SystemClock_Config+0xc8>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	4b24      	ldr	r3, [pc, #144]	@ (80006d4 <SystemClock_Config+0xc8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b21      	ldr	r3, [pc, #132]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a20      	ldr	r2, [pc, #128]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000656:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <SystemClock_Config+0xcc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800066c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800067a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000680:	2348      	movs	r3, #72	@ 0x48
 8000682:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000688:	2303      	movs	r3, #3
 800068a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f002 ff11 	bl	80034b8 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800069c:	f000 f992 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2102      	movs	r1, #2
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 f973 	bl	80039a8 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c8:	f000 f97c 	bl	80009c4 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3750      	adds	r7, #80	@ 0x50
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_I2C1_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	@ (8000730 <MX_I2C1_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_I2C1_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <MX_I2C1_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_I2C1_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_I2C1_Init+0x50>)
 800071a:	f000 ffdd 	bl	80016d8 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 f94e 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000190 	.word	0x20000190
 8000730:	40005400 	.word	0x40005400
 8000734:	000186a0 	.word	0x000186a0

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <MX_USART2_UART_Init+0x50>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000742:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_USART2_UART_Init+0x4c>)
 8000770:	f003 fde0 	bl	8004334 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077a:	f000 f923 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200001e4 	.word	0x200001e4
 8000788:	40004400 	.word	0x40004400

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b2d      	ldr	r3, [pc, #180]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a2c      	ldr	r2, [pc, #176]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b2a      	ldr	r3, [pc, #168]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b26      	ldr	r3, [pc, #152]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a25      	ldr	r2, [pc, #148]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b23      	ldr	r3, [pc, #140]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a1e      	ldr	r2, [pc, #120]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b1c      	ldr	r3, [pc, #112]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b18      	ldr	r3, [pc, #96]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a17      	ldr	r2, [pc, #92]	@ (800085c <MX_GPIO_Init+0xd0>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b15      	ldr	r3, [pc, #84]	@ (800085c <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2120      	movs	r1, #32
 8000816:	4812      	ldr	r0, [pc, #72]	@ (8000860 <MX_GPIO_Init+0xd4>)
 8000818:	f000 ff44 	bl	80016a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000822:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	480c      	ldr	r0, [pc, #48]	@ (8000864 <MX_GPIO_Init+0xd8>)
 8000834:	f000 fd9a 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000838:	2320      	movs	r3, #32
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4804      	ldr	r0, [pc, #16]	@ (8000860 <MX_GPIO_Init+0xd4>)
 8000850:	f000 fd8c 	bl	800136c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	@ 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000
 8000864:	40020800 	.word	0x40020800

08000868 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	@ 0x30
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000870:	f00b fb42 	bl	800bef8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  osEventFlagsClear(TasksInitHandle,TASKS_ALL);
 8000874:	4b37      	ldr	r3, [pc, #220]	@ (8000954 <StartDefaultTask+0xec>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2101      	movs	r1, #1
 800087a:	4618      	mov	r0, r3
 800087c:	f007 fcb4 	bl	80081e8 <osEventFlagsClear>
  while(osEventFlagsWait(TasksInitHandle,TASKS_ALL,osFlagsNoClear,0) != TASKS_ALL)
 8000880:	e002      	b.n	8000888 <StartDefaultTask+0x20>
  {
	  //HAL_IWDG_Refresh(&hiwdg);
	  osDelay(1);
 8000882:	2001      	movs	r0, #1
 8000884:	f007 fc14 	bl	80080b0 <osDelay>
  while(osEventFlagsWait(TasksInitHandle,TASKS_ALL,osFlagsNoClear,0) != TASKS_ALL)
 8000888:	4b32      	ldr	r3, [pc, #200]	@ (8000954 <StartDefaultTask+0xec>)
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	2300      	movs	r3, #0
 800088e:	2202      	movs	r2, #2
 8000890:	2101      	movs	r1, #1
 8000892:	f007 fcda 	bl	800824a <osEventFlagsWait>
 8000896:	4603      	mov	r3, r0
 8000898:	2b01      	cmp	r3, #1
 800089a:	d1f2      	bne.n	8000882 <StartDefaultTask+0x1a>
  }
  static GPIO_PinState state = GPIO_PIN_SET;
  /* Infinite loop */
  for(;;)
  {
	  switch(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin))
 800089c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008a0:	482d      	ldr	r0, [pc, #180]	@ (8000958 <StartDefaultTask+0xf0>)
 80008a2:	f000 fee7 	bl	8001674 <HAL_GPIO_ReadPin>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d127      	bne.n	80008fc <StartDefaultTask+0x94>
	  {
	  case GPIO_PIN_RESET:
		  {
			  TASK_SCREEN_MESSAGE_ tmp = {0};
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	f8c3 200f 	str.w	r2, [r3, #15]
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	2120      	movs	r1, #32
 80008c2:	4826      	ldr	r0, [pc, #152]	@ (800095c <StartDefaultTask+0xf4>)
 80008c4:	f000 feee 	bl	80016a4 <HAL_GPIO_WritePin>
			  if(state != GPIO_PIN_SET)
 80008c8:	4b25      	ldr	r3, [pc, #148]	@ (8000960 <StartDefaultTask+0xf8>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d011      	beq.n	80008f4 <StartDefaultTask+0x8c>
			  {
				  tmp.col_start = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	777b      	strb	r3, [r7, #29]
				  tmp.col_end = 15;
 80008d4:	230f      	movs	r3, #15
 80008d6:	77bb      	strb	r3, [r7, #30]
				  tmp.row = 1;
 80008d8:	2301      	movs	r3, #1
 80008da:	773b      	strb	r3, [r7, #28]
				  sprintf((void *)&tmp.column[0],"PRESSED");
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	3303      	adds	r3, #3
 80008e2:	4920      	ldr	r1, [pc, #128]	@ (8000964 <StartDefaultTask+0xfc>)
 80008e4:	4618      	mov	r0, r3
 80008e6:	f00b fff1 	bl	800c8cc <siprintf>
				  TASK_SCREEN_UpdateScreen(&tmp);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fbbe 	bl	8001070 <TASK_SCREEN_UpdateScreen>
			  }
			  state = GPIO_PIN_SET;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <StartDefaultTask+0xf8>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
			  break;
 80008fa:	e027      	b.n	800094c <StartDefaultTask+0xe4>
		  }
	  case GPIO_PIN_SET:
	  default:
		  {
			  TASK_SCREEN_MESSAGE_ tmp = {0};
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	f8c3 200f 	str.w	r2, [r3, #15]
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2120      	movs	r1, #32
 8000912:	4812      	ldr	r0, [pc, #72]	@ (800095c <StartDefaultTask+0xf4>)
 8000914:	f000 fec6 	bl	80016a4 <HAL_GPIO_WritePin>
			  if(state != GPIO_PIN_RESET)
 8000918:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <StartDefaultTask+0xf8>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d011      	beq.n	8000944 <StartDefaultTask+0xdc>
			  {
				  tmp.col_start = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	727b      	strb	r3, [r7, #9]
				  tmp.col_end = 15;
 8000924:	230f      	movs	r3, #15
 8000926:	72bb      	strb	r3, [r7, #10]
				  tmp.row = 1;
 8000928:	2301      	movs	r3, #1
 800092a:	723b      	strb	r3, [r7, #8]
				  sprintf((void *)&tmp.column[0],"RELEASED");
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	3303      	adds	r3, #3
 8000932:	490d      	ldr	r1, [pc, #52]	@ (8000968 <StartDefaultTask+0x100>)
 8000934:	4618      	mov	r0, r3
 8000936:	f00b ffc9 	bl	800c8cc <siprintf>
				  TASK_SCREEN_UpdateScreen(&tmp);
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	4618      	mov	r0, r3
 8000940:	f000 fb96 	bl	8001070 <TASK_SCREEN_UpdateScreen>
			  }
			  state = GPIO_PIN_RESET;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <StartDefaultTask+0xf8>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
			  break;
 800094a:	bf00      	nop
		  }
	  }
	  osDelay(1);
 800094c:	2001      	movs	r0, #1
 800094e:	f007 fbaf 	bl	80080b0 <osDelay>
	  switch(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin))
 8000952:	e7a3      	b.n	800089c <StartDefaultTask+0x34>
 8000954:	2000023c 	.word	0x2000023c
 8000958:	40020800 	.word	0x40020800
 800095c:	40020000 	.word	0x40020000
 8000960:	20000000 	.word	0x20000000
 8000964:	0800d30c 	.word	0x0800d30c
 8000968:	0800d314 	.word	0x0800d314

0800096c <StartScreenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartScreenTask */
void StartScreenTask(void *argument)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartScreenTask */
  /* Infinite loop */
  TASK_SCREEN_Init(&hi2c1,
 8000974:	4a06      	ldr	r2, [pc, #24]	@ (8000990 <StartScreenTask+0x24>)
 8000976:	4907      	ldr	r1, [pc, #28]	@ (8000994 <StartScreenTask+0x28>)
 8000978:	4807      	ldr	r0, [pc, #28]	@ (8000998 <StartScreenTask+0x2c>)
 800097a:	f000 fb27 	bl	8000fcc <TASK_SCREEN_Init>
		  	  	   (void *)&screenQueueHandle,
				   (void *)&screenMutexHandle);
  osEventFlagsSet(TasksInitHandle,TASK_SCREEN_INIT);
 800097e:	4b07      	ldr	r3, [pc, #28]	@ (800099c <StartScreenTask+0x30>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2101      	movs	r1, #1
 8000984:	4618      	mov	r0, r3
 8000986:	f007 fbed 	bl	8008164 <osEventFlagsSet>
  for(;;)
  {
	TASK_SCREEN_Run();
 800098a:	f000 fb3b 	bl	8001004 <TASK_SCREEN_Run>
 800098e:	e7fc      	b.n	800098a <StartScreenTask+0x1e>
 8000990:	20000238 	.word	0x20000238
 8000994:	20000234 	.word	0x20000234
 8000998:	20000190 	.word	0x20000190
 800099c:	2000023c 	.word	0x2000023c

080009a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a04      	ldr	r2, [pc, #16]	@ (80009c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d101      	bne.n	80009b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009b2:	f000 fbb5 	bl	8001120 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40014800 	.word	0x40014800

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <Error_Handler+0x8>

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <HAL_MspInit+0x54>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	4a11      	ldr	r2, [pc, #68]	@ (8000a24 <HAL_MspInit+0x54>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <HAL_MspInit+0x54>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <HAL_MspInit+0x54>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <HAL_MspInit+0x54>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <HAL_MspInit+0x54>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	210f      	movs	r1, #15
 8000a12:	f06f 0001 	mvn.w	r0, #1
 8000a16:	f000 fc7f 	bl	8001318 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800

08000a28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a19      	ldr	r2, [pc, #100]	@ (8000aac <HAL_I2C_MspInit+0x84>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d12b      	bne.n	8000aa2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a17      	ldr	r2, [pc, #92]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a66:	23c0      	movs	r3, #192	@ 0xc0
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a6a:	2312      	movs	r3, #18
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a76:	2304      	movs	r3, #4
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <HAL_I2C_MspInit+0x8c>)
 8000a82:	f000 fc73 	bl	800136c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	4a08      	ldr	r2, [pc, #32]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_I2C_MspInit+0x88>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	@ 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	@ 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a19      	ldr	r2, [pc, #100]	@ (8000b3c <HAL_UART_MspInit+0x84>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d12b      	bne.n	8000b32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	4a17      	ldr	r2, [pc, #92]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a10      	ldr	r2, [pc, #64]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <HAL_UART_MspInit+0x88>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b12:	230c      	movs	r3, #12
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b22:	2307      	movs	r3, #7
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <HAL_UART_MspInit+0x8c>)
 8000b2e:	f000 fc1d 	bl	800136c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	@ 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	@ 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b60:	4a2d      	ldr	r2, [pc, #180]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000b62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b66:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b68:	4b2b      	ldr	r3, [pc, #172]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 020c 	add.w	r2, r7, #12
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f003 f932 	bl	8003de8 <HAL_RCC_GetClockConfig>
  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b84:	f003 f91c 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 8000b88:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b8c:	4a23      	ldr	r2, [pc, #140]	@ (8000c1c <HAL_InitTick+0xd4>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	0c9b      	lsrs	r3, r3, #18
 8000b94:	3b01      	subs	r3, #1
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000b98:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000b9a:	4a22      	ldr	r2, [pc, #136]	@ (8000c24 <HAL_InitTick+0xdc>)
 8000b9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000b9e:	4b20      	ldr	r3, [pc, #128]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000ba0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ba4:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000baa:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000bac:	4b1c      	ldr	r3, [pc, #112]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb8:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000bbe:	4818      	ldr	r0, [pc, #96]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000bc0:	f003 f944 	bl	8003e4c <HAL_TIM_Base_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d11b      	bne.n	8000c0a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000bd2:	4813      	ldr	r0, [pc, #76]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000bd4:	f003 f994 	bl	8003f00 <HAL_TIM_Base_Start_IT>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d111      	bne.n	8000c0a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000be6:	201a      	movs	r0, #26
 8000be8:	f000 fbb2 	bl	8001350 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b0f      	cmp	r3, #15
 8000bf0:	d808      	bhi.n	8000c04 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	6879      	ldr	r1, [r7, #4]
 8000bf6:	201a      	movs	r0, #26
 8000bf8:	f000 fb8e 	bl	8001318 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <HAL_InitTick+0xe0>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	e002      	b.n	8000c0a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3730      	adds	r7, #48	@ 0x30
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	431bde83 	.word	0x431bde83
 8000c20:	20000240 	.word	0x20000240
 8000c24:	40014800 	.word	0x40014800
 8000c28:	20000028 	.word	0x20000028

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <NMI_Handler+0x4>

08000c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <MemManage_Handler+0x4>

08000c44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000c68:	4802      	ldr	r0, [pc, #8]	@ (8000c74 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000c6a:	f003 f9ab 	bl	8003fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000240 	.word	0x20000240

08000c78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c7c:	4802      	ldr	r0, [pc, #8]	@ (8000c88 <OTG_FS_IRQHandler+0x10>)
 8000c7e:	f001 fb0c 	bl	800229a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20006174 	.word	0x20006174

08000c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c94:	4a14      	ldr	r2, [pc, #80]	@ (8000ce8 <_sbrk+0x5c>)
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <_sbrk+0x60>)
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <_sbrk+0x64>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <_sbrk+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d207      	bcs.n	8000ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cbc:	f00b fe84 	bl	800c9c8 <__errno>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20020000 	.word	0x20020000
 8000cec:	00000400 	.word	0x00000400
 8000cf0:	20000288 	.word	0x20000288
 8000cf4:	200069c0 	.word	0x200069c0

08000cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <SystemInit+0x20>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d02:	4a05      	ldr	r2, [pc, #20]	@ (8000d18 <SystemInit+0x20>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d20:	f7ff ffea 	bl	8000cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d24:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d26:	490d      	ldr	r1, [pc, #52]	@ (8000d5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d28:	4a0d      	ldr	r2, [pc, #52]	@ (8000d60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d4a:	f00b fe43 	bl	800c9d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4e:	f7ff fc0f 	bl	8000570 <main>
  bx  lr    
 8000d52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000d60:	0800d45c 	.word	0x0800d45c
  ldr r2, =_sbss
 8000d64:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000d68:	200069c0 	.word	0x200069c0

08000d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC_IRQHandler>
	...

08000d70 <SendCommand4BitFrame>:
		l_ucTime--;
	}
}

static void SendCommand4BitFrame(uint8_t cmd)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
	uint8_t data[4];
	uint8_t size = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73fb      	strb	r3, [r7, #15]
	char data_u, data_l;
	data_u = (cmd&0xf0);
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f023 030f 	bic.w	r3, r3, #15
 8000d84:	73bb      	strb	r3, [r7, #14]
	data_l = ((cmd<<4)&0xf0);
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	011b      	lsls	r3, r3, #4
 8000d8a:	737b      	strb	r3, [r7, #13]
	data[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000d8c:	7bbb      	ldrb	r3, [r7, #14]
 8000d8e:	f043 030c 	orr.w	r3, r3, #12
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	723b      	strb	r3, [r7, #8]
	data[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000d96:	7bbb      	ldrb	r3, [r7, #14]
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	727b      	strb	r3, [r7, #9]
	data[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000da0:	7b7b      	ldrb	r3, [r7, #13]
 8000da2:	f043 030c 	orr.w	r3, r3, #12
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	72bb      	strb	r3, [r7, #10]
	data[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000daa:	7b7b      	ldrb	r3, [r7, #13]
 8000dac:	f043 0308 	orr.w	r3, r3, #8
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	72fb      	strb	r3, [r7, #11]


	while(l_psti2chandle->State != HAL_I2C_STATE_READY)
 8000db4:	e002      	b.n	8000dbc <SendCommand4BitFrame+0x4c>
	{
		osDelay(1);
 8000db6:	2001      	movs	r0, #1
 8000db8:	f007 f97a 	bl	80080b0 <osDelay>
	while(l_psti2chandle->State != HAL_I2C_STATE_READY)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <SendCommand4BitFrame+0x9c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b20      	cmp	r3, #32
 8000dc8:	d1f5      	bne.n	8000db6 <SendCommand4BitFrame+0x46>
	}
	if(l_ucInit == 0)
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <SendCommand4BitFrame+0xa0>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d102      	bne.n	8000dd8 <SendCommand4BitFrame+0x68>
	{
		size = 2;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	73fb      	strb	r3, [r7, #15]
 8000dd6:	e001      	b.n	8000ddc <SendCommand4BitFrame+0x6c>
	}
	else
	{
		size = 4;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	73fb      	strb	r3, [r7, #15]
	}
	if(HAL_I2C_Master_Transmit(l_psti2chandle,LCD_ADDRESS,&data[0], size, 1) != HAL_OK)
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <SendCommand4BitFrame+0x9c>)
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	f107 0208 	add.w	r2, r7, #8
 8000de8:	2101      	movs	r1, #1
 8000dea:	9100      	str	r1, [sp, #0]
 8000dec:	214e      	movs	r1, #78	@ 0x4e
 8000dee:	f000 fdb7 	bl	8001960 <HAL_I2C_Master_Transmit>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d004      	beq.n	8000e02 <SendCommand4BitFrame+0x92>
	{
		l_ulI2CErrorCounter++;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <SendCommand4BitFrame+0xa4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <SendCommand4BitFrame+0xa4>)
 8000e00:	6013      	str	r3, [r2, #0]
	}
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000028c 	.word	0x2000028c
 8000e10:	200002a4 	.word	0x200002a4
 8000e14:	20000298 	.word	0x20000298

08000e18 <SendData4BitFrame>:

static void SendData4BitFrame(uint8_t cmd)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af02      	add	r7, sp, #8
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
	uint8_t data[4];
	char data_u, data_l;
	data_u = (cmd&0xf0);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f023 030f 	bic.w	r3, r3, #15
 8000e28:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	011b      	lsls	r3, r3, #4
 8000e2e:	73bb      	strb	r3, [r7, #14]
	data[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	f043 030d 	orr.w	r3, r3, #13
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	723b      	strb	r3, [r7, #8]
	data[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	f043 0309 	orr.w	r3, r3, #9
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	727b      	strb	r3, [r7, #9]
	data[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	f043 030d 	orr.w	r3, r3, #13
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	72bb      	strb	r3, [r7, #10]
	data[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 8000e4e:	7bbb      	ldrb	r3, [r7, #14]
 8000e50:	f043 0309 	orr.w	r3, r3, #9
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	72fb      	strb	r3, [r7, #11]

	while(l_psti2chandle->State != HAL_I2C_STATE_READY)
 8000e58:	e002      	b.n	8000e60 <SendData4BitFrame+0x48>
	{
		osDelay(1);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f007 f928 	bl	80080b0 <osDelay>
	while(l_psti2chandle->State != HAL_I2C_STATE_READY)
 8000e60:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <SendData4BitFrame+0x84>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b20      	cmp	r3, #32
 8000e6c:	d1f5      	bne.n	8000e5a <SendData4BitFrame+0x42>
	}
	if(HAL_I2C_Master_Transmit(l_psti2chandle,LCD_ADDRESS,&data[0], 4, 1) != HAL_OK)
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <SendData4BitFrame+0x84>)
 8000e70:	6818      	ldr	r0, [r3, #0]
 8000e72:	f107 0208 	add.w	r2, r7, #8
 8000e76:	2301      	movs	r3, #1
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	214e      	movs	r1, #78	@ 0x4e
 8000e7e:	f000 fd6f 	bl	8001960 <HAL_I2C_Master_Transmit>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d004      	beq.n	8000e92 <SendData4BitFrame+0x7a>
	{
		l_ulI2CErrorCounter++;
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <SendData4BitFrame+0x88>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <SendData4BitFrame+0x88>)
 8000e90:	6013      	str	r3, [r2, #0]
	}
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000028c 	.word	0x2000028c
 8000ea0:	20000298 	.word	0x20000298

08000ea4 <LcdInit>:

static void LcdInit (void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  // 4 bit initialisation
  l_ucInit = 1;
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f24 <LcdInit+0x80>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
  osDelay(40);
 8000eae:	2028      	movs	r0, #40	@ 0x28
 8000eb0:	f007 f8fe 	bl	80080b0 <osDelay>
  SendCommand4BitFrame (0x30);
 8000eb4:	2030      	movs	r0, #48	@ 0x30
 8000eb6:	f7ff ff5b 	bl	8000d70 <SendCommand4BitFrame>
  osDelay(5);  // wait for >4.1ms
 8000eba:	2005      	movs	r0, #5
 8000ebc:	f007 f8f8 	bl	80080b0 <osDelay>
  SendCommand4BitFrame (0x30);
 8000ec0:	2030      	movs	r0, #48	@ 0x30
 8000ec2:	f7ff ff55 	bl	8000d70 <SendCommand4BitFrame>
  osDelay(1);  // wait for >100us
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f007 f8f2 	bl	80080b0 <osDelay>
  SendCommand4BitFrame (0x20);
 8000ecc:	2020      	movs	r0, #32
 8000ece:	f7ff ff4f 	bl	8000d70 <SendCommand4BitFrame>
  osDelay(10);
 8000ed2:	200a      	movs	r0, #10
 8000ed4:	f007 f8ec 	bl	80080b0 <osDelay>
  SendCommand4BitFrame (0x20);  // 4bit mode
 8000ed8:	2020      	movs	r0, #32
 8000eda:	f7ff ff49 	bl	8000d70 <SendCommand4BitFrame>
  osDelay(10);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f007 f8e6 	bl	80080b0 <osDelay>
  l_ucInit = 0;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <LcdInit+0x80>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]

  // display initialisation
  SendCommand4BitFrame (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000eea:	2028      	movs	r0, #40	@ 0x28
 8000eec:	f7ff ff40 	bl	8000d70 <SendCommand4BitFrame>
  osDelay(1);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f007 f8dd 	bl	80080b0 <osDelay>
  SendCommand4BitFrame (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000ef6:	2008      	movs	r0, #8
 8000ef8:	f7ff ff3a 	bl	8000d70 <SendCommand4BitFrame>
  osDelay(1);
 8000efc:	2001      	movs	r0, #1
 8000efe:	f007 f8d7 	bl	80080b0 <osDelay>
  SendCommand4BitFrame (0x01);  // clear display
 8000f02:	2001      	movs	r0, #1
 8000f04:	f7ff ff34 	bl	8000d70 <SendCommand4BitFrame>
  osDelay(2);
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f007 f8d1 	bl	80080b0 <osDelay>
  SendCommand4BitFrame (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000f0e:	2006      	movs	r0, #6
 8000f10:	f7ff ff2e 	bl	8000d70 <SendCommand4BitFrame>
  osDelay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f007 f8cb 	bl	80080b0 <osDelay>
  SendCommand4BitFrame (0x0c); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000f1a:	200c      	movs	r0, #12
 8000f1c:	f7ff ff28 	bl	8000d70 <SendCommand4BitFrame>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200002a4 	.word	0x200002a4

08000f28 <LcdSendString>:

static void LcdSendString (char *str)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i = 0; i < COL_SIZE; i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	e00c      	b.n	8000f50 <LcdSendString+0x28>
	{
		SendData4BitFrame(str[i]);
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff6a 	bl	8000e18 <SendData4BitFrame>
		osDelay(1);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f007 f8b3 	bl	80080b0 <osDelay>
	for(i = 0; i < COL_SIZE; i++)
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b0f      	cmp	r3, #15
 8000f54:	d9ef      	bls.n	8000f36 <LcdSendString+0xe>
	}
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <LcdSetCursr>:

static void LcdSetCursr(int row, int col)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	switch (row)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <LcdSetCursr+0x18>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d005      	beq.n	8000f82 <LcdSetCursr+0x22>
 8000f76:	e009      	b.n	8000f8c <LcdSetCursr+0x2c>
	{
		case 0:
			col |= 0x80;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f7e:	603b      	str	r3, [r7, #0]
			break;
 8000f80:	e004      	b.n	8000f8c <LcdSetCursr+0x2c>
		case 1:
			col |= 0xC0;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000f88:	603b      	str	r3, [r7, #0]
			break;
 8000f8a:	bf00      	nop
	}
	SendCommand4BitFrame (col);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff feed 	bl	8000d70 <SendCommand4BitFrame>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <UpdateLcd>:

static void UpdateLcd(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	LcdSetCursr(0, 0);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f7ff ffda 	bl	8000f60 <LcdSetCursr>
	LcdSendString (&l_cLcdData[0][0]);
 8000fac:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <UpdateLcd+0x24>)
 8000fae:	f7ff ffbb 	bl	8000f28 <LcdSendString>
	LcdSetCursr(1, 0);
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f7ff ffd3 	bl	8000f60 <LcdSetCursr>
	LcdSendString(&l_cLcdData[1][0]);
 8000fba:	4803      	ldr	r0, [pc, #12]	@ (8000fc8 <UpdateLcd+0x28>)
 8000fbc:	f7ff ffb4 	bl	8000f28 <LcdSendString>
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000018 	.word	0x20000018

08000fcc <TASK_SCREEN_Init>:


//INTERFACE FUNCTIONS
void TASK_SCREEN_Init(I2C_HandleTypeDef * p_i2c, void * p_queue, void * p_mutex)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
	l_psti2chandle = p_i2c;
 8000fd8:	4a07      	ldr	r2, [pc, #28]	@ (8000ff8 <TASK_SCREEN_Init+0x2c>)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6013      	str	r3, [r2, #0]
	l_pvQueue = (osMessageQueueId_t *)p_queue;
 8000fde:	4a07      	ldr	r2, [pc, #28]	@ (8000ffc <TASK_SCREEN_Init+0x30>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	6013      	str	r3, [r2, #0]
	l_pvMutex = (osMutexId_t *)p_mutex;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	@ (8001000 <TASK_SCREEN_Init+0x34>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
	//l_ucDevAddress = FindAddress(p_i2c);
	LcdInit();
 8000fea:	f7ff ff5b 	bl	8000ea4 <LcdInit>
}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000028c 	.word	0x2000028c
 8000ffc:	20000290 	.word	0x20000290
 8001000:	20000294 	.word	0x20000294

08001004 <TASK_SCREEN_Run>:

void TASK_SCREEN_Run(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
	TASK_SCREEN_MESSAGE_ tmp = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	f8c3 200f 	str.w	r2, [r3, #15]
	//Eventually add a queue to read from.
	if(osMessageQueueGet(*l_pvQueue,(void *)&tmp, NULL, 30) == osOK)
 800101a:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <TASK_SCREEN_Run+0x64>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	1d39      	adds	r1, r7, #4
 8001022:	231e      	movs	r3, #30
 8001024:	2200      	movs	r2, #0
 8001026:	f007 fb57 	bl	80086d8 <osMessageQueueGet>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d111      	bne.n	8001054 <TASK_SCREEN_Run+0x50>
	{
		memcpy(&l_cLcdData[tmp.row][tmp.col_start],
 8001030:	793b      	ldrb	r3, [r7, #4]
 8001032:	797a      	ldrb	r2, [r7, #5]
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	4413      	add	r3, r2
 8001038:	4a0c      	ldr	r2, [pc, #48]	@ (800106c <TASK_SCREEN_Run+0x68>)
 800103a:	1898      	adds	r0, r3, r2
			   &tmp.column[tmp.col_start],
 800103c:	797b      	ldrb	r3, [r7, #5]
 800103e:	461a      	mov	r2, r3
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4413      	add	r3, r2
 8001044:	3303      	adds	r3, #3
			   tmp.col_end-tmp.col_start);
 8001046:	79ba      	ldrb	r2, [r7, #6]
 8001048:	4611      	mov	r1, r2
 800104a:	797a      	ldrb	r2, [r7, #5]
 800104c:	1a8a      	subs	r2, r1, r2
		memcpy(&l_cLcdData[tmp.row][tmp.col_start],
 800104e:	4619      	mov	r1, r3
 8001050:	f00b fce6 	bl	800ca20 <memcpy>
	}
	UpdateLcd();
 8001054:	f7ff ffa4 	bl	8000fa0 <UpdateLcd>
	osDelay(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f007 f829 	bl	80080b0 <osDelay>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000290 	.word	0x20000290
 800106c:	20000008 	.word	0x20000008

08001070 <TASK_SCREEN_UpdateScreen>:

void TASK_SCREEN_UpdateScreen(TASK_SCREEN_MESSAGE_ * p_message)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	if(osMutexAcquire(*l_pvMutex,1) == osOK)
 8001078:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <TASK_SCREEN_UpdateScreen+0x5c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2101      	movs	r1, #1
 8001080:	4618      	mov	r0, r3
 8001082:	f007 f9cd 	bl	8008420 <osMutexAcquire>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d116      	bne.n	80010ba <TASK_SCREEN_UpdateScreen+0x4a>
	{
		if(osMessageQueuePut(*l_pvQueue,(void *)p_message, osPriorityNormal, 10) != osOK)
 800108c:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <TASK_SCREEN_UpdateScreen+0x60>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	230a      	movs	r3, #10
 8001094:	2218      	movs	r2, #24
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f007 fabe 	bl	8008618 <osMessageQueuePut>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d004      	beq.n	80010ac <TASK_SCREEN_UpdateScreen+0x3c>
		{
			l_ulQueueErrorCounter++;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <TASK_SCREEN_UpdateScreen+0x64>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <TASK_SCREEN_UpdateScreen+0x64>)
 80010aa:	6013      	str	r3, [r2, #0]
		}
		osMutexRelease(*l_pvMutex);
 80010ac:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <TASK_SCREEN_UpdateScreen+0x5c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f007 f9ff 	bl	80084b6 <osMutexRelease>
	}
	else
	{
		l_ulMutexErrorCounter++;
	}
}
 80010b8:	e004      	b.n	80010c4 <TASK_SCREEN_UpdateScreen+0x54>
		l_ulMutexErrorCounter++;
 80010ba:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <TASK_SCREEN_UpdateScreen+0x68>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a05      	ldr	r2, [pc, #20]	@ (80010d8 <TASK_SCREEN_UpdateScreen+0x68>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000294 	.word	0x20000294
 80010d0:	20000290 	.word	0x20000290
 80010d4:	2000029c 	.word	0x2000029c
 80010d8:	200002a0 	.word	0x200002a0

080010dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e0:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0d      	ldr	r2, [pc, #52]	@ (800111c <HAL_Init+0x40>)
 80010e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ec:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <HAL_Init+0x40>)
 80010f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f8:	4b08      	ldr	r3, [pc, #32]	@ (800111c <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a07      	ldr	r2, [pc, #28]	@ (800111c <HAL_Init+0x40>)
 80010fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001102:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001104:	2003      	movs	r0, #3
 8001106:	f000 f8fc 	bl	8001302 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110a:	200f      	movs	r0, #15
 800110c:	f7ff fd1c 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001110:	f7ff fc5e 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023c00 	.word	0x40023c00

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	2000002c 	.word	0x2000002c
 8001144:	200002a8 	.word	0x200002a8

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	@ (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200002a8 	.word	0x200002a8

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000002c 	.word	0x2000002c

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4907      	ldr	r1, [pc, #28]	@ (8001244 <__NVIC_EnableIRQ+0x38>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	@ (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	@ (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	@ 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	@ 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ff4c 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132a:	f7ff ff61 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 800132e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	6978      	ldr	r0, [r7, #20]
 8001336:	f7ff ffb1 	bl	800129c <NVIC_EncodePriority>
 800133a:	4602      	mov	r2, r0
 800133c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff80 	bl	8001248 <__NVIC_SetPriority>
}
 8001348:	bf00      	nop
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff54 	bl	800120c <__NVIC_EnableIRQ>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	@ 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	e159      	b.n	800163c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001388:	2201      	movs	r2, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	f040 8148 	bne.w	8001636 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d005      	beq.n	80013be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d130      	bne.n	8001420 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f4:	2201      	movs	r2, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	f003 0201 	and.w	r2, r3, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b03      	cmp	r3, #3
 800142a:	d017      	beq.n	800145c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d123      	bne.n	80014b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	08da      	lsrs	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3208      	adds	r2, #8
 8001470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	08da      	lsrs	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3208      	adds	r2, #8
 80014aa:	69b9      	ldr	r1, [r7, #24]
 80014ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0203 	and.w	r2, r3, #3
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80a2 	beq.w	8001636 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b57      	ldr	r3, [pc, #348]	@ (8001654 <HAL_GPIO_Init+0x2e8>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	4a56      	ldr	r2, [pc, #344]	@ (8001654 <HAL_GPIO_Init+0x2e8>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001500:	6453      	str	r3, [r2, #68]	@ 0x44
 8001502:	4b54      	ldr	r3, [pc, #336]	@ (8001654 <HAL_GPIO_Init+0x2e8>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150e:	4a52      	ldr	r2, [pc, #328]	@ (8001658 <HAL_GPIO_Init+0x2ec>)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	3302      	adds	r3, #2
 8001516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	220f      	movs	r2, #15
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a49      	ldr	r2, [pc, #292]	@ (800165c <HAL_GPIO_Init+0x2f0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d019      	beq.n	800156e <HAL_GPIO_Init+0x202>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a48      	ldr	r2, [pc, #288]	@ (8001660 <HAL_GPIO_Init+0x2f4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d013      	beq.n	800156a <HAL_GPIO_Init+0x1fe>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a47      	ldr	r2, [pc, #284]	@ (8001664 <HAL_GPIO_Init+0x2f8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d00d      	beq.n	8001566 <HAL_GPIO_Init+0x1fa>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a46      	ldr	r2, [pc, #280]	@ (8001668 <HAL_GPIO_Init+0x2fc>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d007      	beq.n	8001562 <HAL_GPIO_Init+0x1f6>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a45      	ldr	r2, [pc, #276]	@ (800166c <HAL_GPIO_Init+0x300>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_GPIO_Init+0x1f2>
 800155a:	2304      	movs	r3, #4
 800155c:	e008      	b.n	8001570 <HAL_GPIO_Init+0x204>
 800155e:	2307      	movs	r3, #7
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x204>
 8001562:	2303      	movs	r3, #3
 8001564:	e004      	b.n	8001570 <HAL_GPIO_Init+0x204>
 8001566:	2302      	movs	r3, #2
 8001568:	e002      	b.n	8001570 <HAL_GPIO_Init+0x204>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_GPIO_Init+0x204>
 800156e:	2300      	movs	r3, #0
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	f002 0203 	and.w	r2, r2, #3
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	4093      	lsls	r3, r2
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001580:	4935      	ldr	r1, [pc, #212]	@ (8001658 <HAL_GPIO_Init+0x2ec>)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3302      	adds	r3, #2
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158e:	4b38      	ldr	r3, [pc, #224]	@ (8001670 <HAL_GPIO_Init+0x304>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001670 <HAL_GPIO_Init+0x304>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001670 <HAL_GPIO_Init+0x304>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015dc:	4a24      	ldr	r2, [pc, #144]	@ (8001670 <HAL_GPIO_Init+0x304>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015e2:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <HAL_GPIO_Init+0x304>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001606:	4a1a      	ldr	r2, [pc, #104]	@ (8001670 <HAL_GPIO_Init+0x304>)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800160c:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <HAL_GPIO_Init+0x304>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001630:	4a0f      	ldr	r2, [pc, #60]	@ (8001670 <HAL_GPIO_Init+0x304>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3301      	adds	r3, #1
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	2b0f      	cmp	r3, #15
 8001640:	f67f aea2 	bls.w	8001388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3724      	adds	r7, #36	@ 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40013800 	.word	0x40013800
 800165c:	40020000 	.word	0x40020000
 8001660:	40020400 	.word	0x40020400
 8001664:	40020800 	.word	0x40020800
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40021000 	.word	0x40021000
 8001670:	40013c00 	.word	0x40013c00

08001674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691a      	ldr	r2, [r3, #16]
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800168c:	2301      	movs	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	e001      	b.n	8001696 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]
 80016b0:	4613      	mov	r3, r2
 80016b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016b4:	787b      	ldrb	r3, [r7, #1]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ba:	887a      	ldrh	r2, [r7, #2]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016c0:	e003      	b.n	80016ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016c2:	887b      	ldrh	r3, [r7, #2]
 80016c4:	041a      	lsls	r2, r3, #16
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	619a      	str	r2, [r3, #24]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e12b      	b.n	8001942 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d106      	bne.n	8001704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff f992 	bl	8000a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2224      	movs	r2, #36	@ 0x24
 8001708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800172a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800173a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800173c:	f002 fb2c 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 8001740:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4a81      	ldr	r2, [pc, #516]	@ (800194c <HAL_I2C_Init+0x274>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d807      	bhi.n	800175c <HAL_I2C_Init+0x84>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4a80      	ldr	r2, [pc, #512]	@ (8001950 <HAL_I2C_Init+0x278>)
 8001750:	4293      	cmp	r3, r2
 8001752:	bf94      	ite	ls
 8001754:	2301      	movls	r3, #1
 8001756:	2300      	movhi	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	e006      	b.n	800176a <HAL_I2C_Init+0x92>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4a7d      	ldr	r2, [pc, #500]	@ (8001954 <HAL_I2C_Init+0x27c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	bf94      	ite	ls
 8001764:	2301      	movls	r3, #1
 8001766:	2300      	movhi	r3, #0
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e0e7      	b.n	8001942 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4a78      	ldr	r2, [pc, #480]	@ (8001958 <HAL_I2C_Init+0x280>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	0c9b      	lsrs	r3, r3, #18
 800177c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	430a      	orrs	r2, r1
 8001790:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a6a      	ldr	r2, [pc, #424]	@ (800194c <HAL_I2C_Init+0x274>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d802      	bhi.n	80017ac <HAL_I2C_Init+0xd4>
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	3301      	adds	r3, #1
 80017aa:	e009      	b.n	80017c0 <HAL_I2C_Init+0xe8>
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017b2:	fb02 f303 	mul.w	r3, r2, r3
 80017b6:	4a69      	ldr	r2, [pc, #420]	@ (800195c <HAL_I2C_Init+0x284>)
 80017b8:	fba2 2303 	umull	r2, r3, r2, r3
 80017bc:	099b      	lsrs	r3, r3, #6
 80017be:	3301      	adds	r3, #1
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	430b      	orrs	r3, r1
 80017c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	495c      	ldr	r1, [pc, #368]	@ (800194c <HAL_I2C_Init+0x274>)
 80017dc:	428b      	cmp	r3, r1
 80017de:	d819      	bhi.n	8001814 <HAL_I2C_Init+0x13c>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1e59      	subs	r1, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ee:	1c59      	adds	r1, r3, #1
 80017f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017f4:	400b      	ands	r3, r1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00a      	beq.n	8001810 <HAL_I2C_Init+0x138>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1e59      	subs	r1, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fbb1 f3f3 	udiv	r3, r1, r3
 8001808:	3301      	adds	r3, #1
 800180a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180e:	e051      	b.n	80018b4 <HAL_I2C_Init+0x1dc>
 8001810:	2304      	movs	r3, #4
 8001812:	e04f      	b.n	80018b4 <HAL_I2C_Init+0x1dc>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d111      	bne.n	8001840 <HAL_I2C_Init+0x168>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1e58      	subs	r0, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	440b      	add	r3, r1
 800182a:	fbb0 f3f3 	udiv	r3, r0, r3
 800182e:	3301      	adds	r3, #1
 8001830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf0c      	ite	eq
 8001838:	2301      	moveq	r3, #1
 800183a:	2300      	movne	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	e012      	b.n	8001866 <HAL_I2C_Init+0x18e>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	1e58      	subs	r0, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	0099      	lsls	r1, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	fbb0 f3f3 	udiv	r3, r0, r3
 8001856:	3301      	adds	r3, #1
 8001858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800185c:	2b00      	cmp	r3, #0
 800185e:	bf0c      	ite	eq
 8001860:	2301      	moveq	r3, #1
 8001862:	2300      	movne	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_I2C_Init+0x196>
 800186a:	2301      	movs	r3, #1
 800186c:	e022      	b.n	80018b4 <HAL_I2C_Init+0x1dc>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10e      	bne.n	8001894 <HAL_I2C_Init+0x1bc>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1e58      	subs	r0, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6859      	ldr	r1, [r3, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	440b      	add	r3, r1
 8001884:	fbb0 f3f3 	udiv	r3, r0, r3
 8001888:	3301      	adds	r3, #1
 800188a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001892:	e00f      	b.n	80018b4 <HAL_I2C_Init+0x1dc>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1e58      	subs	r0, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6859      	ldr	r1, [r3, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	0099      	lsls	r1, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018aa:	3301      	adds	r3, #1
 80018ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	6809      	ldr	r1, [r1, #0]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69da      	ldr	r2, [r3, #28]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6911      	ldr	r1, [r2, #16]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68d2      	ldr	r2, [r2, #12]
 80018ee:	4311      	orrs	r1, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	430b      	orrs	r3, r1
 80018f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2220      	movs	r2, #32
 800192e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	000186a0 	.word	0x000186a0
 8001950:	001e847f 	.word	0x001e847f
 8001954:	003d08ff 	.word	0x003d08ff
 8001958:	431bde83 	.word	0x431bde83
 800195c:	10624dd3 	.word	0x10624dd3

08001960 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af02      	add	r7, sp, #8
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	461a      	mov	r2, r3
 800196c:	460b      	mov	r3, r1
 800196e:	817b      	strh	r3, [r7, #10]
 8001970:	4613      	mov	r3, r2
 8001972:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff fbe8 	bl	8001148 <HAL_GetTick>
 8001978:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b20      	cmp	r3, #32
 8001984:	f040 80e0 	bne.w	8001b48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2319      	movs	r3, #25
 800198e:	2201      	movs	r2, #1
 8001990:	4970      	ldr	r1, [pc, #448]	@ (8001b54 <HAL_I2C_Master_Transmit+0x1f4>)
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 f964 	bl	8001c60 <I2C_WaitOnFlagUntilTimeout>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800199e:	2302      	movs	r3, #2
 80019a0:	e0d3      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d101      	bne.n	80019b0 <HAL_I2C_Master_Transmit+0x50>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e0cc      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1ea>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d007      	beq.n	80019d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0201 	orr.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2221      	movs	r2, #33	@ 0x21
 80019ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2210      	movs	r2, #16
 80019f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	893a      	ldrh	r2, [r7, #8]
 8001a06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4a50      	ldr	r2, [pc, #320]	@ (8001b58 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a18:	8979      	ldrh	r1, [r7, #10]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	6a3a      	ldr	r2, [r7, #32]
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 f89c 	bl	8001b5c <I2C_MasterRequestWrite>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e08d      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a44:	e066      	b.n	8001b14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	6a39      	ldr	r1, [r7, #32]
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 fa22 	bl	8001e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00d      	beq.n	8001a72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d107      	bne.n	8001a6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e06b      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a76:	781a      	ldrb	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d11b      	bne.n	8001ae8 <HAL_I2C_Master_Transmit+0x188>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d017      	beq.n	8001ae8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abc:	781a      	ldrb	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	6a39      	ldr	r1, [r7, #32]
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 fa19 	bl	8001f24 <I2C_WaitOnBTFFlagUntilTimeout>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00d      	beq.n	8001b14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d107      	bne.n	8001b10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e01a      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d194      	bne.n	8001a46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e000      	b.n	8001b4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b48:	2302      	movs	r3, #2
  }
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	00100002 	.word	0x00100002
 8001b58:	ffff0000 	.word	0xffff0000

08001b5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d006      	beq.n	8001b86 <I2C_MasterRequestWrite+0x2a>
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d003      	beq.n	8001b86 <I2C_MasterRequestWrite+0x2a>
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b84:	d108      	bne.n	8001b98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	e00b      	b.n	8001bb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9c:	2b12      	cmp	r3, #18
 8001b9e:	d107      	bne.n	8001bb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 f84f 	bl	8001c60 <I2C_WaitOnFlagUntilTimeout>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00d      	beq.n	8001be4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bd6:	d103      	bne.n	8001be0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e035      	b.n	8001c50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001bec:	d108      	bne.n	8001c00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bee:	897b      	ldrh	r3, [r7, #10]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001bfc:	611a      	str	r2, [r3, #16]
 8001bfe:	e01b      	b.n	8001c38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c00:	897b      	ldrh	r3, [r7, #10]
 8001c02:	11db      	asrs	r3, r3, #7
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f003 0306 	and.w	r3, r3, #6
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f063 030f 	orn	r3, r3, #15
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	490e      	ldr	r1, [pc, #56]	@ (8001c58 <I2C_MasterRequestWrite+0xfc>)
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 f898 	bl	8001d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e010      	b.n	8001c50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c2e:	897b      	ldrh	r3, [r7, #10]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	4907      	ldr	r1, [pc, #28]	@ (8001c5c <I2C_MasterRequestWrite+0x100>)
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f888 	bl	8001d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	00010008 	.word	0x00010008
 8001c5c:	00010002 	.word	0x00010002

08001c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c70:	e048      	b.n	8001d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d044      	beq.n	8001d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7a:	f7ff fa65 	bl	8001148 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d302      	bcc.n	8001c90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d139      	bne.n	8001d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	0c1b      	lsrs	r3, r3, #16
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d10d      	bne.n	8001cb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	43da      	mvns	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bf0c      	ite	eq
 8001cac:	2301      	moveq	r3, #1
 8001cae:	2300      	movne	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	e00c      	b.n	8001cd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	43da      	mvns	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d116      	bne.n	8001d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf0:	f043 0220 	orr.w	r2, r3, #32
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e023      	b.n	8001d4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	0c1b      	lsrs	r3, r3, #16
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d10d      	bne.n	8001d2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	43da      	mvns	r2, r3
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	e00c      	b.n	8001d44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	43da      	mvns	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	4013      	ands	r3, r2
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf0c      	ite	eq
 8001d3c:	2301      	moveq	r3, #1
 8001d3e:	2300      	movne	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d093      	beq.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d62:	e071      	b.n	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d72:	d123      	bne.n	8001dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2220      	movs	r2, #32
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da8:	f043 0204 	orr.w	r2, r3, #4
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e067      	b.n	8001e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc2:	d041      	beq.n	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc4:	f7ff f9c0 	bl	8001148 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d302      	bcc.n	8001dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d136      	bne.n	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d10c      	bne.n	8001dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4013      	ands	r3, r2
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	bf14      	ite	ne
 8001df6:	2301      	movne	r3, #1
 8001df8:	2300      	moveq	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	e00b      	b.n	8001e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	43da      	mvns	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf14      	ite	ne
 8001e10:	2301      	movne	r3, #1
 8001e12:	2300      	moveq	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d016      	beq.n	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	f043 0220 	orr.w	r2, r3, #32
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e021      	b.n	8001e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	0c1b      	lsrs	r3, r3, #16
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d10c      	bne.n	8001e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	43da      	mvns	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf14      	ite	ne
 8001e64:	2301      	movne	r3, #1
 8001e66:	2300      	moveq	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	e00b      	b.n	8001e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4013      	ands	r3, r2
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	bf14      	ite	ne
 8001e7e:	2301      	movne	r3, #1
 8001e80:	2300      	moveq	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f47f af6d 	bne.w	8001d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ea0:	e034      	b.n	8001f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f886 	bl	8001fb4 <I2C_IsAcknowledgeFailed>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e034      	b.n	8001f1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d028      	beq.n	8001f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eba:	f7ff f945 	bl	8001148 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d302      	bcc.n	8001ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d11d      	bne.n	8001f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eda:	2b80      	cmp	r3, #128	@ 0x80
 8001edc:	d016      	beq.n	8001f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	f043 0220 	orr.w	r2, r3, #32
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e007      	b.n	8001f1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f16:	2b80      	cmp	r3, #128	@ 0x80
 8001f18:	d1c3      	bne.n	8001ea2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f30:	e034      	b.n	8001f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f83e 	bl	8001fb4 <I2C_IsAcknowledgeFailed>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e034      	b.n	8001fac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d028      	beq.n	8001f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4a:	f7ff f8fd 	bl	8001148 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d302      	bcc.n	8001f60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d11d      	bne.n	8001f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d016      	beq.n	8001f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	f043 0220 	orr.w	r2, r3, #32
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e007      	b.n	8001fac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d1c3      	bne.n	8001f32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fca:	d11b      	bne.n	8002004 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fd4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff0:	f043 0204 	orr.w	r2, r3, #4
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af02      	add	r7, sp, #8
 8002018:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e101      	b.n	8002228 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f00a f93a 	bl	800c2b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2203      	movs	r2, #3
 8002048:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002052:	d102      	bne.n	800205a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f002 fd43 	bl	8004aea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	7c1a      	ldrb	r2, [r3, #16]
 800206c:	f88d 2000 	strb.w	r2, [sp]
 8002070:	3304      	adds	r3, #4
 8002072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002074:	f002 fc22 	bl	80048bc <USB_CoreInit>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2202      	movs	r2, #2
 8002082:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e0ce      	b.n	8002228 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f002 fd3b 	bl	8004b0c <USB_SetCurrentMode>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0bf      	b.n	8002228 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e04a      	b.n	8002144 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	3315      	adds	r3, #21
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3314      	adds	r3, #20
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	b298      	uxth	r0, r3
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	332e      	adds	r3, #46	@ 0x2e
 80020ea:	4602      	mov	r2, r0
 80020ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	3318      	adds	r3, #24
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	331c      	adds	r3, #28
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	3320      	adds	r3, #32
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	3324      	adds	r3, #36	@ 0x24
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	3301      	adds	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	791b      	ldrb	r3, [r3, #4]
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	429a      	cmp	r2, r3
 800214c:	d3af      	bcc.n	80020ae <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
 8002152:	e044      	b.n	80021de <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4413      	add	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	3301      	adds	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	791b      	ldrb	r3, [r3, #4]
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d3b5      	bcc.n	8002154 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7c1a      	ldrb	r2, [r3, #16]
 80021f0:	f88d 2000 	strb.w	r2, [sp]
 80021f4:	3304      	adds	r3, #4
 80021f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f8:	f002 fcd4 	bl	8004ba4 <USB_DevInit>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2202      	movs	r2, #2
 8002206:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e00c      	b.n	8002228 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f003 fd1e 	bl	8005c62 <USB_DevDisconnect>

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_PCD_Start+0x1c>
 8002248:	2302      	movs	r3, #2
 800224a:	e022      	b.n	8002292 <HAL_PCD_Start+0x62>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800225c:	2b00      	cmp	r3, #0
 800225e:	d009      	beq.n	8002274 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f002 fc25 	bl	8004ac8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f003 fccc 	bl	8005c20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800229a:	b590      	push	{r4, r7, lr}
 800229c:	b08d      	sub	sp, #52	@ 0x34
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 fd8a 	bl	8005dca <USB_GetMode>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f040 848c 	bne.w	8002bd6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 fcee 	bl	8005ca4 <USB_ReadInterrupts>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 8482 	beq.w	8002bd4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f003 fcdb 	bl	8005ca4 <USB_ReadInterrupts>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d107      	bne.n	8002308 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f002 0202 	and.w	r2, r2, #2
 8002306:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f003 fcc9 	bl	8005ca4 <USB_ReadInterrupts>
 8002312:	4603      	mov	r3, r0
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b10      	cmp	r3, #16
 800231a:	d161      	bne.n	80023e0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0210 	bic.w	r2, r2, #16
 800232a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f003 020f 	and.w	r2, r3, #15
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	3304      	adds	r3, #4
 800234a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	0c5b      	lsrs	r3, r3, #17
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	2b02      	cmp	r3, #2
 8002356:	d124      	bne.n	80023a2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d035      	beq.n	80023d0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800236e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002372:	b29b      	uxth	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	6a38      	ldr	r0, [r7, #32]
 8002378:	f003 fb00 	bl	800597c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002388:	441a      	add	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800239a:	441a      	add	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	615a      	str	r2, [r3, #20]
 80023a0:	e016      	b.n	80023d0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	0c5b      	lsrs	r3, r3, #17
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d110      	bne.n	80023d0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023b4:	2208      	movs	r2, #8
 80023b6:	4619      	mov	r1, r3
 80023b8:	6a38      	ldr	r0, [r7, #32]
 80023ba:	f003 fadf 	bl	800597c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ca:	441a      	add	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0210 	orr.w	r2, r2, #16
 80023de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f003 fc5d 	bl	8005ca4 <USB_ReadInterrupts>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80023f4:	f040 80a7 	bne.w	8002546 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f003 fc62 	bl	8005cca <USB_ReadDevAllOutEpInterrupt>
 8002406:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002408:	e099      	b.n	800253e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800240a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 808e 	beq.w	8002532 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f003 fc86 	bl	8005d32 <USB_ReadDevOutEPInterrupt>
 8002426:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00c      	beq.n	800244c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	4413      	add	r3, r2
 800243a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800243e:	461a      	mov	r2, r3
 8002440:	2301      	movs	r3, #1
 8002442:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002444:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fea4 	bl	8003194 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00c      	beq.n	8002470 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	4413      	add	r3, r2
 800245e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002462:	461a      	mov	r2, r3
 8002464:	2308      	movs	r3, #8
 8002466:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002468:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 ff7a 	bl	8003364 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	4413      	add	r3, r2
 8002482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002486:	461a      	mov	r2, r3
 8002488:	2310      	movs	r3, #16
 800248a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d030      	beq.n	80024f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249e:	2b80      	cmp	r3, #128	@ 0x80
 80024a0:	d109      	bne.n	80024b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	3304      	adds	r3, #4
 80024ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	78db      	ldrb	r3, [r3, #3]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d108      	bne.n	80024e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2200      	movs	r2, #0
 80024d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	4619      	mov	r1, r3
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f009 ffe5 	bl	800c4b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024f2:	461a      	mov	r2, r3
 80024f4:	2302      	movs	r3, #2
 80024f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d008      	beq.n	8002514 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	4413      	add	r3, r2
 800250a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800250e:	461a      	mov	r2, r3
 8002510:	2320      	movs	r3, #32
 8002512:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800251e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	4413      	add	r3, r2
 8002526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800252a:	461a      	mov	r2, r3
 800252c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002530:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002534:	3301      	adds	r3, #1
 8002536:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800253e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	f47f af62 	bne.w	800240a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f003 fbaa 	bl	8005ca4 <USB_ReadInterrupts>
 8002550:	4603      	mov	r3, r0
 8002552:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002556:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800255a:	f040 80db 	bne.w	8002714 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f003 fbcb 	bl	8005cfe <USB_ReadDevAllInEpInterrupt>
 8002568:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800256e:	e0cd      	b.n	800270c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 80c2 	beq.w	8002700 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f003 fbf1 	bl	8005d6e <USB_ReadDevInEPInterrupt>
 800258c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d057      	beq.n	8002648 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	2201      	movs	r2, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69f9      	ldr	r1, [r7, #28]
 80025b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80025b8:	4013      	ands	r3, r2
 80025ba:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025c8:	461a      	mov	r2, r3
 80025ca:	2301      	movs	r3, #1
 80025cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	799b      	ldrb	r3, [r3, #6]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d132      	bne.n	800263c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	3320      	adds	r3, #32
 80025e6:	6819      	ldr	r1, [r3, #0]
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4403      	add	r3, r0
 80025f6:	331c      	adds	r3, #28
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4419      	add	r1, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4403      	add	r3, r0
 800260a:	3320      	adds	r3, #32
 800260c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	2b00      	cmp	r3, #0
 8002612:	d113      	bne.n	800263c <HAL_PCD_IRQHandler+0x3a2>
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	3324      	adds	r3, #36	@ 0x24
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d108      	bne.n	800263c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002634:	461a      	mov	r2, r3
 8002636:	2101      	movs	r1, #1
 8002638:	f003 fbf8 	bl	8005e2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	b2db      	uxtb	r3, r3
 8002640:	4619      	mov	r1, r3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f009 feb9 	bl	800c3ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	4413      	add	r3, r2
 800265a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800265e:	461a      	mov	r2, r3
 8002660:	2308      	movs	r3, #8
 8002662:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800267a:	461a      	mov	r2, r3
 800267c:	2310      	movs	r3, #16
 800267e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002696:	461a      	mov	r2, r3
 8002698:	2340      	movs	r3, #64	@ 0x40
 800269a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d023      	beq.n	80026ee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026a8:	6a38      	ldr	r0, [r7, #32]
 80026aa:	f002 fbdf 	bl	8004e6c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	3310      	adds	r3, #16
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	3304      	adds	r3, #4
 80026c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	78db      	ldrb	r3, [r3, #3]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d108      	bne.n	80026dc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2200      	movs	r2, #0
 80026ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f009 fefc 	bl	800c4d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026e8:	461a      	mov	r2, r3
 80026ea:	2302      	movs	r3, #2
 80026ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fcbd 	bl	800307a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002702:	3301      	adds	r3, #1
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002708:	085b      	lsrs	r3, r3, #1
 800270a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800270c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	f47f af2e 	bne.w	8002570 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fac3 	bl	8005ca4 <USB_ReadInterrupts>
 800271e:	4603      	mov	r3, r0
 8002720:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002724:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002728:	d122      	bne.n	8002770 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002744:	2b01      	cmp	r3, #1
 8002746:	d108      	bne.n	800275a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002750:	2100      	movs	r1, #0
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fea4 	bl	80034a0 <HAL_PCDEx_LPM_Callback>
 8002758:	e002      	b.n	8002760 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f009 fe9a 	bl	800c494 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800276e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f003 fa95 	bl	8005ca4 <USB_ReadInterrupts>
 800277a:	4603      	mov	r3, r0
 800277c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002780:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002784:	d112      	bne.n	80027ac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d102      	bne.n	800279c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f009 fe56 	bl	800c448 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80027aa:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f003 fa77 	bl	8005ca4 <USB_ReadInterrupts>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027c0:	f040 80b7 	bne.w	8002932 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027d2:	f023 0301 	bic.w	r3, r3, #1
 80027d6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2110      	movs	r1, #16
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fb44 	bl	8004e6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e4:	2300      	movs	r3, #0
 80027e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027e8:	e046      	b.n	8002878 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027f6:	461a      	mov	r2, r3
 80027f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80027fc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4413      	add	r3, r2
 8002806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800280e:	0151      	lsls	r1, r2, #5
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	440a      	add	r2, r1
 8002814:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002818:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800281c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800281e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	4413      	add	r3, r2
 8002826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800282a:	461a      	mov	r2, r3
 800282c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002830:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	4413      	add	r3, r2
 800283a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002842:	0151      	lsls	r1, r2, #5
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	440a      	add	r2, r1
 8002848:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800284c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002850:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	4413      	add	r3, r2
 800285a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002862:	0151      	lsls	r1, r2, #5
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	440a      	add	r2, r1
 8002868:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800286c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002870:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002874:	3301      	adds	r3, #1
 8002876:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	791b      	ldrb	r3, [r3, #4]
 800287c:	461a      	mov	r2, r3
 800287e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002880:	4293      	cmp	r3, r2
 8002882:	d3b2      	bcc.n	80027ea <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002892:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002896:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7bdb      	ldrb	r3, [r3, #15]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d016      	beq.n	80028ce <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028b0:	f043 030b 	orr.w	r3, r3, #11
 80028b4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028c6:	f043 030b 	orr.w	r3, r3, #11
 80028ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80028cc:	e015      	b.n	80028fa <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028e0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80028e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028f4:	f043 030b 	orr.w	r3, r3, #11
 80028f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002908:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800290c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800291c:	461a      	mov	r2, r3
 800291e:	f003 fa85 	bl	8005e2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f003 f9b4 	bl	8005ca4 <USB_ReadInterrupts>
 800293c:	4603      	mov	r3, r0
 800293e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002946:	d123      	bne.n	8002990 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f003 fa4a 	bl	8005de6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f002 fb01 	bl	8004f5e <USB_GetDevSpeed>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681c      	ldr	r4, [r3, #0]
 8002968:	f001 fa0a 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 800296c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002972:	461a      	mov	r2, r3
 8002974:	4620      	mov	r0, r4
 8002976:	f002 f805 	bl	8004984 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f009 fd45 	bl	800c40a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800298e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f003 f985 	bl	8005ca4 <USB_ReadInterrupts>
 800299a:	4603      	mov	r3, r0
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d10a      	bne.n	80029ba <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f009 fd22 	bl	800c3ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f002 0208 	and.w	r2, r2, #8
 80029b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 f970 	bl	8005ca4 <USB_ReadInterrupts>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ca:	2b80      	cmp	r3, #128	@ 0x80
 80029cc:	d123      	bne.n	8002a16 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029da:	2301      	movs	r3, #1
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029de:	e014      	b.n	8002a0a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	4619      	mov	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fb0a 	bl	8003018 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	3301      	adds	r3, #1
 8002a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	791b      	ldrb	r3, [r3, #4]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d3e4      	bcc.n	80029e0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 f942 	bl	8005ca4 <USB_ReadInterrupts>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a2a:	d13c      	bne.n	8002aa6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a30:	e02b      	b.n	8002a8a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	3318      	adds	r3, #24
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d115      	bne.n	8002a84 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a58:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	da12      	bge.n	8002a84 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3317      	adds	r3, #23
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 faca 	bl	8003018 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	3301      	adds	r3, #1
 8002a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	791b      	ldrb	r3, [r3, #4]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d3cd      	bcc.n	8002a32 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002aa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 f8fa 	bl	8005ca4 <USB_ReadInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002aba:	d156      	bne.n	8002b6a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002abc:	2301      	movs	r3, #1
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac0:	e045      	b.n	8002b4e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d12e      	bne.n	8002b48 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002aea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	da2b      	bge.n	8002b48 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002afc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d121      	bne.n	8002b48 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002b16:	2201      	movs	r2, #1
 8002b18:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10a      	bne.n	8002b48 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b44:	6053      	str	r3, [r2, #4]
            break;
 8002b46:	e008      	b.n	8002b5a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	791b      	ldrb	r3, [r3, #4]
 8002b52:	461a      	mov	r2, r3
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d3b3      	bcc.n	8002ac2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 f898 	bl	8005ca4 <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7e:	d10a      	bne.n	8002b96 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f009 fcb9 	bl	800c4f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f003 f882 	bl	8005ca4 <USB_ReadInterrupts>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d115      	bne.n	8002bd6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f009 fca9 	bl	800c514 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	e000      	b.n	8002bd6 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002bd4:	bf00      	nop
    }
  }
}
 8002bd6:	3734      	adds	r7, #52	@ 0x34
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd90      	pop	{r4, r7, pc}

08002bdc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_PCD_SetAddress+0x1a>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e012      	b.n	8002c1c <HAL_PCD_SetAddress+0x40>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f002 ffe1 	bl	8005bd4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	461a      	mov	r2, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	70fb      	strb	r3, [r7, #3]
 8002c36:	460b      	mov	r3, r1
 8002c38:	803b      	strh	r3, [r7, #0]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	da0f      	bge.n	8002c6a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	f003 020f 	and.w	r2, r3, #15
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	3310      	adds	r3, #16
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3304      	adds	r3, #4
 8002c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	705a      	strb	r2, [r3, #1]
 8002c68:	e00f      	b.n	8002c8a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	f003 020f 	and.w	r2, r3, #15
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4413      	add	r3, r2
 8002c80:	3304      	adds	r3, #4
 8002c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002c96:	883b      	ldrh	r3, [r7, #0]
 8002c98:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	78ba      	ldrb	r2, [r7, #2]
 8002ca4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	785b      	ldrb	r3, [r3, #1]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d004      	beq.n	8002cb8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cb8:	78bb      	ldrb	r3, [r7, #2]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d102      	bne.n	8002cc4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_PCD_EP_Open+0xae>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e00e      	b.n	8002cf0 <HAL_PCD_EP_Open+0xcc>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68f9      	ldr	r1, [r7, #12]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f002 f961 	bl	8004fa8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002cee:	7afb      	ldrb	r3, [r7, #11]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	da0f      	bge.n	8002d2c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	f003 020f 	and.w	r2, r3, #15
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	3310      	adds	r3, #16
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	3304      	adds	r3, #4
 8002d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	705a      	strb	r2, [r3, #1]
 8002d2a:	e00f      	b.n	8002d4c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	f003 020f 	and.w	r2, r3, #15
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	3304      	adds	r3, #4
 8002d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_PCD_EP_Close+0x6e>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e00e      	b.n	8002d84 <HAL_PCD_EP_Close+0x8c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68f9      	ldr	r1, [r7, #12]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f002 f99f 	bl	80050b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d9c:	7afb      	ldrb	r3, [r7, #11]
 8002d9e:	f003 020f 	and.w	r2, r3, #15
 8002da2:	4613      	mov	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4413      	add	r3, r2
 8002db2:	3304      	adds	r3, #4
 8002db4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dce:	7afb      	ldrb	r3, [r7, #11]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	799b      	ldrb	r3, [r3, #6]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d102      	bne.n	8002de8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	799b      	ldrb	r3, [r3, #6]
 8002df0:	461a      	mov	r2, r3
 8002df2:	6979      	ldr	r1, [r7, #20]
 8002df4:	f002 fa3c 	bl	8005270 <USB_EPStartXfer>

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	f003 020f 	and.w	r2, r3, #15
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002e24:	681b      	ldr	r3, [r3, #0]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b086      	sub	sp, #24
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e42:	7afb      	ldrb	r3, [r7, #11]
 8002e44:	f003 020f 	and.w	r2, r3, #15
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	3310      	adds	r3, #16
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4413      	add	r3, r2
 8002e56:	3304      	adds	r3, #4
 8002e58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e72:	7afb      	ldrb	r3, [r7, #11]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	799b      	ldrb	r3, [r3, #6]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d102      	bne.n	8002e8c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	799b      	ldrb	r3, [r3, #6]
 8002e94:	461a      	mov	r2, r3
 8002e96:	6979      	ldr	r1, [r7, #20]
 8002e98:	f002 f9ea 	bl	8005270 <USB_EPStartXfer>

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	7912      	ldrb	r2, [r2, #4]
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e04f      	b.n	8002f64 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	da0f      	bge.n	8002eec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	f003 020f 	and.w	r2, r3, #15
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	3310      	adds	r3, #16
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	705a      	strb	r2, [r3, #1]
 8002eea:	e00d      	b.n	8002f08 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	3304      	adds	r3, #4
 8002f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_PCD_EP_SetStall+0x82>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e01d      	b.n	8002f64 <HAL_PCD_EP_SetStall+0xbe>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68f9      	ldr	r1, [r7, #12]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f002 fd78 	bl	8005a2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	7999      	ldrb	r1, [r3, #6]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f54:	461a      	mov	r2, r3
 8002f56:	f002 ff69 	bl	8005e2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	7912      	ldrb	r2, [r2, #4]
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e042      	b.n	8003010 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	da0f      	bge.n	8002fb2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	3310      	adds	r3, #16
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	705a      	strb	r2, [r3, #1]
 8002fb0:	e00f      	b.n	8002fd2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	f003 020f 	and.w	r2, r3, #15
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3304      	adds	r3, #4
 8002fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_PCD_EP_ClrStall+0x86>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e00e      	b.n	8003010 <HAL_PCD_EP_ClrStall+0xa4>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68f9      	ldr	r1, [r7, #12]
 8003000:	4618      	mov	r0, r3
 8003002:	f002 fd81 	bl	8005b08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003028:	2b00      	cmp	r3, #0
 800302a:	da0c      	bge.n	8003046 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	f003 020f 	and.w	r2, r3, #15
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	3310      	adds	r3, #16
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	4413      	add	r3, r2
 8003040:	3304      	adds	r3, #4
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	e00c      	b.n	8003060 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 020f 	and.w	r2, r3, #15
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	4413      	add	r3, r2
 800305c:	3304      	adds	r3, #4
 800305e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68f9      	ldr	r1, [r7, #12]
 8003066:	4618      	mov	r0, r3
 8003068:	f002 fba0 	bl	80057ac <USB_EPStopXfer>
 800306c:	4603      	mov	r3, r0
 800306e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003070:	7afb      	ldrb	r3, [r7, #11]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b08a      	sub	sp, #40	@ 0x28
 800307e:	af02      	add	r7, sp, #8
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	3310      	adds	r3, #16
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	3304      	adds	r3, #4
 80030a0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d901      	bls.n	80030b2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e06b      	b.n	800318a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d902      	bls.n	80030ce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3303      	adds	r3, #3
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030d6:	e02a      	b.n	800312e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d902      	bls.n	80030f4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	3303      	adds	r3, #3
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	68d9      	ldr	r1, [r3, #12]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	4603      	mov	r3, r0
 8003110:	6978      	ldr	r0, [r7, #20]
 8003112:	f002 fbf5 	bl	8005900 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	441a      	add	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	441a      	add	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4413      	add	r3, r2
 8003136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	429a      	cmp	r2, r3
 8003142:	d809      	bhi.n	8003158 <PCD_WriteEmptyTxFifo+0xde>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800314c:	429a      	cmp	r2, r3
 800314e:	d203      	bcs.n	8003158 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1bf      	bne.n	80030d8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	429a      	cmp	r2, r3
 8003162:	d811      	bhi.n	8003188 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	2201      	movs	r2, #1
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	43db      	mvns	r3, r3
 800317e:	6939      	ldr	r1, [r7, #16]
 8003180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003184:	4013      	ands	r3, r2
 8003186:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	333c      	adds	r3, #60	@ 0x3c
 80031ac:	3304      	adds	r3, #4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	799b      	ldrb	r3, [r3, #6]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d17b      	bne.n	80032c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d015      	beq.n	8003200 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	4a61      	ldr	r2, [pc, #388]	@ (800335c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	f240 80b9 	bls.w	8003350 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80b3 	beq.w	8003350 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031f6:	461a      	mov	r2, r3
 80031f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031fc:	6093      	str	r3, [r2, #8]
 80031fe:	e0a7      	b.n	8003350 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d009      	beq.n	800321e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4413      	add	r3, r2
 8003212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003216:	461a      	mov	r2, r3
 8003218:	2320      	movs	r3, #32
 800321a:	6093      	str	r3, [r2, #8]
 800321c:	e098      	b.n	8003350 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003224:	2b00      	cmp	r3, #0
 8003226:	f040 8093 	bne.w	8003350 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	4a4b      	ldr	r2, [pc, #300]	@ (800335c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d90f      	bls.n	8003252 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003248:	461a      	mov	r2, r3
 800324a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800324e:	6093      	str	r3, [r2, #8]
 8003250:	e07e      	b.n	8003350 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	4413      	add	r3, r2
 8003264:	3304      	adds	r3, #4
 8003266:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a1a      	ldr	r2, [r3, #32]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	0159      	lsls	r1, r3, #5
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	440b      	add	r3, r1
 8003274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327e:	1ad2      	subs	r2, r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d114      	bne.n	80032b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800329c:	461a      	mov	r2, r3
 800329e:	2101      	movs	r1, #1
 80032a0:	f002 fdc4 	bl	8005e2c <USB_EP0_OutStart>
 80032a4:	e006      	b.n	80032b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	441a      	add	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f009 f862 	bl	800c384 <HAL_PCD_DataOutStageCallback>
 80032c0:	e046      	b.n	8003350 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	4a26      	ldr	r2, [pc, #152]	@ (8003360 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d124      	bne.n	8003314 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032e0:	461a      	mov	r2, r3
 80032e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032e6:	6093      	str	r3, [r2, #8]
 80032e8:	e032      	b.n	8003350 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003300:	461a      	mov	r2, r3
 8003302:	2320      	movs	r3, #32
 8003304:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	4619      	mov	r1, r3
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f009 f839 	bl	800c384 <HAL_PCD_DataOutStageCallback>
 8003312:	e01d      	b.n	8003350 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d114      	bne.n	8003344 <PCD_EP_OutXfrComplete_int+0x1b0>
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	4613      	mov	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d108      	bne.n	8003344 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800333c:	461a      	mov	r2, r3
 800333e:	2100      	movs	r1, #0
 8003340:	f002 fd74 	bl	8005e2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f009 f81a 	bl	800c384 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3720      	adds	r7, #32
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	4f54300a 	.word	0x4f54300a
 8003360:	4f54310a 	.word	0x4f54310a

08003364 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	333c      	adds	r3, #60	@ 0x3c
 800337c:	3304      	adds	r3, #4
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a15      	ldr	r2, [pc, #84]	@ (80033ec <PCD_EP_OutSetupPacket_int+0x88>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d90e      	bls.n	80033b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d009      	beq.n	80033b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033b0:	461a      	mov	r2, r3
 80033b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f008 ffd1 	bl	800c360 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4a0a      	ldr	r2, [pc, #40]	@ (80033ec <PCD_EP_OutSetupPacket_int+0x88>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d90c      	bls.n	80033e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	799b      	ldrb	r3, [r3, #6]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d108      	bne.n	80033e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033d8:	461a      	mov	r2, r3
 80033da:	2101      	movs	r1, #1
 80033dc:	f002 fd26 	bl	8005e2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	4f54300a 	.word	0x4f54300a

080033f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	70fb      	strb	r3, [r7, #3]
 80033fc:	4613      	mov	r3, r2
 80033fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d107      	bne.n	800341e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800340e:	883b      	ldrh	r3, [r7, #0]
 8003410:	0419      	lsls	r1, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	430a      	orrs	r2, r1
 800341a:	629a      	str	r2, [r3, #40]	@ 0x28
 800341c:	e028      	b.n	8003470 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	4413      	add	r3, r2
 800342a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800342c:	2300      	movs	r3, #0
 800342e:	73fb      	strb	r3, [r7, #15]
 8003430:	e00d      	b.n	800344e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	3340      	adds	r3, #64	@ 0x40
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	4413      	add	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	3301      	adds	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	7bfa      	ldrb	r2, [r7, #15]
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	3b01      	subs	r3, #1
 8003454:	429a      	cmp	r2, r3
 8003456:	d3ec      	bcc.n	8003432 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003458:	883b      	ldrh	r3, [r7, #0]
 800345a:	0418      	lsls	r0, r3, #16
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6819      	ldr	r1, [r3, #0]
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	3b01      	subs	r3, #1
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	4302      	orrs	r2, r0
 8003468:	3340      	adds	r3, #64	@ 0x40
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	887a      	ldrh	r2, [r7, #2]
 8003490:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e267      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d075      	beq.n	80035c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034d6:	4b88      	ldr	r3, [pc, #544]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d00c      	beq.n	80034fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e2:	4b85      	ldr	r3, [pc, #532]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d112      	bne.n	8003514 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ee:	4b82      	ldr	r3, [pc, #520]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034fa:	d10b      	bne.n	8003514 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	4b7e      	ldr	r3, [pc, #504]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d05b      	beq.n	80035c0 <HAL_RCC_OscConfig+0x108>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d157      	bne.n	80035c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e242      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800351c:	d106      	bne.n	800352c <HAL_RCC_OscConfig+0x74>
 800351e:	4b76      	ldr	r3, [pc, #472]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a75      	ldr	r2, [pc, #468]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e01d      	b.n	8003568 <HAL_RCC_OscConfig+0xb0>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0x98>
 8003536:	4b70      	ldr	r3, [pc, #448]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a6f      	ldr	r2, [pc, #444]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800353c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4b6d      	ldr	r3, [pc, #436]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a6c      	ldr	r2, [pc, #432]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e00b      	b.n	8003568 <HAL_RCC_OscConfig+0xb0>
 8003550:	4b69      	ldr	r3, [pc, #420]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a68      	ldr	r2, [pc, #416]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b66      	ldr	r3, [pc, #408]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a65      	ldr	r2, [pc, #404]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fd fdea 	bl	8001148 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003578:	f7fd fde6 	bl	8001148 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	@ 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e207      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	4b5b      	ldr	r3, [pc, #364]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0xc0>
 8003596:	e014      	b.n	80035c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fd fdd6 	bl	8001148 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a0:	f7fd fdd2 	bl	8001148 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	@ 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e1f3      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b2:	4b51      	ldr	r3, [pc, #324]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0xe8>
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d063      	beq.n	8003696 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035ce:	4b4a      	ldr	r3, [pc, #296]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00b      	beq.n	80035f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035da:	4b47      	ldr	r3, [pc, #284]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d11c      	bne.n	8003620 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e6:	4b44      	ldr	r3, [pc, #272]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d116      	bne.n	8003620 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f2:	4b41      	ldr	r3, [pc, #260]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d005      	beq.n	800360a <HAL_RCC_OscConfig+0x152>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d001      	beq.n	800360a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e1c7      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360a:	4b3b      	ldr	r3, [pc, #236]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4937      	ldr	r1, [pc, #220]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800361a:	4313      	orrs	r3, r2
 800361c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361e:	e03a      	b.n	8003696 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d020      	beq.n	800366a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003628:	4b34      	ldr	r3, [pc, #208]	@ (80036fc <HAL_RCC_OscConfig+0x244>)
 800362a:	2201      	movs	r2, #1
 800362c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362e:	f7fd fd8b 	bl	8001148 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003636:	f7fd fd87 	bl	8001148 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e1a8      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003648:	4b2b      	ldr	r3, [pc, #172]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	4b28      	ldr	r3, [pc, #160]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4925      	ldr	r1, [pc, #148]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 8003664:	4313      	orrs	r3, r2
 8003666:	600b      	str	r3, [r1, #0]
 8003668:	e015      	b.n	8003696 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800366a:	4b24      	ldr	r3, [pc, #144]	@ (80036fc <HAL_RCC_OscConfig+0x244>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fd fd6a 	bl	8001148 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003678:	f7fd fd66 	bl	8001148 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e187      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368a:	4b1b      	ldr	r3, [pc, #108]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d036      	beq.n	8003710 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d016      	beq.n	80036d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036aa:	4b15      	ldr	r3, [pc, #84]	@ (8003700 <HAL_RCC_OscConfig+0x248>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7fd fd4a 	bl	8001148 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b8:	f7fd fd46 	bl	8001148 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e167      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ca:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <HAL_RCC_OscConfig+0x240>)
 80036cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x200>
 80036d6:	e01b      	b.n	8003710 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d8:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <HAL_RCC_OscConfig+0x248>)
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036de:	f7fd fd33 	bl	8001148 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e4:	e00e      	b.n	8003704 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e6:	f7fd fd2f 	bl	8001148 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d907      	bls.n	8003704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e150      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
 80036f8:	40023800 	.word	0x40023800
 80036fc:	42470000 	.word	0x42470000
 8003700:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003704:	4b88      	ldr	r3, [pc, #544]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ea      	bne.n	80036e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8097 	beq.w	800384c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800371e:	2300      	movs	r3, #0
 8003720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003722:	4b81      	ldr	r3, [pc, #516]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10f      	bne.n	800374e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	4b7d      	ldr	r3, [pc, #500]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	4a7c      	ldr	r2, [pc, #496]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800373c:	6413      	str	r3, [r2, #64]	@ 0x40
 800373e:	4b7a      	ldr	r3, [pc, #488]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800374a:	2301      	movs	r3, #1
 800374c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374e:	4b77      	ldr	r3, [pc, #476]	@ (800392c <HAL_RCC_OscConfig+0x474>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d118      	bne.n	800378c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800375a:	4b74      	ldr	r3, [pc, #464]	@ (800392c <HAL_RCC_OscConfig+0x474>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a73      	ldr	r2, [pc, #460]	@ (800392c <HAL_RCC_OscConfig+0x474>)
 8003760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003766:	f7fd fcef 	bl	8001148 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376e:	f7fd fceb 	bl	8001148 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e10c      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003780:	4b6a      	ldr	r3, [pc, #424]	@ (800392c <HAL_RCC_OscConfig+0x474>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0f0      	beq.n	800376e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d106      	bne.n	80037a2 <HAL_RCC_OscConfig+0x2ea>
 8003794:	4b64      	ldr	r3, [pc, #400]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003798:	4a63      	ldr	r2, [pc, #396]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a0:	e01c      	b.n	80037dc <HAL_RCC_OscConfig+0x324>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b05      	cmp	r3, #5
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x30c>
 80037aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ae:	4a5e      	ldr	r2, [pc, #376]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037b0:	f043 0304 	orr.w	r3, r3, #4
 80037b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0x324>
 80037c4:	4b58      	ldr	r3, [pc, #352]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c8:	4a57      	ldr	r2, [pc, #348]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d0:	4b55      	ldr	r3, [pc, #340]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d4:	4a54      	ldr	r2, [pc, #336]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80037d6:	f023 0304 	bic.w	r3, r3, #4
 80037da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d015      	beq.n	8003810 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7fd fcb0 	bl	8001148 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ec:	f7fd fcac 	bl	8001148 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e0cb      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003802:	4b49      	ldr	r3, [pc, #292]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0ee      	beq.n	80037ec <HAL_RCC_OscConfig+0x334>
 800380e:	e014      	b.n	800383a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003810:	f7fd fc9a 	bl	8001148 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003816:	e00a      	b.n	800382e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7fd fc96 	bl	8001148 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e0b5      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382e:	4b3e      	ldr	r3, [pc, #248]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1ee      	bne.n	8003818 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800383a:	7dfb      	ldrb	r3, [r7, #23]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d105      	bne.n	800384c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003840:	4b39      	ldr	r3, [pc, #228]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003844:	4a38      	ldr	r2, [pc, #224]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800384a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80a1 	beq.w	8003998 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003856:	4b34      	ldr	r3, [pc, #208]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b08      	cmp	r3, #8
 8003860:	d05c      	beq.n	800391c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d141      	bne.n	80038ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386a:	4b31      	ldr	r3, [pc, #196]	@ (8003930 <HAL_RCC_OscConfig+0x478>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fd fc6a 	bl	8001148 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7fd fc66 	bl	8001148 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e087      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	4b27      	ldr	r3, [pc, #156]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69da      	ldr	r2, [r3, #28]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	019b      	lsls	r3, r3, #6
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	3b01      	subs	r3, #1
 80038b0:	041b      	lsls	r3, r3, #16
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	491b      	ldr	r1, [pc, #108]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003930 <HAL_RCC_OscConfig+0x478>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c6:	f7fd fc3f 	bl	8001148 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fd fc3b 	bl	8001148 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e05c      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e0:	4b11      	ldr	r3, [pc, #68]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0x416>
 80038ec:	e054      	b.n	8003998 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ee:	4b10      	ldr	r3, [pc, #64]	@ (8003930 <HAL_RCC_OscConfig+0x478>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fd fc28 	bl	8001148 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fc:	f7fd fc24 	bl	8001148 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e045      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390e:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <HAL_RCC_OscConfig+0x470>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x444>
 800391a:	e03d      	b.n	8003998 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d107      	bne.n	8003934 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e038      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
 8003928:	40023800 	.word	0x40023800
 800392c:	40007000 	.word	0x40007000
 8003930:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003934:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <HAL_RCC_OscConfig+0x4ec>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d028      	beq.n	8003994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d121      	bne.n	8003994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d11a      	bne.n	8003994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003964:	4013      	ands	r3, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800396a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800396c:	4293      	cmp	r3, r2
 800396e:	d111      	bne.n	8003994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397a:	085b      	lsrs	r3, r3, #1
 800397c:	3b01      	subs	r3, #1
 800397e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d107      	bne.n	8003994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800

080039a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0cc      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039bc:	4b68      	ldr	r3, [pc, #416]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d90c      	bls.n	80039e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b65      	ldr	r3, [pc, #404]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b63      	ldr	r3, [pc, #396]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0b8      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d020      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039fc:	4b59      	ldr	r3, [pc, #356]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a58      	ldr	r2, [pc, #352]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a14:	4b53      	ldr	r3, [pc, #332]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4a52      	ldr	r2, [pc, #328]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a20:	4b50      	ldr	r3, [pc, #320]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	494d      	ldr	r1, [pc, #308]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d044      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	4b47      	ldr	r3, [pc, #284]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d119      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e07f      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d003      	beq.n	8003a66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a66:	4b3f      	ldr	r3, [pc, #252]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e06f      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a76:	4b3b      	ldr	r3, [pc, #236]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e067      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a86:	4b37      	ldr	r3, [pc, #220]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f023 0203 	bic.w	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	4934      	ldr	r1, [pc, #208]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a98:	f7fd fb56 	bl	8001148 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa0:	f7fd fb52 	bl	8001148 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e04f      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 020c 	and.w	r2, r3, #12
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d1eb      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b25      	ldr	r3, [pc, #148]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d20c      	bcs.n	8003af0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b22      	ldr	r3, [pc, #136]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	4b20      	ldr	r3, [pc, #128]	@ (8003b60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e032      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003afc:	4b19      	ldr	r3, [pc, #100]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4916      	ldr	r1, [pc, #88]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d009      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b1a:	4b12      	ldr	r3, [pc, #72]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	490e      	ldr	r1, [pc, #56]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b2e:	f000 f821 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 8003b32:	4602      	mov	r2, r0
 8003b34:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	490a      	ldr	r1, [pc, #40]	@ (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 8003b40:	5ccb      	ldrb	r3, [r1, r3]
 8003b42:	fa22 f303 	lsr.w	r3, r2, r3
 8003b46:	4a09      	ldr	r2, [pc, #36]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b4a:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fc fffa 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023c00 	.word	0x40023c00
 8003b64:	40023800 	.word	0x40023800
 8003b68:	0800d400 	.word	0x0800d400
 8003b6c:	20000004 	.word	0x20000004
 8003b70:	20000028 	.word	0x20000028

08003b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b78:	b094      	sub	sp, #80	@ 0x50
 8003b7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b8c:	4b79      	ldr	r3, [pc, #484]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d00d      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	f200 80e1 	bhi.w	8003d60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d003      	beq.n	8003bae <HAL_RCC_GetSysClockFreq+0x3a>
 8003ba6:	e0db      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ba8:	4b73      	ldr	r3, [pc, #460]	@ (8003d78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003baa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bac:	e0db      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bae:	4b73      	ldr	r3, [pc, #460]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x208>)
 8003bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bb2:	e0d8      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bb4:	4b6f      	ldr	r3, [pc, #444]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bbc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d063      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bca:	4b6a      	ldr	r3, [pc, #424]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	099b      	lsrs	r3, r3, #6
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bde:	2300      	movs	r3, #0
 8003be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003be2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003be6:	4622      	mov	r2, r4
 8003be8:	462b      	mov	r3, r5
 8003bea:	f04f 0000 	mov.w	r0, #0
 8003bee:	f04f 0100 	mov.w	r1, #0
 8003bf2:	0159      	lsls	r1, r3, #5
 8003bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bf8:	0150      	lsls	r0, r2, #5
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4621      	mov	r1, r4
 8003c00:	1a51      	subs	r1, r2, r1
 8003c02:	6139      	str	r1, [r7, #16]
 8003c04:	4629      	mov	r1, r5
 8003c06:	eb63 0301 	sbc.w	r3, r3, r1
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c18:	4659      	mov	r1, fp
 8003c1a:	018b      	lsls	r3, r1, #6
 8003c1c:	4651      	mov	r1, sl
 8003c1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c22:	4651      	mov	r1, sl
 8003c24:	018a      	lsls	r2, r1, #6
 8003c26:	4651      	mov	r1, sl
 8003c28:	ebb2 0801 	subs.w	r8, r2, r1
 8003c2c:	4659      	mov	r1, fp
 8003c2e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c46:	4690      	mov	r8, r2
 8003c48:	4699      	mov	r9, r3
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	eb18 0303 	adds.w	r3, r8, r3
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	462b      	mov	r3, r5
 8003c54:	eb49 0303 	adc.w	r3, r9, r3
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c66:	4629      	mov	r1, r5
 8003c68:	024b      	lsls	r3, r1, #9
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c70:	4621      	mov	r1, r4
 8003c72:	024a      	lsls	r2, r1, #9
 8003c74:	4610      	mov	r0, r2
 8003c76:	4619      	mov	r1, r3
 8003c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c84:	f7fc fafc 	bl	8000280 <__aeabi_uldivmod>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c90:	e058      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c92:	4b38      	ldr	r3, [pc, #224]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	2200      	movs	r2, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	4611      	mov	r1, r2
 8003c9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ca2:	623b      	str	r3, [r7, #32]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ca8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cac:	4642      	mov	r2, r8
 8003cae:	464b      	mov	r3, r9
 8003cb0:	f04f 0000 	mov.w	r0, #0
 8003cb4:	f04f 0100 	mov.w	r1, #0
 8003cb8:	0159      	lsls	r1, r3, #5
 8003cba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cbe:	0150      	lsls	r0, r2, #5
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cca:	4649      	mov	r1, r9
 8003ccc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ce0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ce4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ce8:	eb63 050b 	sbc.w	r5, r3, fp
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	00eb      	lsls	r3, r5, #3
 8003cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cfa:	00e2      	lsls	r2, r4, #3
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	461d      	mov	r5, r3
 8003d00:	4643      	mov	r3, r8
 8003d02:	18e3      	adds	r3, r4, r3
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	464b      	mov	r3, r9
 8003d08:	eb45 0303 	adc.w	r3, r5, r3
 8003d0c:	607b      	str	r3, [r7, #4]
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	028b      	lsls	r3, r1, #10
 8003d1e:	4621      	mov	r1, r4
 8003d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d24:	4621      	mov	r1, r4
 8003d26:	028a      	lsls	r2, r1, #10
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d2e:	2200      	movs	r2, #0
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	61fa      	str	r2, [r7, #28]
 8003d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d38:	f7fc faa2 	bl	8000280 <__aeabi_uldivmod>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4613      	mov	r3, r2
 8003d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d44:	4b0b      	ldr	r3, [pc, #44]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	0c1b      	lsrs	r3, r3, #16
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	3301      	adds	r3, #1
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d5e:	e002      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d60:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3750      	adds	r7, #80	@ 0x50
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	00f42400 	.word	0x00f42400
 8003d7c:	007a1200 	.word	0x007a1200

08003d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d84:	4b03      	ldr	r3, [pc, #12]	@ (8003d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d86:	681b      	ldr	r3, [r3, #0]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20000004 	.word	0x20000004

08003d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d9c:	f7ff fff0 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b05      	ldr	r3, [pc, #20]	@ (8003db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	0a9b      	lsrs	r3, r3, #10
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	4903      	ldr	r1, [pc, #12]	@ (8003dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dae:	5ccb      	ldrb	r3, [r1, r3]
 8003db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	0800d410 	.word	0x0800d410

08003dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dc4:	f7ff ffdc 	bl	8003d80 <HAL_RCC_GetHCLKFreq>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	0b5b      	lsrs	r3, r3, #13
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4903      	ldr	r1, [pc, #12]	@ (8003de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40023800 	.word	0x40023800
 8003de4:	0800d410 	.word	0x0800d410

08003de8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	220f      	movs	r2, #15
 8003df6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003df8:	4b12      	ldr	r3, [pc, #72]	@ (8003e44 <HAL_RCC_GetClockConfig+0x5c>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0203 	and.w	r2, r3, #3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e04:	4b0f      	ldr	r3, [pc, #60]	@ (8003e44 <HAL_RCC_GetClockConfig+0x5c>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e10:	4b0c      	ldr	r3, [pc, #48]	@ (8003e44 <HAL_RCC_GetClockConfig+0x5c>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e1c:	4b09      	ldr	r3, [pc, #36]	@ (8003e44 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	08db      	lsrs	r3, r3, #3
 8003e22:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e2a:	4b07      	ldr	r3, [pc, #28]	@ (8003e48 <HAL_RCC_GetClockConfig+0x60>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0207 	and.w	r2, r3, #7
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	601a      	str	r2, [r3, #0]
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40023c00 	.word	0x40023c00

08003e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e041      	b.n	8003ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f839 	bl	8003eea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3304      	adds	r3, #4
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f000 f9b2 	bl	80041f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d001      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e044      	b.n	8003fa2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d018      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x6c>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f42:	d013      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x6c>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1a      	ldr	r2, [pc, #104]	@ (8003fb4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00e      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x6c>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a19      	ldr	r2, [pc, #100]	@ (8003fb8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d009      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x6c>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a17      	ldr	r2, [pc, #92]	@ (8003fbc <HAL_TIM_Base_Start_IT+0xbc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d004      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0x6c>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a16      	ldr	r2, [pc, #88]	@ (8003fc0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d111      	bne.n	8003f90 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b06      	cmp	r3, #6
 8003f7c:	d010      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0201 	orr.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8e:	e007      	b.n	8003fa0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40014000 	.word	0x40014000

08003fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d020      	beq.n	8004028 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d01b      	beq.n	8004028 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0202 	mvn.w	r2, #2
 8003ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f8d2 	bl	80041b8 <HAL_TIM_IC_CaptureCallback>
 8004014:	e005      	b.n	8004022 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f8c4 	bl	80041a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f8d5 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d020      	beq.n	8004074 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01b      	beq.n	8004074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0204 	mvn.w	r2, #4
 8004044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2202      	movs	r2, #2
 800404a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f8ac 	bl	80041b8 <HAL_TIM_IC_CaptureCallback>
 8004060:	e005      	b.n	800406e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f89e 	bl	80041a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f8af 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d020      	beq.n	80040c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01b      	beq.n	80040c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0208 	mvn.w	r2, #8
 8004090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2204      	movs	r2, #4
 8004096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f886 	bl	80041b8 <HAL_TIM_IC_CaptureCallback>
 80040ac:	e005      	b.n	80040ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f878 	bl	80041a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f889 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d020      	beq.n	800410c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01b      	beq.n	800410c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0210 	mvn.w	r2, #16
 80040dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2208      	movs	r2, #8
 80040e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f860 	bl	80041b8 <HAL_TIM_IC_CaptureCallback>
 80040f8:	e005      	b.n	8004106 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f852 	bl	80041a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f863 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00c      	beq.n	8004130 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d007      	beq.n	8004130 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0201 	mvn.w	r2, #1
 8004128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fc fc38 	bl	80009a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00c      	beq.n	8004154 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800414c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f8e6 	bl	8004320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00c      	beq.n	8004178 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d007      	beq.n	8004178 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f834 	bl	80041e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00c      	beq.n	800419c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0220 	mvn.w	r2, #32
 8004194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f8b8 	bl	800430c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800419c:	bf00      	nop
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a3a      	ldr	r2, [pc, #232]	@ (80042f0 <TIM_Base_SetConfig+0xfc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00f      	beq.n	800422c <TIM_Base_SetConfig+0x38>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004212:	d00b      	beq.n	800422c <TIM_Base_SetConfig+0x38>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a37      	ldr	r2, [pc, #220]	@ (80042f4 <TIM_Base_SetConfig+0x100>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_Base_SetConfig+0x38>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a36      	ldr	r2, [pc, #216]	@ (80042f8 <TIM_Base_SetConfig+0x104>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_Base_SetConfig+0x38>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a35      	ldr	r2, [pc, #212]	@ (80042fc <TIM_Base_SetConfig+0x108>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d108      	bne.n	800423e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a2b      	ldr	r2, [pc, #172]	@ (80042f0 <TIM_Base_SetConfig+0xfc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d01b      	beq.n	800427e <TIM_Base_SetConfig+0x8a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800424c:	d017      	beq.n	800427e <TIM_Base_SetConfig+0x8a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a28      	ldr	r2, [pc, #160]	@ (80042f4 <TIM_Base_SetConfig+0x100>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d013      	beq.n	800427e <TIM_Base_SetConfig+0x8a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a27      	ldr	r2, [pc, #156]	@ (80042f8 <TIM_Base_SetConfig+0x104>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00f      	beq.n	800427e <TIM_Base_SetConfig+0x8a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a26      	ldr	r2, [pc, #152]	@ (80042fc <TIM_Base_SetConfig+0x108>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00b      	beq.n	800427e <TIM_Base_SetConfig+0x8a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a25      	ldr	r2, [pc, #148]	@ (8004300 <TIM_Base_SetConfig+0x10c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d007      	beq.n	800427e <TIM_Base_SetConfig+0x8a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a24      	ldr	r2, [pc, #144]	@ (8004304 <TIM_Base_SetConfig+0x110>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d003      	beq.n	800427e <TIM_Base_SetConfig+0x8a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a23      	ldr	r2, [pc, #140]	@ (8004308 <TIM_Base_SetConfig+0x114>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d108      	bne.n	8004290 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a0e      	ldr	r2, [pc, #56]	@ (80042f0 <TIM_Base_SetConfig+0xfc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d103      	bne.n	80042c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d105      	bne.n	80042e2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f023 0201 	bic.w	r2, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	611a      	str	r2, [r3, #16]
  }
}
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40010000 	.word	0x40010000
 80042f4:	40000400 	.word	0x40000400
 80042f8:	40000800 	.word	0x40000800
 80042fc:	40000c00 	.word	0x40000c00
 8004300:	40014000 	.word	0x40014000
 8004304:	40014400 	.word	0x40014400
 8004308:	40014800 	.word	0x40014800

0800430c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e042      	b.n	80043cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fc fbac 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2224      	movs	r2, #36	@ 0x24
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f82b 	bl	80043d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800438c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800439c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d8:	b0c0      	sub	sp, #256	@ 0x100
 80043da:	af00      	add	r7, sp, #0
 80043dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f0:	68d9      	ldr	r1, [r3, #12]
 80043f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	ea40 0301 	orr.w	r3, r0, r1
 80043fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	431a      	orrs	r2, r3
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	431a      	orrs	r2, r3
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800442c:	f021 010c 	bic.w	r1, r1, #12
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800443a:	430b      	orrs	r3, r1
 800443c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800444a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444e:	6999      	ldr	r1, [r3, #24]
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	ea40 0301 	orr.w	r3, r0, r1
 800445a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b8f      	ldr	r3, [pc, #572]	@ (80046a0 <UART_SetConfig+0x2cc>)
 8004464:	429a      	cmp	r2, r3
 8004466:	d005      	beq.n	8004474 <UART_SetConfig+0xa0>
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b8d      	ldr	r3, [pc, #564]	@ (80046a4 <UART_SetConfig+0x2d0>)
 8004470:	429a      	cmp	r2, r3
 8004472:	d104      	bne.n	800447e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004474:	f7ff fca4 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 8004478:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800447c:	e003      	b.n	8004486 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800447e:	f7ff fc8b 	bl	8003d98 <HAL_RCC_GetPCLK1Freq>
 8004482:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004490:	f040 810c 	bne.w	80046ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004498:	2200      	movs	r2, #0
 800449a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800449e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044a6:	4622      	mov	r2, r4
 80044a8:	462b      	mov	r3, r5
 80044aa:	1891      	adds	r1, r2, r2
 80044ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044ae:	415b      	adcs	r3, r3
 80044b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044b6:	4621      	mov	r1, r4
 80044b8:	eb12 0801 	adds.w	r8, r2, r1
 80044bc:	4629      	mov	r1, r5
 80044be:	eb43 0901 	adc.w	r9, r3, r1
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044d6:	4690      	mov	r8, r2
 80044d8:	4699      	mov	r9, r3
 80044da:	4623      	mov	r3, r4
 80044dc:	eb18 0303 	adds.w	r3, r8, r3
 80044e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044e4:	462b      	mov	r3, r5
 80044e6:	eb49 0303 	adc.w	r3, r9, r3
 80044ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004502:	460b      	mov	r3, r1
 8004504:	18db      	adds	r3, r3, r3
 8004506:	653b      	str	r3, [r7, #80]	@ 0x50
 8004508:	4613      	mov	r3, r2
 800450a:	eb42 0303 	adc.w	r3, r2, r3
 800450e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004510:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004514:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004518:	f7fb feb2 	bl	8000280 <__aeabi_uldivmod>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4b61      	ldr	r3, [pc, #388]	@ (80046a8 <UART_SetConfig+0x2d4>)
 8004522:	fba3 2302 	umull	r2, r3, r3, r2
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	011c      	lsls	r4, r3, #4
 800452a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800452e:	2200      	movs	r2, #0
 8004530:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004534:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004538:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800453c:	4642      	mov	r2, r8
 800453e:	464b      	mov	r3, r9
 8004540:	1891      	adds	r1, r2, r2
 8004542:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004544:	415b      	adcs	r3, r3
 8004546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004548:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800454c:	4641      	mov	r1, r8
 800454e:	eb12 0a01 	adds.w	sl, r2, r1
 8004552:	4649      	mov	r1, r9
 8004554:	eb43 0b01 	adc.w	fp, r3, r1
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004564:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800456c:	4692      	mov	sl, r2
 800456e:	469b      	mov	fp, r3
 8004570:	4643      	mov	r3, r8
 8004572:	eb1a 0303 	adds.w	r3, sl, r3
 8004576:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800457a:	464b      	mov	r3, r9
 800457c:	eb4b 0303 	adc.w	r3, fp, r3
 8004580:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004590:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004594:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004598:	460b      	mov	r3, r1
 800459a:	18db      	adds	r3, r3, r3
 800459c:	643b      	str	r3, [r7, #64]	@ 0x40
 800459e:	4613      	mov	r3, r2
 80045a0:	eb42 0303 	adc.w	r3, r2, r3
 80045a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045ae:	f7fb fe67 	bl	8000280 <__aeabi_uldivmod>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	4b3b      	ldr	r3, [pc, #236]	@ (80046a8 <UART_SetConfig+0x2d4>)
 80045ba:	fba3 2301 	umull	r2, r3, r3, r1
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	2264      	movs	r2, #100	@ 0x64
 80045c2:	fb02 f303 	mul.w	r3, r2, r3
 80045c6:	1acb      	subs	r3, r1, r3
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045ce:	4b36      	ldr	r3, [pc, #216]	@ (80046a8 <UART_SetConfig+0x2d4>)
 80045d0:	fba3 2302 	umull	r2, r3, r3, r2
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045dc:	441c      	add	r4, r3
 80045de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045f0:	4642      	mov	r2, r8
 80045f2:	464b      	mov	r3, r9
 80045f4:	1891      	adds	r1, r2, r2
 80045f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045f8:	415b      	adcs	r3, r3
 80045fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004600:	4641      	mov	r1, r8
 8004602:	1851      	adds	r1, r2, r1
 8004604:	6339      	str	r1, [r7, #48]	@ 0x30
 8004606:	4649      	mov	r1, r9
 8004608:	414b      	adcs	r3, r1
 800460a:	637b      	str	r3, [r7, #52]	@ 0x34
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004618:	4659      	mov	r1, fp
 800461a:	00cb      	lsls	r3, r1, #3
 800461c:	4651      	mov	r1, sl
 800461e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004622:	4651      	mov	r1, sl
 8004624:	00ca      	lsls	r2, r1, #3
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	4603      	mov	r3, r0
 800462c:	4642      	mov	r2, r8
 800462e:	189b      	adds	r3, r3, r2
 8004630:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004634:	464b      	mov	r3, r9
 8004636:	460a      	mov	r2, r1
 8004638:	eb42 0303 	adc.w	r3, r2, r3
 800463c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800464c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004654:	460b      	mov	r3, r1
 8004656:	18db      	adds	r3, r3, r3
 8004658:	62bb      	str	r3, [r7, #40]	@ 0x28
 800465a:	4613      	mov	r3, r2
 800465c:	eb42 0303 	adc.w	r3, r2, r3
 8004660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004666:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800466a:	f7fb fe09 	bl	8000280 <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4b0d      	ldr	r3, [pc, #52]	@ (80046a8 <UART_SetConfig+0x2d4>)
 8004674:	fba3 1302 	umull	r1, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2164      	movs	r1, #100	@ 0x64
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	3332      	adds	r3, #50	@ 0x32
 8004686:	4a08      	ldr	r2, [pc, #32]	@ (80046a8 <UART_SetConfig+0x2d4>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	f003 0207 	and.w	r2, r3, #7
 8004692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4422      	add	r2, r4
 800469a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800469c:	e106      	b.n	80048ac <UART_SetConfig+0x4d8>
 800469e:	bf00      	nop
 80046a0:	40011000 	.word	0x40011000
 80046a4:	40011400 	.word	0x40011400
 80046a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046be:	4642      	mov	r2, r8
 80046c0:	464b      	mov	r3, r9
 80046c2:	1891      	adds	r1, r2, r2
 80046c4:	6239      	str	r1, [r7, #32]
 80046c6:	415b      	adcs	r3, r3
 80046c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046ce:	4641      	mov	r1, r8
 80046d0:	1854      	adds	r4, r2, r1
 80046d2:	4649      	mov	r1, r9
 80046d4:	eb43 0501 	adc.w	r5, r3, r1
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	00eb      	lsls	r3, r5, #3
 80046e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046e6:	00e2      	lsls	r2, r4, #3
 80046e8:	4614      	mov	r4, r2
 80046ea:	461d      	mov	r5, r3
 80046ec:	4643      	mov	r3, r8
 80046ee:	18e3      	adds	r3, r4, r3
 80046f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046f4:	464b      	mov	r3, r9
 80046f6:	eb45 0303 	adc.w	r3, r5, r3
 80046fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800470a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800471a:	4629      	mov	r1, r5
 800471c:	008b      	lsls	r3, r1, #2
 800471e:	4621      	mov	r1, r4
 8004720:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004724:	4621      	mov	r1, r4
 8004726:	008a      	lsls	r2, r1, #2
 8004728:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800472c:	f7fb fda8 	bl	8000280 <__aeabi_uldivmod>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4b60      	ldr	r3, [pc, #384]	@ (80048b8 <UART_SetConfig+0x4e4>)
 8004736:	fba3 2302 	umull	r2, r3, r3, r2
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	011c      	lsls	r4, r3, #4
 800473e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004742:	2200      	movs	r2, #0
 8004744:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004748:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800474c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004750:	4642      	mov	r2, r8
 8004752:	464b      	mov	r3, r9
 8004754:	1891      	adds	r1, r2, r2
 8004756:	61b9      	str	r1, [r7, #24]
 8004758:	415b      	adcs	r3, r3
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004760:	4641      	mov	r1, r8
 8004762:	1851      	adds	r1, r2, r1
 8004764:	6139      	str	r1, [r7, #16]
 8004766:	4649      	mov	r1, r9
 8004768:	414b      	adcs	r3, r1
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004778:	4659      	mov	r1, fp
 800477a:	00cb      	lsls	r3, r1, #3
 800477c:	4651      	mov	r1, sl
 800477e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004782:	4651      	mov	r1, sl
 8004784:	00ca      	lsls	r2, r1, #3
 8004786:	4610      	mov	r0, r2
 8004788:	4619      	mov	r1, r3
 800478a:	4603      	mov	r3, r0
 800478c:	4642      	mov	r2, r8
 800478e:	189b      	adds	r3, r3, r2
 8004790:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004794:	464b      	mov	r3, r9
 8004796:	460a      	mov	r2, r1
 8004798:	eb42 0303 	adc.w	r3, r2, r3
 800479c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047b8:	4649      	mov	r1, r9
 80047ba:	008b      	lsls	r3, r1, #2
 80047bc:	4641      	mov	r1, r8
 80047be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047c2:	4641      	mov	r1, r8
 80047c4:	008a      	lsls	r2, r1, #2
 80047c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047ca:	f7fb fd59 	bl	8000280 <__aeabi_uldivmod>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4611      	mov	r1, r2
 80047d4:	4b38      	ldr	r3, [pc, #224]	@ (80048b8 <UART_SetConfig+0x4e4>)
 80047d6:	fba3 2301 	umull	r2, r3, r3, r1
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	2264      	movs	r2, #100	@ 0x64
 80047de:	fb02 f303 	mul.w	r3, r2, r3
 80047e2:	1acb      	subs	r3, r1, r3
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	3332      	adds	r3, #50	@ 0x32
 80047e8:	4a33      	ldr	r2, [pc, #204]	@ (80048b8 <UART_SetConfig+0x4e4>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047f4:	441c      	add	r4, r3
 80047f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047fa:	2200      	movs	r2, #0
 80047fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80047fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004800:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004804:	4642      	mov	r2, r8
 8004806:	464b      	mov	r3, r9
 8004808:	1891      	adds	r1, r2, r2
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	415b      	adcs	r3, r3
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004814:	4641      	mov	r1, r8
 8004816:	1851      	adds	r1, r2, r1
 8004818:	6039      	str	r1, [r7, #0]
 800481a:	4649      	mov	r1, r9
 800481c:	414b      	adcs	r3, r1
 800481e:	607b      	str	r3, [r7, #4]
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800482c:	4659      	mov	r1, fp
 800482e:	00cb      	lsls	r3, r1, #3
 8004830:	4651      	mov	r1, sl
 8004832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004836:	4651      	mov	r1, sl
 8004838:	00ca      	lsls	r2, r1, #3
 800483a:	4610      	mov	r0, r2
 800483c:	4619      	mov	r1, r3
 800483e:	4603      	mov	r3, r0
 8004840:	4642      	mov	r2, r8
 8004842:	189b      	adds	r3, r3, r2
 8004844:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004846:	464b      	mov	r3, r9
 8004848:	460a      	mov	r2, r1
 800484a:	eb42 0303 	adc.w	r3, r2, r3
 800484e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	663b      	str	r3, [r7, #96]	@ 0x60
 800485a:	667a      	str	r2, [r7, #100]	@ 0x64
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004868:	4649      	mov	r1, r9
 800486a:	008b      	lsls	r3, r1, #2
 800486c:	4641      	mov	r1, r8
 800486e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004872:	4641      	mov	r1, r8
 8004874:	008a      	lsls	r2, r1, #2
 8004876:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800487a:	f7fb fd01 	bl	8000280 <__aeabi_uldivmod>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4b0d      	ldr	r3, [pc, #52]	@ (80048b8 <UART_SetConfig+0x4e4>)
 8004884:	fba3 1302 	umull	r1, r3, r3, r2
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	2164      	movs	r1, #100	@ 0x64
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	3332      	adds	r3, #50	@ 0x32
 8004896:	4a08      	ldr	r2, [pc, #32]	@ (80048b8 <UART_SetConfig+0x4e4>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	f003 020f 	and.w	r2, r3, #15
 80048a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4422      	add	r2, r4
 80048aa:	609a      	str	r2, [r3, #8]
}
 80048ac:	bf00      	nop
 80048ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048b2:	46bd      	mov	sp, r7
 80048b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048b8:	51eb851f 	.word	0x51eb851f

080048bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048bc:	b084      	sub	sp, #16
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	f107 001c 	add.w	r0, r7, #28
 80048ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d123      	bne.n	800491e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80048ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004902:	2b01      	cmp	r3, #1
 8004904:	d105      	bne.n	8004912 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f001 fae8 	bl	8005ee8 <USB_CoreReset>
 8004918:	4603      	mov	r3, r0
 800491a:	73fb      	strb	r3, [r7, #15]
 800491c:	e01b      	b.n	8004956 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f001 fadc 	bl	8005ee8 <USB_CoreReset>
 8004930:	4603      	mov	r3, r0
 8004932:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004934:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004938:	2b00      	cmp	r3, #0
 800493a:	d106      	bne.n	800494a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004940:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	639a      	str	r2, [r3, #56]	@ 0x38
 8004948:	e005      	b.n	8004956 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004956:	7fbb      	ldrb	r3, [r7, #30]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d10b      	bne.n	8004974 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f043 0206 	orr.w	r2, r3, #6
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004980:	b004      	add	sp, #16
 8004982:	4770      	bx	lr

08004984 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	2b02      	cmp	r3, #2
 8004996:	d165      	bne.n	8004a64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4a41      	ldr	r2, [pc, #260]	@ (8004aa0 <USB_SetTurnaroundTime+0x11c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d906      	bls.n	80049ae <USB_SetTurnaroundTime+0x2a>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4a40      	ldr	r2, [pc, #256]	@ (8004aa4 <USB_SetTurnaroundTime+0x120>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d202      	bcs.n	80049ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80049a8:	230f      	movs	r3, #15
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	e062      	b.n	8004a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	4a3c      	ldr	r2, [pc, #240]	@ (8004aa4 <USB_SetTurnaroundTime+0x120>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d306      	bcc.n	80049c4 <USB_SetTurnaroundTime+0x40>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	4a3b      	ldr	r2, [pc, #236]	@ (8004aa8 <USB_SetTurnaroundTime+0x124>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d202      	bcs.n	80049c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80049be:	230e      	movs	r3, #14
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	e057      	b.n	8004a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4a38      	ldr	r2, [pc, #224]	@ (8004aa8 <USB_SetTurnaroundTime+0x124>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d306      	bcc.n	80049da <USB_SetTurnaroundTime+0x56>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4a37      	ldr	r2, [pc, #220]	@ (8004aac <USB_SetTurnaroundTime+0x128>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d202      	bcs.n	80049da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80049d4:	230d      	movs	r3, #13
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	e04c      	b.n	8004a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4a33      	ldr	r2, [pc, #204]	@ (8004aac <USB_SetTurnaroundTime+0x128>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d306      	bcc.n	80049f0 <USB_SetTurnaroundTime+0x6c>
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4a32      	ldr	r2, [pc, #200]	@ (8004ab0 <USB_SetTurnaroundTime+0x12c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d802      	bhi.n	80049f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80049ea:	230c      	movs	r3, #12
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	e041      	b.n	8004a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ab0 <USB_SetTurnaroundTime+0x12c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d906      	bls.n	8004a06 <USB_SetTurnaroundTime+0x82>
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4a2e      	ldr	r2, [pc, #184]	@ (8004ab4 <USB_SetTurnaroundTime+0x130>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d802      	bhi.n	8004a06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a00:	230b      	movs	r3, #11
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	e036      	b.n	8004a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4a2a      	ldr	r2, [pc, #168]	@ (8004ab4 <USB_SetTurnaroundTime+0x130>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d906      	bls.n	8004a1c <USB_SetTurnaroundTime+0x98>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4a29      	ldr	r2, [pc, #164]	@ (8004ab8 <USB_SetTurnaroundTime+0x134>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d802      	bhi.n	8004a1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a16:	230a      	movs	r3, #10
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	e02b      	b.n	8004a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4a26      	ldr	r2, [pc, #152]	@ (8004ab8 <USB_SetTurnaroundTime+0x134>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d906      	bls.n	8004a32 <USB_SetTurnaroundTime+0xae>
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4a25      	ldr	r2, [pc, #148]	@ (8004abc <USB_SetTurnaroundTime+0x138>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d202      	bcs.n	8004a32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a2c:	2309      	movs	r3, #9
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	e020      	b.n	8004a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	4a21      	ldr	r2, [pc, #132]	@ (8004abc <USB_SetTurnaroundTime+0x138>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d306      	bcc.n	8004a48 <USB_SetTurnaroundTime+0xc4>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4a20      	ldr	r2, [pc, #128]	@ (8004ac0 <USB_SetTurnaroundTime+0x13c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d802      	bhi.n	8004a48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a42:	2308      	movs	r3, #8
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	e015      	b.n	8004a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac0 <USB_SetTurnaroundTime+0x13c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d906      	bls.n	8004a5e <USB_SetTurnaroundTime+0xda>
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac4 <USB_SetTurnaroundTime+0x140>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d202      	bcs.n	8004a5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004a58:	2307      	movs	r3, #7
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	e00a      	b.n	8004a74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004a5e:	2306      	movs	r3, #6
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	e007      	b.n	8004a74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d102      	bne.n	8004a70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004a6a:	2309      	movs	r3, #9
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	e001      	b.n	8004a74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004a70:	2309      	movs	r3, #9
 8004a72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	029b      	lsls	r3, r3, #10
 8004a88:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	371c      	adds	r7, #28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	00d8acbf 	.word	0x00d8acbf
 8004aa4:	00e4e1c0 	.word	0x00e4e1c0
 8004aa8:	00f42400 	.word	0x00f42400
 8004aac:	01067380 	.word	0x01067380
 8004ab0:	011a499f 	.word	0x011a499f
 8004ab4:	01312cff 	.word	0x01312cff
 8004ab8:	014ca43f 	.word	0x014ca43f
 8004abc:	016e3600 	.word	0x016e3600
 8004ac0:	01a6ab1f 	.word	0x01a6ab1f
 8004ac4:	01e84800 	.word	0x01e84800

08004ac8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f043 0201 	orr.w	r2, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f023 0201 	bic.w	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d115      	bne.n	8004b5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004b3a:	200a      	movs	r0, #10
 8004b3c:	f7fc fb10 	bl	8001160 <HAL_Delay>
      ms += 10U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	330a      	adds	r3, #10
 8004b44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f001 f93f 	bl	8005dca <USB_GetMode>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d01e      	beq.n	8004b90 <USB_SetCurrentMode+0x84>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b56:	d9f0      	bls.n	8004b3a <USB_SetCurrentMode+0x2e>
 8004b58:	e01a      	b.n	8004b90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d115      	bne.n	8004b8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004b6c:	200a      	movs	r0, #10
 8004b6e:	f7fc faf7 	bl	8001160 <HAL_Delay>
      ms += 10U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	330a      	adds	r3, #10
 8004b76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f001 f926 	bl	8005dca <USB_GetMode>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <USB_SetCurrentMode+0x84>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b88:	d9f0      	bls.n	8004b6c <USB_SetCurrentMode+0x60>
 8004b8a:	e001      	b.n	8004b90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e005      	b.n	8004b9c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2bc8      	cmp	r3, #200	@ 0xc8
 8004b94:	d101      	bne.n	8004b9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b086      	sub	sp, #24
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	e009      	b.n	8004bd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	3340      	adds	r3, #64	@ 0x40
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	2200      	movs	r2, #0
 8004bd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	2b0e      	cmp	r3, #14
 8004bdc:	d9f2      	bls.n	8004bc4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004bde:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d11c      	bne.n	8004c20 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c16:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004c1e:	e00b      	b.n	8004c38 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c24:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c30:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004c3e:	461a      	mov	r2, r3
 8004c40:	2300      	movs	r3, #0
 8004c42:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c44:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d10d      	bne.n	8004c68 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d104      	bne.n	8004c5e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c54:	2100      	movs	r1, #0
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f968 	bl	8004f2c <USB_SetDevSpeed>
 8004c5c:	e008      	b.n	8004c70 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c5e:	2101      	movs	r1, #1
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f963 	bl	8004f2c <USB_SetDevSpeed>
 8004c66:	e003      	b.n	8004c70 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c68:	2103      	movs	r1, #3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f95e 	bl	8004f2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c70:	2110      	movs	r1, #16
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f8fa 	bl	8004e6c <USB_FlushTxFifo>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f924 	bl	8004ed0 <USB_FlushRxFifo>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c98:	461a      	mov	r2, r3
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	e043      	b.n	8004d44 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cd2:	d118      	bne.n	8004d06 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e013      	b.n	8004d18 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	e008      	b.n	8004d18 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d12:	461a      	mov	r2, r3
 8004d14:	2300      	movs	r3, #0
 8004d16:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d24:	461a      	mov	r2, r3
 8004d26:	2300      	movs	r3, #0
 8004d28:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d36:	461a      	mov	r2, r3
 8004d38:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	3301      	adds	r3, #1
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004d48:	461a      	mov	r2, r3
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d3b5      	bcc.n	8004cbc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d50:	2300      	movs	r3, #0
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	e043      	b.n	8004dde <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d6c:	d118      	bne.n	8004da0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d80:	461a      	mov	r2, r3
 8004d82:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	e013      	b.n	8004db2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d96:	461a      	mov	r2, r3
 8004d98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	e008      	b.n	8004db2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dac:	461a      	mov	r2, r3
 8004dae:	2300      	movs	r3, #0
 8004db0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004dd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004de2:	461a      	mov	r2, r3
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d3b5      	bcc.n	8004d56 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dfc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004e0a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d105      	bne.n	8004e20 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	f043 0210 	orr.w	r2, r3, #16
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699a      	ldr	r2, [r3, #24]
 8004e24:	4b10      	ldr	r3, [pc, #64]	@ (8004e68 <USB_DevInit+0x2c4>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	f043 0208 	orr.w	r2, r3, #8
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d107      	bne.n	8004e58 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e50:	f043 0304 	orr.w	r3, r3, #4
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e64:	b004      	add	sp, #16
 8004e66:	4770      	bx	lr
 8004e68:	803c3800 	.word	0x803c3800

08004e6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e86:	d901      	bls.n	8004e8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e01b      	b.n	8004ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	daf2      	bge.n	8004e7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	019b      	lsls	r3, r3, #6
 8004e9c:	f043 0220 	orr.w	r2, r3, #32
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004eb0:	d901      	bls.n	8004eb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e006      	b.n	8004ec4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	d0f0      	beq.n	8004ea4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ee8:	d901      	bls.n	8004eee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e018      	b.n	8004f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	daf2      	bge.n	8004edc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2210      	movs	r2, #16
 8004efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3301      	adds	r3, #1
 8004f04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f0c:	d901      	bls.n	8004f12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e006      	b.n	8004f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b10      	cmp	r3, #16
 8004f1c:	d0f0      	beq.n	8004f00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	78fb      	ldrb	r3, [r7, #3]
 8004f46:	68f9      	ldr	r1, [r7, #12]
 8004f48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b087      	sub	sp, #28
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 0306 	and.w	r3, r3, #6
 8004f76:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d102      	bne.n	8004f84 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	75fb      	strb	r3, [r7, #23]
 8004f82:	e00a      	b.n	8004f9a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d002      	beq.n	8004f90 <USB_GetDevSpeed+0x32>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b06      	cmp	r3, #6
 8004f8e:	d102      	bne.n	8004f96 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004f90:	2302      	movs	r3, #2
 8004f92:	75fb      	strb	r3, [r7, #23]
 8004f94:	e001      	b.n	8004f9a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004f96:	230f      	movs	r3, #15
 8004f98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	785b      	ldrb	r3, [r3, #1]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d13a      	bne.n	800503a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	f003 030f 	and.w	r3, r3, #15
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	68f9      	ldr	r1, [r7, #12]
 8004fde:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d155      	bne.n	80050a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	791b      	ldrb	r3, [r3, #4]
 8005016:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005018:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	059b      	lsls	r3, r3, #22
 800501e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005020:	4313      	orrs	r3, r2
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	0151      	lsls	r1, r2, #5
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	440a      	add	r2, r1
 800502a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800502e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	e036      	b.n	80050a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005040:	69da      	ldr	r2, [r3, #28]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	2101      	movs	r1, #1
 800504c:	fa01 f303 	lsl.w	r3, r1, r3
 8005050:	041b      	lsls	r3, r3, #16
 8005052:	68f9      	ldr	r1, [r7, #12]
 8005054:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005058:	4313      	orrs	r3, r2
 800505a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d11a      	bne.n	80050a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	791b      	ldrb	r3, [r3, #4]
 800508c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800508e:	430b      	orrs	r3, r1
 8005090:	4313      	orrs	r3, r2
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	0151      	lsls	r1, r2, #5
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	440a      	add	r2, r1
 800509a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800509e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	785b      	ldrb	r3, [r3, #1]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d161      	bne.n	8005198 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050ea:	d11f      	bne.n	800512c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	0151      	lsls	r1, r2, #5
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	440a      	add	r2, r1
 8005102:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005106:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800510a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	0151      	lsls	r1, r2, #5
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	440a      	add	r2, r1
 8005122:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005126:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800512a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005132:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	2101      	movs	r1, #1
 800513e:	fa01 f303 	lsl.w	r3, r1, r3
 8005142:	b29b      	uxth	r3, r3
 8005144:	43db      	mvns	r3, r3
 8005146:	68f9      	ldr	r1, [r7, #12]
 8005148:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800514c:	4013      	ands	r3, r2
 800514e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	f003 030f 	and.w	r3, r3, #15
 8005160:	2101      	movs	r1, #1
 8005162:	fa01 f303 	lsl.w	r3, r1, r3
 8005166:	b29b      	uxth	r3, r3
 8005168:	43db      	mvns	r3, r3
 800516a:	68f9      	ldr	r1, [r7, #12]
 800516c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005170:	4013      	ands	r3, r2
 8005172:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	0159      	lsls	r1, r3, #5
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	440b      	add	r3, r1
 800518a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800518e:	4619      	mov	r1, r3
 8005190:	4b35      	ldr	r3, [pc, #212]	@ (8005268 <USB_DeactivateEndpoint+0x1b0>)
 8005192:	4013      	ands	r3, r2
 8005194:	600b      	str	r3, [r1, #0]
 8005196:	e060      	b.n	800525a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051ae:	d11f      	bne.n	80051f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	0151      	lsls	r1, r2, #5
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	440a      	add	r2, r1
 80051c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	0151      	lsls	r1, r2, #5
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	440a      	add	r2, r1
 80051e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	2101      	movs	r1, #1
 8005202:	fa01 f303 	lsl.w	r3, r1, r3
 8005206:	041b      	lsls	r3, r3, #16
 8005208:	43db      	mvns	r3, r3
 800520a:	68f9      	ldr	r1, [r7, #12]
 800520c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005210:	4013      	ands	r3, r2
 8005212:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800521a:	69da      	ldr	r2, [r3, #28]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	f003 030f 	and.w	r3, r3, #15
 8005224:	2101      	movs	r1, #1
 8005226:	fa01 f303 	lsl.w	r3, r1, r3
 800522a:	041b      	lsls	r3, r3, #16
 800522c:	43db      	mvns	r3, r3
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005234:	4013      	ands	r3, r2
 8005236:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	0159      	lsls	r1, r3, #5
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	440b      	add	r3, r1
 800524e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005252:	4619      	mov	r1, r3
 8005254:	4b05      	ldr	r3, [pc, #20]	@ (800526c <USB_DeactivateEndpoint+0x1b4>)
 8005256:	4013      	ands	r3, r2
 8005258:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	ec337800 	.word	0xec337800
 800526c:	eff37800 	.word	0xeff37800

08005270 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08a      	sub	sp, #40	@ 0x28
 8005274:	af02      	add	r7, sp, #8
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	4613      	mov	r3, r2
 800527c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	785b      	ldrb	r3, [r3, #1]
 800528c:	2b01      	cmp	r3, #1
 800528e:	f040 817f 	bne.w	8005590 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d132      	bne.n	8005300 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	0151      	lsls	r1, r2, #5
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	440a      	add	r2, r1
 80052b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052b4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80052b8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80052bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052f8:	0cdb      	lsrs	r3, r3, #19
 80052fa:	04db      	lsls	r3, r3, #19
 80052fc:	6113      	str	r3, [r2, #16]
 80052fe:	e097      	b.n	8005430 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800531a:	0cdb      	lsrs	r3, r3, #19
 800531c:	04db      	lsls	r3, r3, #19
 800531e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	0151      	lsls	r1, r2, #5
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	440a      	add	r2, r1
 8005336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800533a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800533e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005342:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d11a      	bne.n	8005380 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	691a      	ldr	r2, [r3, #16]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	429a      	cmp	r2, r3
 8005354:	d903      	bls.n	800535e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	0151      	lsls	r1, r2, #5
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	440a      	add	r2, r1
 8005374:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005378:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800537c:	6113      	str	r3, [r2, #16]
 800537e:	e044      	b.n	800540a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	691a      	ldr	r2, [r3, #16]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	4413      	add	r3, r2
 800538a:	1e5a      	subs	r2, r3, #1
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	fbb2 f3f3 	udiv	r3, r2, r3
 8005394:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	8afb      	ldrh	r3, [r7, #22]
 80053a6:	04d9      	lsls	r1, r3, #19
 80053a8:	4ba4      	ldr	r3, [pc, #656]	@ (800563c <USB_EPStartXfer+0x3cc>)
 80053aa:	400b      	ands	r3, r1
 80053ac:	69b9      	ldr	r1, [r7, #24]
 80053ae:	0148      	lsls	r0, r1, #5
 80053b0:	69f9      	ldr	r1, [r7, #28]
 80053b2:	4401      	add	r1, r0
 80053b4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80053b8:	4313      	orrs	r3, r2
 80053ba:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	791b      	ldrb	r3, [r3, #4]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d122      	bne.n	800540a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	0151      	lsls	r1, r2, #5
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	440a      	add	r2, r1
 80053da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053de:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80053e2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	8afb      	ldrh	r3, [r7, #22]
 80053f4:	075b      	lsls	r3, r3, #29
 80053f6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80053fa:	69b9      	ldr	r1, [r7, #24]
 80053fc:	0148      	lsls	r0, r1, #5
 80053fe:	69f9      	ldr	r1, [r7, #28]
 8005400:	4401      	add	r1, r0
 8005402:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005406:	4313      	orrs	r3, r2
 8005408:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005420:	69b9      	ldr	r1, [r7, #24]
 8005422:	0148      	lsls	r0, r1, #5
 8005424:	69f9      	ldr	r1, [r7, #28]
 8005426:	4401      	add	r1, r0
 8005428:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800542c:	4313      	orrs	r3, r2
 800542e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d14b      	bne.n	80054ce <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800544a:	461a      	mov	r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	791b      	ldrb	r3, [r3, #4]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d128      	bne.n	80054ac <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005466:	2b00      	cmp	r3, #0
 8005468:	d110      	bne.n	800548c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	440a      	add	r2, r1
 8005480:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005484:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	e00f      	b.n	80054ac <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	69fa      	ldr	r2, [r7, #28]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054aa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	0151      	lsls	r1, r2, #5
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	440a      	add	r2, r1
 80054c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054c6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	e166      	b.n	800579c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	0151      	lsls	r1, r2, #5
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	440a      	add	r2, r1
 80054e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054e8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80054ec:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	791b      	ldrb	r3, [r3, #4]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d015      	beq.n	8005522 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 814e 	beq.w	800579c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005506:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	2101      	movs	r1, #1
 8005512:	fa01 f303 	lsl.w	r3, r1, r3
 8005516:	69f9      	ldr	r1, [r7, #28]
 8005518:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800551c:	4313      	orrs	r3, r2
 800551e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005520:	e13c      	b.n	800579c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552e:	2b00      	cmp	r3, #0
 8005530:	d110      	bne.n	8005554 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	0151      	lsls	r1, r2, #5
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	440a      	add	r2, r1
 8005548:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800554c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	e00f      	b.n	8005574 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	440a      	add	r2, r1
 800556a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800556e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005572:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	68d9      	ldr	r1, [r3, #12]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	781a      	ldrb	r2, [r3, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	b298      	uxth	r0, r3
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	4603      	mov	r3, r0
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 f9b9 	bl	8005900 <USB_WritePacket>
 800558e:	e105      	b.n	800579c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	0151      	lsls	r1, r2, #5
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	440a      	add	r2, r1
 80055a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055aa:	0cdb      	lsrs	r3, r3, #19
 80055ac:	04db      	lsls	r3, r3, #19
 80055ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055ca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80055ce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80055d2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d132      	bne.n	8005640 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005608:	69b9      	ldr	r1, [r7, #24]
 800560a:	0148      	lsls	r0, r1, #5
 800560c:	69f9      	ldr	r1, [r7, #28]
 800560e:	4401      	add	r1, r0
 8005610:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005614:	4313      	orrs	r3, r2
 8005616:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	440a      	add	r2, r1
 800562e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005632:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005636:	6113      	str	r3, [r2, #16]
 8005638:	e062      	b.n	8005700 <USB_EPStartXfer+0x490>
 800563a:	bf00      	nop
 800563c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d123      	bne.n	8005690 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005654:	691a      	ldr	r2, [r3, #16]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800565e:	69b9      	ldr	r1, [r7, #24]
 8005660:	0148      	lsls	r0, r1, #5
 8005662:	69f9      	ldr	r1, [r7, #28]
 8005664:	4401      	add	r1, r0
 8005666:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800566a:	4313      	orrs	r3, r2
 800566c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	440a      	add	r2, r1
 8005684:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005688:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800568c:	6113      	str	r3, [r2, #16]
 800568e:	e037      	b.n	8005700 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	4413      	add	r3, r2
 800569a:	1e5a      	subs	r2, r3, #1
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	8afa      	ldrh	r2, [r7, #22]
 80056ac:	fb03 f202 	mul.w	r2, r3, r2
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	8afb      	ldrh	r3, [r7, #22]
 80056c4:	04d9      	lsls	r1, r3, #19
 80056c6:	4b38      	ldr	r3, [pc, #224]	@ (80057a8 <USB_EPStartXfer+0x538>)
 80056c8:	400b      	ands	r3, r1
 80056ca:	69b9      	ldr	r1, [r7, #24]
 80056cc:	0148      	lsls	r0, r1, #5
 80056ce:	69f9      	ldr	r1, [r7, #28]
 80056d0:	4401      	add	r1, r0
 80056d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80056d6:	4313      	orrs	r3, r2
 80056d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e6:	691a      	ldr	r2, [r3, #16]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056f0:	69b9      	ldr	r1, [r7, #24]
 80056f2:	0148      	lsls	r0, r1, #5
 80056f4:	69f9      	ldr	r1, [r7, #28]
 80056f6:	4401      	add	r1, r0
 80056f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80056fc:	4313      	orrs	r3, r2
 80056fe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005700:	79fb      	ldrb	r3, [r7, #7]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d10d      	bne.n	8005722 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d009      	beq.n	8005722 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	68d9      	ldr	r1, [r3, #12]
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800571e:	460a      	mov	r2, r1
 8005720:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	791b      	ldrb	r3, [r3, #4]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d128      	bne.n	800577c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005736:	2b00      	cmp	r3, #0
 8005738:	d110      	bne.n	800575c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	0151      	lsls	r1, r2, #5
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	440a      	add	r2, r1
 8005750:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005754:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	e00f      	b.n	800577c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	0151      	lsls	r1, r2, #5
 800576e:	69fa      	ldr	r2, [r7, #28]
 8005770:	440a      	add	r2, r1
 8005772:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800577a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	0151      	lsls	r1, r2, #5
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	440a      	add	r2, r1
 8005792:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005796:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800579a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3720      	adds	r7, #32
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	1ff80000 	.word	0x1ff80000

080057ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	785b      	ldrb	r3, [r3, #1]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d14a      	bne.n	8005860 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057e2:	f040 8086 	bne.w	80058f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	7812      	ldrb	r2, [r2, #0]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005804:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005808:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	7812      	ldrb	r2, [r2, #0]
 800581e:	0151      	lsls	r1, r2, #5
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	440a      	add	r2, r1
 8005824:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005828:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800582c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3301      	adds	r3, #1
 8005832:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f242 7210 	movw	r2, #10000	@ 0x2710
 800583a:	4293      	cmp	r3, r2
 800583c:	d902      	bls.n	8005844 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	75fb      	strb	r3, [r7, #23]
          break;
 8005842:	e056      	b.n	80058f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005858:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800585c:	d0e7      	beq.n	800582e <USB_EPStopXfer+0x82>
 800585e:	e048      	b.n	80058f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005874:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005878:	d13b      	bne.n	80058f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	7812      	ldrb	r2, [r2, #0]
 800588e:	0151      	lsls	r1, r2, #5
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	440a      	add	r2, r1
 8005894:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005898:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800589c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	7812      	ldrb	r2, [r2, #0]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3301      	adds	r3, #1
 80058c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d902      	bls.n	80058d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	75fb      	strb	r3, [r7, #23]
          break;
 80058d6:	e00c      	b.n	80058f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058f0:	d0e7      	beq.n	80058c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005900:	b480      	push	{r7}
 8005902:	b089      	sub	sp, #36	@ 0x24
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	4611      	mov	r1, r2
 800590c:	461a      	mov	r2, r3
 800590e:	460b      	mov	r3, r1
 8005910:	71fb      	strb	r3, [r7, #7]
 8005912:	4613      	mov	r3, r2
 8005914:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800591e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005922:	2b00      	cmp	r3, #0
 8005924:	d123      	bne.n	800596e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005926:	88bb      	ldrh	r3, [r7, #4]
 8005928:	3303      	adds	r3, #3
 800592a:	089b      	lsrs	r3, r3, #2
 800592c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800592e:	2300      	movs	r3, #0
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	e018      	b.n	8005966 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	031a      	lsls	r2, r3, #12
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	4413      	add	r3, r2
 800593c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005940:	461a      	mov	r2, r3
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	3301      	adds	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	3301      	adds	r3, #1
 8005952:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	3301      	adds	r3, #1
 8005958:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	3301      	adds	r3, #1
 800595e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	3301      	adds	r3, #1
 8005964:	61bb      	str	r3, [r7, #24]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	429a      	cmp	r2, r3
 800596c:	d3e2      	bcc.n	8005934 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3724      	adds	r7, #36	@ 0x24
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800597c:	b480      	push	{r7}
 800597e:	b08b      	sub	sp, #44	@ 0x2c
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	4613      	mov	r3, r2
 8005988:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005992:	88fb      	ldrh	r3, [r7, #6]
 8005994:	089b      	lsrs	r3, r3, #2
 8005996:	b29b      	uxth	r3, r3
 8005998:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800599a:	88fb      	ldrh	r3, [r7, #6]
 800599c:	f003 0303 	and.w	r3, r3, #3
 80059a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059a2:	2300      	movs	r3, #0
 80059a4:	623b      	str	r3, [r7, #32]
 80059a6:	e014      	b.n	80059d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80059b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b6:	3301      	adds	r3, #1
 80059b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	3301      	adds	r3, #1
 80059be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c2:	3301      	adds	r3, #1
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	3301      	adds	r3, #1
 80059ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	3301      	adds	r3, #1
 80059d0:	623b      	str	r3, [r7, #32]
 80059d2:	6a3a      	ldr	r2, [r7, #32]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d3e6      	bcc.n	80059a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80059da:	8bfb      	ldrh	r3, [r7, #30]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01e      	beq.n	8005a1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ea:	461a      	mov	r2, r3
 80059ec:	f107 0310 	add.w	r3, r7, #16
 80059f0:	6812      	ldr	r2, [r2, #0]
 80059f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a04:	701a      	strb	r2, [r3, #0]
      i++;
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	3301      	adds	r3, #1
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005a12:	8bfb      	ldrh	r3, [r7, #30]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a18:	8bfb      	ldrh	r3, [r7, #30]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1ea      	bne.n	80059f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	372c      	adds	r7, #44	@ 0x2c
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	785b      	ldrb	r3, [r3, #1]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d12c      	bne.n	8005aa2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	db12      	blt.n	8005a80 <USB_EPSetStall+0x54>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00f      	beq.n	8005a80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005a7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	0151      	lsls	r1, r2, #5
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	440a      	add	r2, r1
 8005a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	e02b      	b.n	8005afa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	db12      	blt.n	8005ada <USB_EPSetStall+0xae>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00f      	beq.n	8005ada <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	0151      	lsls	r1, r2, #5
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	440a      	add	r2, r1
 8005ad0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ad4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ad8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	0151      	lsls	r1, r2, #5
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	440a      	add	r2, r1
 8005af0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005af4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005af8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	785b      	ldrb	r3, [r3, #1]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d128      	bne.n	8005b76 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	0151      	lsls	r1, r2, #5
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	440a      	add	r2, r1
 8005b3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	791b      	ldrb	r3, [r3, #4]
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d003      	beq.n	8005b54 <USB_EPClearStall+0x4c>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	791b      	ldrb	r3, [r3, #4]
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d138      	bne.n	8005bc6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	e027      	b.n	8005bc6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b90:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	791b      	ldrb	r3, [r3, #4]
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d003      	beq.n	8005ba6 <USB_EPClearStall+0x9e>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	791b      	ldrb	r3, [r3, #4]
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d10f      	bne.n	8005bc6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	0151      	lsls	r1, r2, #5
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	440a      	add	r2, r1
 8005bbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bc4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bf2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005bf6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005c08:	68f9      	ldr	r1, [r7, #12]
 8005c0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005c3a:	f023 0303 	bic.w	r3, r3, #3
 8005c3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c4e:	f023 0302 	bic.w	r3, r3, #2
 8005c52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005c7c:	f023 0303 	bic.w	r3, r3, #3
 8005c80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c90:	f043 0302 	orr.w	r3, r3, #2
 8005c94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b085      	sub	sp, #20
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	4013      	ands	r3, r2
 8005cec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	0c1b      	lsrs	r3, r3, #16
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	b29b      	uxth	r3, r3
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b085      	sub	sp, #20
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d42:	78fb      	ldrb	r3, [r7, #3]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d60:	68bb      	ldr	r3, [r7, #8]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b087      	sub	sp, #28
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	460b      	mov	r3, r1
 8005d78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d90:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9e:	01db      	lsls	r3, r3, #7
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005da8:	78fb      	ldrb	r3, [r7, #3]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4013      	ands	r3, r2
 8005dba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e00:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005e04:	f023 0307 	bic.w	r3, r3, #7
 8005e08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	460b      	mov	r3, r1
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	333c      	adds	r3, #60	@ 0x3c
 8005e42:	3304      	adds	r3, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4a26      	ldr	r2, [pc, #152]	@ (8005ee4 <USB_EP0_OutStart+0xb8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d90a      	bls.n	8005e66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e60:	d101      	bne.n	8005e66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	e037      	b.n	8005ed6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	2300      	movs	r3, #0
 8005e70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e94:	f043 0318 	orr.w	r3, r3, #24
 8005e98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ea8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005eac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005eae:	7afb      	ldrb	r3, [r7, #11]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d10f      	bne.n	8005ed4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eba:	461a      	mov	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ece:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005ed2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	4f54300a 	.word	0x4f54300a

08005ee8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f00:	d901      	bls.n	8005f06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e01b      	b.n	8005f3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	daf2      	bge.n	8005ef4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f043 0201 	orr.w	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3301      	adds	r3, #1
 8005f22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f2a:	d901      	bls.n	8005f30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e006      	b.n	8005f3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d0f0      	beq.n	8005f1e <USB_CoreReset+0x36>

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
	...

08005f4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f58:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005f5c:	f006 fc72 	bl	800c844 <USBD_static_malloc>
 8005f60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d109      	bne.n	8005f7c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	32b0      	adds	r2, #176	@ 0xb0
 8005f72:	2100      	movs	r1, #0
 8005f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e0d4      	b.n	8006126 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005f7c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005f80:	2100      	movs	r1, #0
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f006 fcc2 	bl	800c90c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	32b0      	adds	r2, #176	@ 0xb0
 8005f92:	68f9      	ldr	r1, [r7, #12]
 8005f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	32b0      	adds	r2, #176	@ 0xb0
 8005fa2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	7c1b      	ldrb	r3, [r3, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d138      	bne.n	8006026 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8006130 <USBD_CDC_Init+0x1e4>)
 8005fb6:	7819      	ldrb	r1, [r3, #0]
 8005fb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f006 fb1d 	bl	800c5fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005fc4:	4b5a      	ldr	r3, [pc, #360]	@ (8006130 <USBD_CDC_Init+0x1e4>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	f003 020f 	and.w	r2, r3, #15
 8005fcc:	6879      	ldr	r1, [r7, #4]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	3324      	adds	r3, #36	@ 0x24
 8005fda:	2201      	movs	r2, #1
 8005fdc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005fde:	4b55      	ldr	r3, [pc, #340]	@ (8006134 <USBD_CDC_Init+0x1e8>)
 8005fe0:	7819      	ldrb	r1, [r3, #0]
 8005fe2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f006 fb08 	bl	800c5fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005fee:	4b51      	ldr	r3, [pc, #324]	@ (8006134 <USBD_CDC_Init+0x1e8>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	f003 020f 	and.w	r2, r3, #15
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	440b      	add	r3, r1
 8006002:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006006:	2201      	movs	r2, #1
 8006008:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800600a:	4b4b      	ldr	r3, [pc, #300]	@ (8006138 <USBD_CDC_Init+0x1ec>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	f003 020f 	and.w	r2, r3, #15
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	3326      	adds	r3, #38	@ 0x26
 8006020:	2210      	movs	r2, #16
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	e035      	b.n	8006092 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006026:	4b42      	ldr	r3, [pc, #264]	@ (8006130 <USBD_CDC_Init+0x1e4>)
 8006028:	7819      	ldrb	r1, [r3, #0]
 800602a:	2340      	movs	r3, #64	@ 0x40
 800602c:	2202      	movs	r2, #2
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f006 fae5 	bl	800c5fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006034:	4b3e      	ldr	r3, [pc, #248]	@ (8006130 <USBD_CDC_Init+0x1e4>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	f003 020f 	and.w	r2, r3, #15
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	3324      	adds	r3, #36	@ 0x24
 800604a:	2201      	movs	r2, #1
 800604c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800604e:	4b39      	ldr	r3, [pc, #228]	@ (8006134 <USBD_CDC_Init+0x1e8>)
 8006050:	7819      	ldrb	r1, [r3, #0]
 8006052:	2340      	movs	r3, #64	@ 0x40
 8006054:	2202      	movs	r2, #2
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f006 fad1 	bl	800c5fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800605c:	4b35      	ldr	r3, [pc, #212]	@ (8006134 <USBD_CDC_Init+0x1e8>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	f003 020f 	and.w	r2, r3, #15
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006074:	2201      	movs	r2, #1
 8006076:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006078:	4b2f      	ldr	r3, [pc, #188]	@ (8006138 <USBD_CDC_Init+0x1ec>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	f003 020f 	and.w	r2, r3, #15
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	440b      	add	r3, r1
 800608c:	3326      	adds	r3, #38	@ 0x26
 800608e:	2210      	movs	r2, #16
 8006090:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006092:	4b29      	ldr	r3, [pc, #164]	@ (8006138 <USBD_CDC_Init+0x1ec>)
 8006094:	7819      	ldrb	r1, [r3, #0]
 8006096:	2308      	movs	r3, #8
 8006098:	2203      	movs	r2, #3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f006 faaf 	bl	800c5fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80060a0:	4b25      	ldr	r3, [pc, #148]	@ (8006138 <USBD_CDC_Init+0x1ec>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	f003 020f 	and.w	r2, r3, #15
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	3324      	adds	r3, #36	@ 0x24
 80060b6:	2201      	movs	r2, #1
 80060b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	33b0      	adds	r3, #176	@ 0xb0
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80060f0:	2302      	movs	r3, #2
 80060f2:	e018      	b.n	8006126 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	7c1b      	ldrb	r3, [r3, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10a      	bne.n	8006112 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006134 <USBD_CDC_Init+0x1e8>)
 80060fe:	7819      	ldrb	r1, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006106:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f006 fb66 	bl	800c7dc <USBD_LL_PrepareReceive>
 8006110:	e008      	b.n	8006124 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006112:	4b08      	ldr	r3, [pc, #32]	@ (8006134 <USBD_CDC_Init+0x1e8>)
 8006114:	7819      	ldrb	r1, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800611c:	2340      	movs	r3, #64	@ 0x40
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f006 fb5c 	bl	800c7dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	200000b7 	.word	0x200000b7
 8006134:	200000b8 	.word	0x200000b8
 8006138:	200000b9 	.word	0x200000b9

0800613c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006148:	4b3a      	ldr	r3, [pc, #232]	@ (8006234 <USBD_CDC_DeInit+0xf8>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	4619      	mov	r1, r3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f006 fa7b 	bl	800c64a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006154:	4b37      	ldr	r3, [pc, #220]	@ (8006234 <USBD_CDC_DeInit+0xf8>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	f003 020f 	and.w	r2, r3, #15
 800615c:	6879      	ldr	r1, [r7, #4]
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	440b      	add	r3, r1
 8006168:	3324      	adds	r3, #36	@ 0x24
 800616a:	2200      	movs	r2, #0
 800616c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800616e:	4b32      	ldr	r3, [pc, #200]	@ (8006238 <USBD_CDC_DeInit+0xfc>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f006 fa68 	bl	800c64a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800617a:	4b2f      	ldr	r3, [pc, #188]	@ (8006238 <USBD_CDC_DeInit+0xfc>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	f003 020f 	and.w	r2, r3, #15
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006192:	2200      	movs	r2, #0
 8006194:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006196:	4b29      	ldr	r3, [pc, #164]	@ (800623c <USBD_CDC_DeInit+0x100>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f006 fa54 	bl	800c64a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80061a2:	4b26      	ldr	r3, [pc, #152]	@ (800623c <USBD_CDC_DeInit+0x100>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	f003 020f 	and.w	r2, r3, #15
 80061aa:	6879      	ldr	r1, [r7, #4]
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	3324      	adds	r3, #36	@ 0x24
 80061b8:	2200      	movs	r2, #0
 80061ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80061bc:	4b1f      	ldr	r3, [pc, #124]	@ (800623c <USBD_CDC_DeInit+0x100>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	f003 020f 	and.w	r2, r3, #15
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	4613      	mov	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	440b      	add	r3, r1
 80061d0:	3326      	adds	r3, #38	@ 0x26
 80061d2:	2200      	movs	r2, #0
 80061d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	32b0      	adds	r2, #176	@ 0xb0
 80061e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01f      	beq.n	8006228 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	33b0      	adds	r3, #176	@ 0xb0
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	32b0      	adds	r2, #176	@ 0xb0
 8006206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620a:	4618      	mov	r0, r3
 800620c:	f006 fb28 	bl	800c860 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	32b0      	adds	r2, #176	@ 0xb0
 800621a:	2100      	movs	r1, #0
 800621c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	200000b7 	.word	0x200000b7
 8006238:	200000b8 	.word	0x200000b8
 800623c:	200000b9 	.word	0x200000b9

08006240 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	32b0      	adds	r2, #176	@ 0xb0
 8006254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006258:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800626c:	2303      	movs	r3, #3
 800626e:	e0bf      	b.n	80063f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006278:	2b00      	cmp	r3, #0
 800627a:	d050      	beq.n	800631e <USBD_CDC_Setup+0xde>
 800627c:	2b20      	cmp	r3, #32
 800627e:	f040 80af 	bne.w	80063e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	88db      	ldrh	r3, [r3, #6]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d03a      	beq.n	8006300 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	b25b      	sxtb	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	da1b      	bge.n	80062cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	33b0      	adds	r3, #176	@ 0xb0
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80062aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	88d2      	ldrh	r2, [r2, #6]
 80062b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	88db      	ldrh	r3, [r3, #6]
 80062b6:	2b07      	cmp	r3, #7
 80062b8:	bf28      	it	cs
 80062ba:	2307      	movcs	r3, #7
 80062bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	89fa      	ldrh	r2, [r7, #14]
 80062c2:	4619      	mov	r1, r3
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f001 fd53 	bl	8007d70 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80062ca:	e090      	b.n	80063ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	785a      	ldrb	r2, [r3, #1]
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	88db      	ldrh	r3, [r3, #6]
 80062da:	2b3f      	cmp	r3, #63	@ 0x3f
 80062dc:	d803      	bhi.n	80062e6 <USBD_CDC_Setup+0xa6>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	88db      	ldrh	r3, [r3, #6]
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	e000      	b.n	80062e8 <USBD_CDC_Setup+0xa8>
 80062e6:	2240      	movs	r2, #64	@ 0x40
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80062ee:	6939      	ldr	r1, [r7, #16]
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80062f6:	461a      	mov	r2, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 fd65 	bl	8007dc8 <USBD_CtlPrepareRx>
      break;
 80062fe:	e076      	b.n	80063ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	33b0      	adds	r3, #176	@ 0xb0
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	7850      	ldrb	r0, [r2, #1]
 8006316:	2200      	movs	r2, #0
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	4798      	blx	r3
      break;
 800631c:	e067      	b.n	80063ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	785b      	ldrb	r3, [r3, #1]
 8006322:	2b0b      	cmp	r3, #11
 8006324:	d851      	bhi.n	80063ca <USBD_CDC_Setup+0x18a>
 8006326:	a201      	add	r2, pc, #4	@ (adr r2, 800632c <USBD_CDC_Setup+0xec>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	0800635d 	.word	0x0800635d
 8006330:	080063d9 	.word	0x080063d9
 8006334:	080063cb 	.word	0x080063cb
 8006338:	080063cb 	.word	0x080063cb
 800633c:	080063cb 	.word	0x080063cb
 8006340:	080063cb 	.word	0x080063cb
 8006344:	080063cb 	.word	0x080063cb
 8006348:	080063cb 	.word	0x080063cb
 800634c:	080063cb 	.word	0x080063cb
 8006350:	080063cb 	.word	0x080063cb
 8006354:	08006387 	.word	0x08006387
 8006358:	080063b1 	.word	0x080063b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b03      	cmp	r3, #3
 8006366:	d107      	bne.n	8006378 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006368:	f107 030a 	add.w	r3, r7, #10
 800636c:	2202      	movs	r2, #2
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f001 fcfd 	bl	8007d70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006376:	e032      	b.n	80063de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 fc7b 	bl	8007c76 <USBD_CtlError>
            ret = USBD_FAIL;
 8006380:	2303      	movs	r3, #3
 8006382:	75fb      	strb	r3, [r7, #23]
          break;
 8006384:	e02b      	b.n	80063de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b03      	cmp	r3, #3
 8006390:	d107      	bne.n	80063a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006392:	f107 030d 	add.w	r3, r7, #13
 8006396:	2201      	movs	r2, #1
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f001 fce8 	bl	8007d70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063a0:	e01d      	b.n	80063de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 fc66 	bl	8007c76 <USBD_CtlError>
            ret = USBD_FAIL;
 80063aa:	2303      	movs	r3, #3
 80063ac:	75fb      	strb	r3, [r7, #23]
          break;
 80063ae:	e016      	b.n	80063de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d00f      	beq.n	80063dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f001 fc59 	bl	8007c76 <USBD_CtlError>
            ret = USBD_FAIL;
 80063c4:	2303      	movs	r3, #3
 80063c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80063c8:	e008      	b.n	80063dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 fc52 	bl	8007c76 <USBD_CtlError>
          ret = USBD_FAIL;
 80063d2:	2303      	movs	r3, #3
 80063d4:	75fb      	strb	r3, [r7, #23]
          break;
 80063d6:	e002      	b.n	80063de <USBD_CDC_Setup+0x19e>
          break;
 80063d8:	bf00      	nop
 80063da:	e008      	b.n	80063ee <USBD_CDC_Setup+0x1ae>
          break;
 80063dc:	bf00      	nop
      }
      break;
 80063de:	e006      	b.n	80063ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 fc47 	bl	8007c76 <USBD_CtlError>
      ret = USBD_FAIL;
 80063e8:	2303      	movs	r3, #3
 80063ea:	75fb      	strb	r3, [r7, #23]
      break;
 80063ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80063ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800640a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	32b0      	adds	r2, #176	@ 0xb0
 8006416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800641e:	2303      	movs	r3, #3
 8006420:	e065      	b.n	80064ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	32b0      	adds	r2, #176	@ 0xb0
 800642c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006430:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	f003 020f 	and.w	r2, r3, #15
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	440b      	add	r3, r1
 8006444:	3318      	adds	r3, #24
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d02f      	beq.n	80064ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	f003 020f 	and.w	r2, r3, #15
 8006452:	6879      	ldr	r1, [r7, #4]
 8006454:	4613      	mov	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	440b      	add	r3, r1
 800645e:	3318      	adds	r3, #24
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	78fb      	ldrb	r3, [r7, #3]
 8006464:	f003 010f 	and.w	r1, r3, #15
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	460b      	mov	r3, r1
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	440b      	add	r3, r1
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4403      	add	r3, r0
 8006474:	331c      	adds	r3, #28
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	fbb2 f1f3 	udiv	r1, r2, r3
 800647c:	fb01 f303 	mul.w	r3, r1, r3
 8006480:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006482:	2b00      	cmp	r3, #0
 8006484:	d112      	bne.n	80064ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006486:	78fb      	ldrb	r3, [r7, #3]
 8006488:	f003 020f 	and.w	r2, r3, #15
 800648c:	6879      	ldr	r1, [r7, #4]
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	440b      	add	r3, r1
 8006498:	3318      	adds	r3, #24
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800649e:	78f9      	ldrb	r1, [r7, #3]
 80064a0:	2300      	movs	r3, #0
 80064a2:	2200      	movs	r2, #0
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f006 f978 	bl	800c79a <USBD_LL_Transmit>
 80064aa:	e01f      	b.n	80064ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	33b0      	adds	r3, #176	@ 0xb0
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d010      	beq.n	80064ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	33b0      	adds	r3, #176	@ 0xb0
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80064e8:	78fa      	ldrb	r2, [r7, #3]
 80064ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	460b      	mov	r3, r1
 8006500:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	32b0      	adds	r2, #176	@ 0xb0
 800650c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006510:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	32b0      	adds	r2, #176	@ 0xb0
 800651c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006524:	2303      	movs	r3, #3
 8006526:	e01a      	b.n	800655e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f006 f976 	bl	800c81e <USBD_LL_GetRxDataSize>
 8006532:	4602      	mov	r2, r0
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	33b0      	adds	r3, #176	@ 0xb0
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006558:	4611      	mov	r1, r2
 800655a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	32b0      	adds	r2, #176	@ 0xb0
 8006578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006584:	2303      	movs	r3, #3
 8006586:	e024      	b.n	80065d2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	33b0      	adds	r3, #176	@ 0xb0
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d019      	beq.n	80065d0 <USBD_CDC_EP0_RxReady+0x6a>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80065a2:	2bff      	cmp	r3, #255	@ 0xff
 80065a4:	d014      	beq.n	80065d0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	33b0      	adds	r3, #176	@ 0xb0
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80065be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80065c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	22ff      	movs	r2, #255	@ 0xff
 80065cc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065e4:	2182      	movs	r1, #130	@ 0x82
 80065e6:	4818      	ldr	r0, [pc, #96]	@ (8006648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80065e8:	f000 fd0f 	bl	800700a <USBD_GetEpDesc>
 80065ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065ee:	2101      	movs	r1, #1
 80065f0:	4815      	ldr	r0, [pc, #84]	@ (8006648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80065f2:	f000 fd0a 	bl	800700a <USBD_GetEpDesc>
 80065f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065f8:	2181      	movs	r1, #129	@ 0x81
 80065fa:	4813      	ldr	r0, [pc, #76]	@ (8006648 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80065fc:	f000 fd05 	bl	800700a <USBD_GetEpDesc>
 8006600:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2210      	movs	r2, #16
 800660c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d006      	beq.n	8006622 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2200      	movs	r2, #0
 8006618:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800661c:	711a      	strb	r2, [r3, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d006      	beq.n	8006636 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006630:	711a      	strb	r2, [r3, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2243      	movs	r2, #67	@ 0x43
 800663a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800663c:	4b02      	ldr	r3, [pc, #8]	@ (8006648 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20000074 	.word	0x20000074

0800664c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006654:	2182      	movs	r1, #130	@ 0x82
 8006656:	4818      	ldr	r0, [pc, #96]	@ (80066b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006658:	f000 fcd7 	bl	800700a <USBD_GetEpDesc>
 800665c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800665e:	2101      	movs	r1, #1
 8006660:	4815      	ldr	r0, [pc, #84]	@ (80066b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006662:	f000 fcd2 	bl	800700a <USBD_GetEpDesc>
 8006666:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006668:	2181      	movs	r1, #129	@ 0x81
 800666a:	4813      	ldr	r0, [pc, #76]	@ (80066b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800666c:	f000 fccd 	bl	800700a <USBD_GetEpDesc>
 8006670:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2210      	movs	r2, #16
 800667c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d006      	beq.n	8006692 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	2200      	movs	r2, #0
 8006688:	711a      	strb	r2, [r3, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f042 0202 	orr.w	r2, r2, #2
 8006690:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d006      	beq.n	80066a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	711a      	strb	r2, [r3, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f042 0202 	orr.w	r2, r2, #2
 80066a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2243      	movs	r2, #67	@ 0x43
 80066aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066ac:	4b02      	ldr	r3, [pc, #8]	@ (80066b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000074 	.word	0x20000074

080066bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066c4:	2182      	movs	r1, #130	@ 0x82
 80066c6:	4818      	ldr	r0, [pc, #96]	@ (8006728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80066c8:	f000 fc9f 	bl	800700a <USBD_GetEpDesc>
 80066cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066ce:	2101      	movs	r1, #1
 80066d0:	4815      	ldr	r0, [pc, #84]	@ (8006728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80066d2:	f000 fc9a 	bl	800700a <USBD_GetEpDesc>
 80066d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066d8:	2181      	movs	r1, #129	@ 0x81
 80066da:	4813      	ldr	r0, [pc, #76]	@ (8006728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80066dc:	f000 fc95 	bl	800700a <USBD_GetEpDesc>
 80066e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2210      	movs	r2, #16
 80066ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d006      	beq.n	8006702 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066fc:	711a      	strb	r2, [r3, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d006      	beq.n	8006716 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006710:	711a      	strb	r2, [r3, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2243      	movs	r2, #67	@ 0x43
 800671a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800671c:	4b02      	ldr	r3, [pc, #8]	@ (8006728 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20000074 	.word	0x20000074

0800672c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	220a      	movs	r2, #10
 8006738:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800673a:	4b03      	ldr	r3, [pc, #12]	@ (8006748 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800673c:	4618      	mov	r0, r3
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	20000030 	.word	0x20000030

0800674c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800675c:	2303      	movs	r3, #3
 800675e:	e009      	b.n	8006774 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	33b0      	adds	r3, #176	@ 0xb0
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	32b0      	adds	r2, #176	@ 0xb0
 8006796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e008      	b.n	80067b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	371c      	adds	r7, #28
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	32b0      	adds	r2, #176	@ 0xb0
 80067d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e004      	b.n	80067f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
	...

08006800 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	32b0      	adds	r2, #176	@ 0xb0
 8006812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006816:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	32b0      	adds	r2, #176	@ 0xb0
 8006822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800682a:	2303      	movs	r3, #3
 800682c:	e018      	b.n	8006860 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	7c1b      	ldrb	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10a      	bne.n	800684c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006836:	4b0c      	ldr	r3, [pc, #48]	@ (8006868 <USBD_CDC_ReceivePacket+0x68>)
 8006838:	7819      	ldrb	r1, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006840:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f005 ffc9 	bl	800c7dc <USBD_LL_PrepareReceive>
 800684a:	e008      	b.n	800685e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800684c:	4b06      	ldr	r3, [pc, #24]	@ (8006868 <USBD_CDC_ReceivePacket+0x68>)
 800684e:	7819      	ldrb	r1, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006856:	2340      	movs	r3, #64	@ 0x40
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f005 ffbf 	bl	800c7dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	200000b8 	.word	0x200000b8

0800686c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	4613      	mov	r3, r2
 8006878:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006880:	2303      	movs	r3, #3
 8006882:	e01f      	b.n	80068c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	79fa      	ldrb	r2, [r7, #7]
 80068b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f005 fe39 	bl	800c530 <USBD_LL_Init>
 80068be:	4603      	mov	r3, r0
 80068c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80068c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e025      	b.n	8006930 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	32ae      	adds	r2, #174	@ 0xae
 80068f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00f      	beq.n	8006920 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	32ae      	adds	r2, #174	@ 0xae
 800690a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006910:	f107 020e 	add.w	r2, r7, #14
 8006914:	4610      	mov	r0, r2
 8006916:	4798      	blx	r3
 8006918:	4602      	mov	r2, r0
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f005 fe41 	bl	800c5c8 <USBD_LL_Start>
 8006946:	4603      	mov	r3, r0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006958:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800695a:	4618      	mov	r0, r3
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	460b      	mov	r3, r1
 8006970:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800697c:	2b00      	cmp	r3, #0
 800697e:	d009      	beq.n	8006994 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	78fa      	ldrb	r2, [r7, #3]
 800698a:	4611      	mov	r1, r2
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	4798      	blx	r3
 8006990:	4603      	mov	r3, r0
 8006992:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006994:	7bfb      	ldrb	r3, [r7, #15]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	460b      	mov	r3, r1
 80069a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	78fa      	ldrb	r2, [r7, #3]
 80069b8:	4611      	mov	r1, r2
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	4798      	blx	r3
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80069c4:	2303      	movs	r3, #3
 80069c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 f90c 	bl	8007c02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80069f8:	461a      	mov	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d01a      	beq.n	8006a44 <USBD_LL_SetupStage+0x72>
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d822      	bhi.n	8006a58 <USBD_LL_SetupStage+0x86>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <USBD_LL_SetupStage+0x4a>
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d00a      	beq.n	8006a30 <USBD_LL_SetupStage+0x5e>
 8006a1a:	e01d      	b.n	8006a58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fb63 	bl	80070f0 <USBD_StdDevReq>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a2e:	e020      	b.n	8006a72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fbcb 	bl	80071d4 <USBD_StdItfReq>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	73fb      	strb	r3, [r7, #15]
      break;
 8006a42:	e016      	b.n	8006a72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fc2d 	bl	80072ac <USBD_StdEPReq>
 8006a52:	4603      	mov	r3, r0
 8006a54:	73fb      	strb	r3, [r7, #15]
      break;
 8006a56:	e00c      	b.n	8006a72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a5e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f005 fe0e 	bl	800c688 <USBD_LL_StallEP>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a70:	bf00      	nop
  }

  return ret;
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	460b      	mov	r3, r1
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006a8e:	7afb      	ldrb	r3, [r7, #11]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d16e      	bne.n	8006b72 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006a9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	f040 8098 	bne.w	8006bd8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d913      	bls.n	8006adc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	1ad2      	subs	r2, r2, r3
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	4293      	cmp	r3, r2
 8006acc:	bf28      	it	cs
 8006ace:	4613      	movcs	r3, r2
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f001 f994 	bl	8007e02 <USBD_CtlContinueRx>
 8006ada:	e07d      	b.n	8006bd8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ae2:	f003 031f 	and.w	r3, r3, #31
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d014      	beq.n	8006b14 <USBD_LL_DataOutStage+0x98>
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d81d      	bhi.n	8006b2a <USBD_LL_DataOutStage+0xae>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <USBD_LL_DataOutStage+0x7c>
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d003      	beq.n	8006afe <USBD_LL_DataOutStage+0x82>
 8006af6:	e018      	b.n	8006b2a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	75bb      	strb	r3, [r7, #22]
            break;
 8006afc:	e018      	b.n	8006b30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	4619      	mov	r1, r3
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 fa64 	bl	8006fd6 <USBD_CoreFindIF>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	75bb      	strb	r3, [r7, #22]
            break;
 8006b12:	e00d      	b.n	8006b30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 fa66 	bl	8006ff0 <USBD_CoreFindEP>
 8006b24:	4603      	mov	r3, r0
 8006b26:	75bb      	strb	r3, [r7, #22]
            break;
 8006b28:	e002      	b.n	8006b30 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	75bb      	strb	r3, [r7, #22]
            break;
 8006b2e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b30:	7dbb      	ldrb	r3, [r7, #22]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d119      	bne.n	8006b6a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d113      	bne.n	8006b6a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b42:	7dba      	ldrb	r2, [r7, #22]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	32ae      	adds	r2, #174	@ 0xae
 8006b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00b      	beq.n	8006b6a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b52:	7dba      	ldrb	r2, [r7, #22]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b5a:	7dba      	ldrb	r2, [r7, #22]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	32ae      	adds	r2, #174	@ 0xae
 8006b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f001 f95a 	bl	8007e24 <USBD_CtlSendStatus>
 8006b70:	e032      	b.n	8006bd8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b72:	7afb      	ldrb	r3, [r7, #11]
 8006b74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fa37 	bl	8006ff0 <USBD_CoreFindEP>
 8006b82:	4603      	mov	r3, r0
 8006b84:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b86:	7dbb      	ldrb	r3, [r7, #22]
 8006b88:	2bff      	cmp	r3, #255	@ 0xff
 8006b8a:	d025      	beq.n	8006bd8 <USBD_LL_DataOutStage+0x15c>
 8006b8c:	7dbb      	ldrb	r3, [r7, #22]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d122      	bne.n	8006bd8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d117      	bne.n	8006bce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006b9e:	7dba      	ldrb	r2, [r7, #22]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	32ae      	adds	r2, #174	@ 0xae
 8006ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00f      	beq.n	8006bce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006bae:	7dba      	ldrb	r2, [r7, #22]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006bb6:	7dba      	ldrb	r2, [r7, #22]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	32ae      	adds	r2, #174	@ 0xae
 8006bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	7afa      	ldrb	r2, [r7, #11]
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	4798      	blx	r3
 8006bca:	4603      	mov	r3, r0
 8006bcc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
 8006bd6:	e000      	b.n	8006bda <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b086      	sub	sp, #24
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	460b      	mov	r3, r1
 8006bec:	607a      	str	r2, [r7, #4]
 8006bee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006bf0:	7afb      	ldrb	r3, [r7, #11]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d16f      	bne.n	8006cd6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3314      	adds	r3, #20
 8006bfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d15a      	bne.n	8006cbc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d914      	bls.n	8006c3c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	1ad2      	subs	r2, r2, r3
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f001 f8bc 	bl	8007da6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c2e:	2300      	movs	r3, #0
 8006c30:	2200      	movs	r2, #0
 8006c32:	2100      	movs	r1, #0
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f005 fdd1 	bl	800c7dc <USBD_LL_PrepareReceive>
 8006c3a:	e03f      	b.n	8006cbc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d11c      	bne.n	8006c82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d316      	bcc.n	8006c82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d20f      	bcs.n	8006c82 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c62:	2200      	movs	r2, #0
 8006c64:	2100      	movs	r1, #0
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f001 f89d 	bl	8007da6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c74:	2300      	movs	r3, #0
 8006c76:	2200      	movs	r2, #0
 8006c78:	2100      	movs	r1, #0
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f005 fdae 	bl	800c7dc <USBD_LL_PrepareReceive>
 8006c80:	e01c      	b.n	8006cbc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d10f      	bne.n	8006cae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d009      	beq.n	8006cae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cae:	2180      	movs	r1, #128	@ 0x80
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f005 fce9 	bl	800c688 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f001 f8c7 	bl	8007e4a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d03a      	beq.n	8006d3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f7ff fe42 	bl	8006950 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006cd4:	e032      	b.n	8006d3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006cd6:	7afb      	ldrb	r3, [r7, #11]
 8006cd8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	4619      	mov	r1, r3
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f985 	bl	8006ff0 <USBD_CoreFindEP>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
 8006cec:	2bff      	cmp	r3, #255	@ 0xff
 8006cee:	d025      	beq.n	8006d3c <USBD_LL_DataInStage+0x15a>
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d122      	bne.n	8006d3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d11c      	bne.n	8006d3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006d02:	7dfa      	ldrb	r2, [r7, #23]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	32ae      	adds	r2, #174	@ 0xae
 8006d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d014      	beq.n	8006d3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006d12:	7dfa      	ldrb	r2, [r7, #23]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d1a:	7dfa      	ldrb	r2, [r7, #23]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	32ae      	adds	r2, #174	@ 0xae
 8006d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	7afa      	ldrb	r2, [r7, #11]
 8006d28:	4611      	mov	r1, r2
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	4798      	blx	r3
 8006d2e:	4603      	mov	r3, r0
 8006d30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d32:	7dbb      	ldrb	r3, [r7, #22]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d38:	7dbb      	ldrb	r3, [r7, #22]
 8006d3a:	e000      	b.n	8006d3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d014      	beq.n	8006dac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00e      	beq.n	8006dac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	6852      	ldr	r2, [r2, #4]
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4798      	blx	r3
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006da8:	2303      	movs	r3, #3
 8006daa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dac:	2340      	movs	r3, #64	@ 0x40
 8006dae:	2200      	movs	r2, #0
 8006db0:	2100      	movs	r1, #0
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f005 fc23 	bl	800c5fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2240      	movs	r2, #64	@ 0x40
 8006dc4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dc8:	2340      	movs	r3, #64	@ 0x40
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2180      	movs	r1, #128	@ 0x80
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f005 fc15 	bl	800c5fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2240      	movs	r2, #64	@ 0x40
 8006dde:	621a      	str	r2, [r3, #32]

  return ret;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	460b      	mov	r3, r1
 8006df4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	78fa      	ldrb	r2, [r7, #3]
 8006dfa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d006      	beq.n	8006e2c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2204      	movs	r2, #4
 8006e30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d106      	bne.n	8006e64 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d110      	bne.n	8006ea8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d005      	beq.n	8006ea8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	32ae      	adds	r2, #174	@ 0xae
 8006ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e01c      	b.n	8006f0e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d115      	bne.n	8006f0c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	32ae      	adds	r2, #174	@ 0xae
 8006eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00b      	beq.n	8006f0c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	32ae      	adds	r2, #174	@ 0xae
 8006efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	78fa      	ldrb	r2, [r7, #3]
 8006f06:	4611      	mov	r1, r2
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b082      	sub	sp, #8
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	32ae      	adds	r2, #174	@ 0xae
 8006f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e01c      	b.n	8006f72 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d115      	bne.n	8006f70 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	32ae      	adds	r2, #174	@ 0xae
 8006f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00b      	beq.n	8006f70 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	32ae      	adds	r2, #174	@ 0xae
 8006f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f68:	78fa      	ldrb	r2, [r7, #3]
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00e      	beq.n	8006fcc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	6852      	ldr	r2, [r2, #4]
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	4798      	blx	r3
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fe2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ffc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b086      	sub	sp, #24
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	460b      	mov	r3, r1
 8007014:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800701e:	2300      	movs	r3, #0
 8007020:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	885b      	ldrh	r3, [r3, #2]
 8007026:	b29b      	uxth	r3, r3
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	7812      	ldrb	r2, [r2, #0]
 800702c:	4293      	cmp	r3, r2
 800702e:	d91f      	bls.n	8007070 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007036:	e013      	b.n	8007060 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007038:	f107 030a 	add.w	r3, r7, #10
 800703c:	4619      	mov	r1, r3
 800703e:	6978      	ldr	r0, [r7, #20]
 8007040:	f000 f81b 	bl	800707a <USBD_GetNextDesc>
 8007044:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	785b      	ldrb	r3, [r3, #1]
 800704a:	2b05      	cmp	r3, #5
 800704c:	d108      	bne.n	8007060 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	789b      	ldrb	r3, [r3, #2]
 8007056:	78fa      	ldrb	r2, [r7, #3]
 8007058:	429a      	cmp	r2, r3
 800705a:	d008      	beq.n	800706e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800705c:	2300      	movs	r3, #0
 800705e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	885b      	ldrh	r3, [r3, #2]
 8007064:	b29a      	uxth	r2, r3
 8007066:	897b      	ldrh	r3, [r7, #10]
 8007068:	429a      	cmp	r2, r3
 800706a:	d8e5      	bhi.n	8007038 <USBD_GetEpDesc+0x2e>
 800706c:	e000      	b.n	8007070 <USBD_GetEpDesc+0x66>
          break;
 800706e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007070:	693b      	ldr	r3, [r7, #16]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800707a:	b480      	push	{r7}
 800707c:	b085      	sub	sp, #20
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	7812      	ldrb	r2, [r2, #0]
 8007090:	4413      	add	r3, r2
 8007092:	b29a      	uxth	r2, r3
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4413      	add	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80070a4:	68fb      	ldr	r3, [r7, #12]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b087      	sub	sp, #28
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	3301      	adds	r3, #1
 80070c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070d0:	8a3b      	ldrh	r3, [r7, #16]
 80070d2:	021b      	lsls	r3, r3, #8
 80070d4:	b21a      	sxth	r2, r3
 80070d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070da:	4313      	orrs	r3, r2
 80070dc:	b21b      	sxth	r3, r3
 80070de:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80070e0:	89fb      	ldrh	r3, [r7, #14]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	371c      	adds	r7, #28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
	...

080070f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007106:	2b40      	cmp	r3, #64	@ 0x40
 8007108:	d005      	beq.n	8007116 <USBD_StdDevReq+0x26>
 800710a:	2b40      	cmp	r3, #64	@ 0x40
 800710c:	d857      	bhi.n	80071be <USBD_StdDevReq+0xce>
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00f      	beq.n	8007132 <USBD_StdDevReq+0x42>
 8007112:	2b20      	cmp	r3, #32
 8007114:	d153      	bne.n	80071be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	32ae      	adds	r2, #174	@ 0xae
 8007120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	4798      	blx	r3
 800712c:	4603      	mov	r3, r0
 800712e:	73fb      	strb	r3, [r7, #15]
      break;
 8007130:	e04a      	b.n	80071c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	785b      	ldrb	r3, [r3, #1]
 8007136:	2b09      	cmp	r3, #9
 8007138:	d83b      	bhi.n	80071b2 <USBD_StdDevReq+0xc2>
 800713a:	a201      	add	r2, pc, #4	@ (adr r2, 8007140 <USBD_StdDevReq+0x50>)
 800713c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007140:	08007195 	.word	0x08007195
 8007144:	080071a9 	.word	0x080071a9
 8007148:	080071b3 	.word	0x080071b3
 800714c:	0800719f 	.word	0x0800719f
 8007150:	080071b3 	.word	0x080071b3
 8007154:	08007173 	.word	0x08007173
 8007158:	08007169 	.word	0x08007169
 800715c:	080071b3 	.word	0x080071b3
 8007160:	0800718b 	.word	0x0800718b
 8007164:	0800717d 	.word	0x0800717d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fa3c 	bl	80075e8 <USBD_GetDescriptor>
          break;
 8007170:	e024      	b.n	80071bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fba1 	bl	80078bc <USBD_SetAddress>
          break;
 800717a:	e01f      	b.n	80071bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fbe0 	bl	8007944 <USBD_SetConfig>
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]
          break;
 8007188:	e018      	b.n	80071bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fc83 	bl	8007a98 <USBD_GetConfig>
          break;
 8007192:	e013      	b.n	80071bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fcb4 	bl	8007b04 <USBD_GetStatus>
          break;
 800719c:	e00e      	b.n	80071bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fce3 	bl	8007b6c <USBD_SetFeature>
          break;
 80071a6:	e009      	b.n	80071bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fd07 	bl	8007bbe <USBD_ClrFeature>
          break;
 80071b0:	e004      	b.n	80071bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fd5e 	bl	8007c76 <USBD_CtlError>
          break;
 80071ba:	bf00      	nop
      }
      break;
 80071bc:	e004      	b.n	80071c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fd58 	bl	8007c76 <USBD_CtlError>
      break;
 80071c6:	bf00      	nop
  }

  return ret;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop

080071d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071ea:	2b40      	cmp	r3, #64	@ 0x40
 80071ec:	d005      	beq.n	80071fa <USBD_StdItfReq+0x26>
 80071ee:	2b40      	cmp	r3, #64	@ 0x40
 80071f0:	d852      	bhi.n	8007298 <USBD_StdItfReq+0xc4>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <USBD_StdItfReq+0x26>
 80071f6:	2b20      	cmp	r3, #32
 80071f8:	d14e      	bne.n	8007298 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007200:	b2db      	uxtb	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	2b02      	cmp	r3, #2
 8007206:	d840      	bhi.n	800728a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	889b      	ldrh	r3, [r3, #4]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b01      	cmp	r3, #1
 8007210:	d836      	bhi.n	8007280 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	889b      	ldrh	r3, [r3, #4]
 8007216:	b2db      	uxtb	r3, r3
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff fedb 	bl	8006fd6 <USBD_CoreFindIF>
 8007220:	4603      	mov	r3, r0
 8007222:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	2bff      	cmp	r3, #255	@ 0xff
 8007228:	d01d      	beq.n	8007266 <USBD_StdItfReq+0x92>
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d11a      	bne.n	8007266 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007230:	7bba      	ldrb	r2, [r7, #14]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	32ae      	adds	r2, #174	@ 0xae
 8007236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00f      	beq.n	8007260 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007240:	7bba      	ldrb	r2, [r7, #14]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007248:	7bba      	ldrb	r2, [r7, #14]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	32ae      	adds	r2, #174	@ 0xae
 800724e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	4798      	blx	r3
 800725a:	4603      	mov	r3, r0
 800725c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800725e:	e004      	b.n	800726a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007260:	2303      	movs	r3, #3
 8007262:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007264:	e001      	b.n	800726a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007266:	2303      	movs	r3, #3
 8007268:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	88db      	ldrh	r3, [r3, #6]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d110      	bne.n	8007294 <USBD_StdItfReq+0xc0>
 8007272:	7bfb      	ldrb	r3, [r7, #15]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10d      	bne.n	8007294 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fdd3 	bl	8007e24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800727e:	e009      	b.n	8007294 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fcf7 	bl	8007c76 <USBD_CtlError>
          break;
 8007288:	e004      	b.n	8007294 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fcf2 	bl	8007c76 <USBD_CtlError>
          break;
 8007292:	e000      	b.n	8007296 <USBD_StdItfReq+0xc2>
          break;
 8007294:	bf00      	nop
      }
      break;
 8007296:	e004      	b.n	80072a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fceb 	bl	8007c76 <USBD_CtlError>
      break;
 80072a0:	bf00      	nop
  }

  return ret;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	889b      	ldrh	r3, [r3, #4]
 80072be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072c8:	2b40      	cmp	r3, #64	@ 0x40
 80072ca:	d007      	beq.n	80072dc <USBD_StdEPReq+0x30>
 80072cc:	2b40      	cmp	r3, #64	@ 0x40
 80072ce:	f200 817f 	bhi.w	80075d0 <USBD_StdEPReq+0x324>
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d02a      	beq.n	800732c <USBD_StdEPReq+0x80>
 80072d6:	2b20      	cmp	r3, #32
 80072d8:	f040 817a 	bne.w	80075d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7ff fe85 	bl	8006ff0 <USBD_CoreFindEP>
 80072e6:	4603      	mov	r3, r0
 80072e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072ea:	7b7b      	ldrb	r3, [r7, #13]
 80072ec:	2bff      	cmp	r3, #255	@ 0xff
 80072ee:	f000 8174 	beq.w	80075da <USBD_StdEPReq+0x32e>
 80072f2:	7b7b      	ldrb	r3, [r7, #13]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f040 8170 	bne.w	80075da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80072fa:	7b7a      	ldrb	r2, [r7, #13]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007302:	7b7a      	ldrb	r2, [r7, #13]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	32ae      	adds	r2, #174	@ 0xae
 8007308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	f000 8163 	beq.w	80075da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007314:	7b7a      	ldrb	r2, [r7, #13]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	32ae      	adds	r2, #174	@ 0xae
 800731a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	4798      	blx	r3
 8007326:	4603      	mov	r3, r0
 8007328:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800732a:	e156      	b.n	80075da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	785b      	ldrb	r3, [r3, #1]
 8007330:	2b03      	cmp	r3, #3
 8007332:	d008      	beq.n	8007346 <USBD_StdEPReq+0x9a>
 8007334:	2b03      	cmp	r3, #3
 8007336:	f300 8145 	bgt.w	80075c4 <USBD_StdEPReq+0x318>
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 809b 	beq.w	8007476 <USBD_StdEPReq+0x1ca>
 8007340:	2b01      	cmp	r3, #1
 8007342:	d03c      	beq.n	80073be <USBD_StdEPReq+0x112>
 8007344:	e13e      	b.n	80075c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d002      	beq.n	8007358 <USBD_StdEPReq+0xac>
 8007352:	2b03      	cmp	r3, #3
 8007354:	d016      	beq.n	8007384 <USBD_StdEPReq+0xd8>
 8007356:	e02c      	b.n	80073b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00d      	beq.n	800737a <USBD_StdEPReq+0xce>
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	2b80      	cmp	r3, #128	@ 0x80
 8007362:	d00a      	beq.n	800737a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f005 f98d 	bl	800c688 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800736e:	2180      	movs	r1, #128	@ 0x80
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f005 f989 	bl	800c688 <USBD_LL_StallEP>
 8007376:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007378:	e020      	b.n	80073bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fc7a 	bl	8007c76 <USBD_CtlError>
              break;
 8007382:	e01b      	b.n	80073bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	885b      	ldrh	r3, [r3, #2]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10e      	bne.n	80073aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00b      	beq.n	80073aa <USBD_StdEPReq+0xfe>
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	2b80      	cmp	r3, #128	@ 0x80
 8007396:	d008      	beq.n	80073aa <USBD_StdEPReq+0xfe>
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	88db      	ldrh	r3, [r3, #6]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d104      	bne.n	80073aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f005 f96f 	bl	800c688 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fd3a 	bl	8007e24 <USBD_CtlSendStatus>

              break;
 80073b0:	e004      	b.n	80073bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fc5e 	bl	8007c76 <USBD_CtlError>
              break;
 80073ba:	bf00      	nop
          }
          break;
 80073bc:	e107      	b.n	80075ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d002      	beq.n	80073d0 <USBD_StdEPReq+0x124>
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d016      	beq.n	80073fc <USBD_StdEPReq+0x150>
 80073ce:	e04b      	b.n	8007468 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00d      	beq.n	80073f2 <USBD_StdEPReq+0x146>
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	2b80      	cmp	r3, #128	@ 0x80
 80073da:	d00a      	beq.n	80073f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f005 f951 	bl	800c688 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073e6:	2180      	movs	r1, #128	@ 0x80
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f005 f94d 	bl	800c688 <USBD_LL_StallEP>
 80073ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073f0:	e040      	b.n	8007474 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fc3e 	bl	8007c76 <USBD_CtlError>
              break;
 80073fa:	e03b      	b.n	8007474 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	885b      	ldrh	r3, [r3, #2]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d136      	bne.n	8007472 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800740a:	2b00      	cmp	r3, #0
 800740c:	d004      	beq.n	8007418 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f005 f957 	bl	800c6c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fd03 	bl	8007e24 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff fde4 	bl	8006ff0 <USBD_CoreFindEP>
 8007428:	4603      	mov	r3, r0
 800742a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800742c:	7b7b      	ldrb	r3, [r7, #13]
 800742e:	2bff      	cmp	r3, #255	@ 0xff
 8007430:	d01f      	beq.n	8007472 <USBD_StdEPReq+0x1c6>
 8007432:	7b7b      	ldrb	r3, [r7, #13]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d11c      	bne.n	8007472 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007438:	7b7a      	ldrb	r2, [r7, #13]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007440:	7b7a      	ldrb	r2, [r7, #13]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	32ae      	adds	r2, #174	@ 0xae
 8007446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d010      	beq.n	8007472 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007450:	7b7a      	ldrb	r2, [r7, #13]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	32ae      	adds	r2, #174	@ 0xae
 8007456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	4798      	blx	r3
 8007462:	4603      	mov	r3, r0
 8007464:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007466:	e004      	b.n	8007472 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fc03 	bl	8007c76 <USBD_CtlError>
              break;
 8007470:	e000      	b.n	8007474 <USBD_StdEPReq+0x1c8>
              break;
 8007472:	bf00      	nop
          }
          break;
 8007474:	e0ab      	b.n	80075ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d002      	beq.n	8007488 <USBD_StdEPReq+0x1dc>
 8007482:	2b03      	cmp	r3, #3
 8007484:	d032      	beq.n	80074ec <USBD_StdEPReq+0x240>
 8007486:	e097      	b.n	80075b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d007      	beq.n	800749e <USBD_StdEPReq+0x1f2>
 800748e:	7bbb      	ldrb	r3, [r7, #14]
 8007490:	2b80      	cmp	r3, #128	@ 0x80
 8007492:	d004      	beq.n	800749e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fbed 	bl	8007c76 <USBD_CtlError>
                break;
 800749c:	e091      	b.n	80075c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800749e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	da0b      	bge.n	80074be <USBD_StdEPReq+0x212>
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074ac:	4613      	mov	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	3310      	adds	r3, #16
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	4413      	add	r3, r2
 80074ba:	3304      	adds	r3, #4
 80074bc:	e00b      	b.n	80074d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074be:	7bbb      	ldrb	r3, [r7, #14]
 80074c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074c4:	4613      	mov	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	4413      	add	r3, r2
 80074d4:	3304      	adds	r3, #4
 80074d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2202      	movs	r2, #2
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fc43 	bl	8007d70 <USBD_CtlSendData>
              break;
 80074ea:	e06a      	b.n	80075c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	da11      	bge.n	8007518 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
 80074f6:	f003 020f 	and.w	r2, r3, #15
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	4613      	mov	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4413      	add	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	440b      	add	r3, r1
 8007506:	3324      	adds	r3, #36	@ 0x24
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d117      	bne.n	800753e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fbb0 	bl	8007c76 <USBD_CtlError>
                  break;
 8007516:	e054      	b.n	80075c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	f003 020f 	and.w	r2, r3, #15
 800751e:	6879      	ldr	r1, [r7, #4]
 8007520:	4613      	mov	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	440b      	add	r3, r1
 800752a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800752e:	881b      	ldrh	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fb9d 	bl	8007c76 <USBD_CtlError>
                  break;
 800753c:	e041      	b.n	80075c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800753e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007542:	2b00      	cmp	r3, #0
 8007544:	da0b      	bge.n	800755e <USBD_StdEPReq+0x2b2>
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	3310      	adds	r3, #16
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	4413      	add	r3, r2
 800755a:	3304      	adds	r3, #4
 800755c:	e00b      	b.n	8007576 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800755e:	7bbb      	ldrb	r3, [r7, #14]
 8007560:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	4413      	add	r3, r2
 8007574:	3304      	adds	r3, #4
 8007576:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <USBD_StdEPReq+0x2d8>
 800757e:	7bbb      	ldrb	r3, [r7, #14]
 8007580:	2b80      	cmp	r3, #128	@ 0x80
 8007582:	d103      	bne.n	800758c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2200      	movs	r2, #0
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	e00e      	b.n	80075aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800758c:	7bbb      	ldrb	r3, [r7, #14]
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f005 f8b7 	bl	800c704 <USBD_LL_IsStallEP>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2201      	movs	r2, #1
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	e002      	b.n	80075aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2200      	movs	r2, #0
 80075a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2202      	movs	r2, #2
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fbdd 	bl	8007d70 <USBD_CtlSendData>
              break;
 80075b6:	e004      	b.n	80075c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fb5b 	bl	8007c76 <USBD_CtlError>
              break;
 80075c0:	bf00      	nop
          }
          break;
 80075c2:	e004      	b.n	80075ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fb55 	bl	8007c76 <USBD_CtlError>
          break;
 80075cc:	bf00      	nop
      }
      break;
 80075ce:	e005      	b.n	80075dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fb4f 	bl	8007c76 <USBD_CtlError>
      break;
 80075d8:	e000      	b.n	80075dc <USBD_StdEPReq+0x330>
      break;
 80075da:	bf00      	nop
  }

  return ret;
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	885b      	ldrh	r3, [r3, #2]
 8007602:	0a1b      	lsrs	r3, r3, #8
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b01      	subs	r3, #1
 8007608:	2b06      	cmp	r3, #6
 800760a:	f200 8128 	bhi.w	800785e <USBD_GetDescriptor+0x276>
 800760e:	a201      	add	r2, pc, #4	@ (adr r2, 8007614 <USBD_GetDescriptor+0x2c>)
 8007610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007614:	08007631 	.word	0x08007631
 8007618:	08007649 	.word	0x08007649
 800761c:	08007689 	.word	0x08007689
 8007620:	0800785f 	.word	0x0800785f
 8007624:	0800785f 	.word	0x0800785f
 8007628:	080077ff 	.word	0x080077ff
 800762c:	0800782b 	.word	0x0800782b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	7c12      	ldrb	r2, [r2, #16]
 800763c:	f107 0108 	add.w	r1, r7, #8
 8007640:	4610      	mov	r0, r2
 8007642:	4798      	blx	r3
 8007644:	60f8      	str	r0, [r7, #12]
      break;
 8007646:	e112      	b.n	800786e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	7c1b      	ldrb	r3, [r3, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10d      	bne.n	800766c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007658:	f107 0208 	add.w	r2, r7, #8
 800765c:	4610      	mov	r0, r2
 800765e:	4798      	blx	r3
 8007660:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	3301      	adds	r3, #1
 8007666:	2202      	movs	r2, #2
 8007668:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800766a:	e100      	b.n	800786e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007674:	f107 0208 	add.w	r2, r7, #8
 8007678:	4610      	mov	r0, r2
 800767a:	4798      	blx	r3
 800767c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3301      	adds	r3, #1
 8007682:	2202      	movs	r2, #2
 8007684:	701a      	strb	r2, [r3, #0]
      break;
 8007686:	e0f2      	b.n	800786e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	885b      	ldrh	r3, [r3, #2]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b05      	cmp	r3, #5
 8007690:	f200 80ac 	bhi.w	80077ec <USBD_GetDescriptor+0x204>
 8007694:	a201      	add	r2, pc, #4	@ (adr r2, 800769c <USBD_GetDescriptor+0xb4>)
 8007696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769a:	bf00      	nop
 800769c:	080076b5 	.word	0x080076b5
 80076a0:	080076e9 	.word	0x080076e9
 80076a4:	0800771d 	.word	0x0800771d
 80076a8:	08007751 	.word	0x08007751
 80076ac:	08007785 	.word	0x08007785
 80076b0:	080077b9 	.word	0x080077b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00b      	beq.n	80076d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	7c12      	ldrb	r2, [r2, #16]
 80076cc:	f107 0108 	add.w	r1, r7, #8
 80076d0:	4610      	mov	r0, r2
 80076d2:	4798      	blx	r3
 80076d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076d6:	e091      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 facb 	bl	8007c76 <USBD_CtlError>
            err++;
 80076e0:	7afb      	ldrb	r3, [r7, #11]
 80076e2:	3301      	adds	r3, #1
 80076e4:	72fb      	strb	r3, [r7, #11]
          break;
 80076e6:	e089      	b.n	80077fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	7c12      	ldrb	r2, [r2, #16]
 8007700:	f107 0108 	add.w	r1, r7, #8
 8007704:	4610      	mov	r0, r2
 8007706:	4798      	blx	r3
 8007708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800770a:	e077      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fab1 	bl	8007c76 <USBD_CtlError>
            err++;
 8007714:	7afb      	ldrb	r3, [r7, #11]
 8007716:	3301      	adds	r3, #1
 8007718:	72fb      	strb	r3, [r7, #11]
          break;
 800771a:	e06f      	b.n	80077fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00b      	beq.n	8007740 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	7c12      	ldrb	r2, [r2, #16]
 8007734:	f107 0108 	add.w	r1, r7, #8
 8007738:	4610      	mov	r0, r2
 800773a:	4798      	blx	r3
 800773c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800773e:	e05d      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fa97 	bl	8007c76 <USBD_CtlError>
            err++;
 8007748:	7afb      	ldrb	r3, [r7, #11]
 800774a:	3301      	adds	r3, #1
 800774c:	72fb      	strb	r3, [r7, #11]
          break;
 800774e:	e055      	b.n	80077fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00b      	beq.n	8007774 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	7c12      	ldrb	r2, [r2, #16]
 8007768:	f107 0108 	add.w	r1, r7, #8
 800776c:	4610      	mov	r0, r2
 800776e:	4798      	blx	r3
 8007770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007772:	e043      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fa7d 	bl	8007c76 <USBD_CtlError>
            err++;
 800777c:	7afb      	ldrb	r3, [r7, #11]
 800777e:	3301      	adds	r3, #1
 8007780:	72fb      	strb	r3, [r7, #11]
          break;
 8007782:	e03b      	b.n	80077fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00b      	beq.n	80077a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	7c12      	ldrb	r2, [r2, #16]
 800779c:	f107 0108 	add.w	r1, r7, #8
 80077a0:	4610      	mov	r0, r2
 80077a2:	4798      	blx	r3
 80077a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077a6:	e029      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fa63 	bl	8007c76 <USBD_CtlError>
            err++;
 80077b0:	7afb      	ldrb	r3, [r7, #11]
 80077b2:	3301      	adds	r3, #1
 80077b4:	72fb      	strb	r3, [r7, #11]
          break;
 80077b6:	e021      	b.n	80077fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	7c12      	ldrb	r2, [r2, #16]
 80077d0:	f107 0108 	add.w	r1, r7, #8
 80077d4:	4610      	mov	r0, r2
 80077d6:	4798      	blx	r3
 80077d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077da:	e00f      	b.n	80077fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa49 	bl	8007c76 <USBD_CtlError>
            err++;
 80077e4:	7afb      	ldrb	r3, [r7, #11]
 80077e6:	3301      	adds	r3, #1
 80077e8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ea:	e007      	b.n	80077fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fa41 	bl	8007c76 <USBD_CtlError>
          err++;
 80077f4:	7afb      	ldrb	r3, [r7, #11]
 80077f6:	3301      	adds	r3, #1
 80077f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80077fa:	bf00      	nop
      }
      break;
 80077fc:	e037      	b.n	800786e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	7c1b      	ldrb	r3, [r3, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d109      	bne.n	800781a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800780c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800780e:	f107 0208 	add.w	r2, r7, #8
 8007812:	4610      	mov	r0, r2
 8007814:	4798      	blx	r3
 8007816:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007818:	e029      	b.n	800786e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fa2a 	bl	8007c76 <USBD_CtlError>
        err++;
 8007822:	7afb      	ldrb	r3, [r7, #11]
 8007824:	3301      	adds	r3, #1
 8007826:	72fb      	strb	r3, [r7, #11]
      break;
 8007828:	e021      	b.n	800786e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7c1b      	ldrb	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10d      	bne.n	800784e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783a:	f107 0208 	add.w	r2, r7, #8
 800783e:	4610      	mov	r0, r2
 8007840:	4798      	blx	r3
 8007842:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3301      	adds	r3, #1
 8007848:	2207      	movs	r2, #7
 800784a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800784c:	e00f      	b.n	800786e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fa10 	bl	8007c76 <USBD_CtlError>
        err++;
 8007856:	7afb      	ldrb	r3, [r7, #11]
 8007858:	3301      	adds	r3, #1
 800785a:	72fb      	strb	r3, [r7, #11]
      break;
 800785c:	e007      	b.n	800786e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fa08 	bl	8007c76 <USBD_CtlError>
      err++;
 8007866:	7afb      	ldrb	r3, [r7, #11]
 8007868:	3301      	adds	r3, #1
 800786a:	72fb      	strb	r3, [r7, #11]
      break;
 800786c:	bf00      	nop
  }

  if (err != 0U)
 800786e:	7afb      	ldrb	r3, [r7, #11]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d11e      	bne.n	80078b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	88db      	ldrh	r3, [r3, #6]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d016      	beq.n	80078aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800787c:	893b      	ldrh	r3, [r7, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00e      	beq.n	80078a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	88da      	ldrh	r2, [r3, #6]
 8007886:	893b      	ldrh	r3, [r7, #8]
 8007888:	4293      	cmp	r3, r2
 800788a:	bf28      	it	cs
 800788c:	4613      	movcs	r3, r2
 800788e:	b29b      	uxth	r3, r3
 8007890:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007892:	893b      	ldrh	r3, [r7, #8]
 8007894:	461a      	mov	r2, r3
 8007896:	68f9      	ldr	r1, [r7, #12]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fa69 	bl	8007d70 <USBD_CtlSendData>
 800789e:	e009      	b.n	80078b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f9e7 	bl	8007c76 <USBD_CtlError>
 80078a8:	e004      	b.n	80078b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 faba 	bl	8007e24 <USBD_CtlSendStatus>
 80078b0:	e000      	b.n	80078b4 <USBD_GetDescriptor+0x2cc>
    return;
 80078b2:	bf00      	nop
  }
}
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop

080078bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	889b      	ldrh	r3, [r3, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d131      	bne.n	8007932 <USBD_SetAddress+0x76>
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	88db      	ldrh	r3, [r3, #6]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d12d      	bne.n	8007932 <USBD_SetAddress+0x76>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	885b      	ldrh	r3, [r3, #2]
 80078da:	2b7f      	cmp	r3, #127	@ 0x7f
 80078dc:	d829      	bhi.n	8007932 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	885b      	ldrh	r3, [r3, #2]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	d104      	bne.n	8007900 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f9bc 	bl	8007c76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078fe:	e01d      	b.n	800793c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	7bfa      	ldrb	r2, [r7, #15]
 8007904:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f004 ff25 	bl	800c75c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fa86 	bl	8007e24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d004      	beq.n	8007928 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2202      	movs	r2, #2
 8007922:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007926:	e009      	b.n	800793c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007930:	e004      	b.n	800793c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f99e 	bl	8007c76 <USBD_CtlError>
  }
}
 800793a:	bf00      	nop
 800793c:	bf00      	nop
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	885b      	ldrh	r3, [r3, #2]
 8007956:	b2da      	uxtb	r2, r3
 8007958:	4b4e      	ldr	r3, [pc, #312]	@ (8007a94 <USBD_SetConfig+0x150>)
 800795a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800795c:	4b4d      	ldr	r3, [pc, #308]	@ (8007a94 <USBD_SetConfig+0x150>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d905      	bls.n	8007970 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f985 	bl	8007c76 <USBD_CtlError>
    return USBD_FAIL;
 800796c:	2303      	movs	r3, #3
 800796e:	e08c      	b.n	8007a8a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d002      	beq.n	8007982 <USBD_SetConfig+0x3e>
 800797c:	2b03      	cmp	r3, #3
 800797e:	d029      	beq.n	80079d4 <USBD_SetConfig+0x90>
 8007980:	e075      	b.n	8007a6e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007982:	4b44      	ldr	r3, [pc, #272]	@ (8007a94 <USBD_SetConfig+0x150>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d020      	beq.n	80079cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800798a:	4b42      	ldr	r3, [pc, #264]	@ (8007a94 <USBD_SetConfig+0x150>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007994:	4b3f      	ldr	r3, [pc, #252]	@ (8007a94 <USBD_SetConfig+0x150>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7fe ffe3 	bl	8006966 <USBD_SetClassConfig>
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d008      	beq.n	80079bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f962 	bl	8007c76 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2202      	movs	r2, #2
 80079b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079ba:	e065      	b.n	8007a88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fa31 	bl	8007e24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2203      	movs	r2, #3
 80079c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80079ca:	e05d      	b.n	8007a88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fa29 	bl	8007e24 <USBD_CtlSendStatus>
      break;
 80079d2:	e059      	b.n	8007a88 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079d4:	4b2f      	ldr	r3, [pc, #188]	@ (8007a94 <USBD_SetConfig+0x150>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d112      	bne.n	8007a02 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80079e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007a94 <USBD_SetConfig+0x150>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	461a      	mov	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079ee:	4b29      	ldr	r3, [pc, #164]	@ (8007a94 <USBD_SetConfig+0x150>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7fe ffd2 	bl	800699e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fa12 	bl	8007e24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a00:	e042      	b.n	8007a88 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007a02:	4b24      	ldr	r3, [pc, #144]	@ (8007a94 <USBD_SetConfig+0x150>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d02a      	beq.n	8007a66 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7fe ffc0 	bl	800699e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007a94 <USBD_SetConfig+0x150>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a28:	4b1a      	ldr	r3, [pc, #104]	@ (8007a94 <USBD_SetConfig+0x150>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7fe ff99 	bl	8006966 <USBD_SetClassConfig>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00f      	beq.n	8007a5e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f918 	bl	8007c76 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7fe ffa5 	bl	800699e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a5c:	e014      	b.n	8007a88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f9e0 	bl	8007e24 <USBD_CtlSendStatus>
      break;
 8007a64:	e010      	b.n	8007a88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f9dc 	bl	8007e24 <USBD_CtlSendStatus>
      break;
 8007a6c:	e00c      	b.n	8007a88 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f900 	bl	8007c76 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a76:	4b07      	ldr	r3, [pc, #28]	@ (8007a94 <USBD_SetConfig+0x150>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7fe ff8e 	bl	800699e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a82:	2303      	movs	r3, #3
 8007a84:	73fb      	strb	r3, [r7, #15]
      break;
 8007a86:	bf00      	nop
  }

  return ret;
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	200002ac 	.word	0x200002ac

08007a98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	88db      	ldrh	r3, [r3, #6]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d004      	beq.n	8007ab4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f8e2 	bl	8007c76 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007ab2:	e023      	b.n	8007afc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	dc02      	bgt.n	8007ac6 <USBD_GetConfig+0x2e>
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	dc03      	bgt.n	8007acc <USBD_GetConfig+0x34>
 8007ac4:	e015      	b.n	8007af2 <USBD_GetConfig+0x5a>
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d00b      	beq.n	8007ae2 <USBD_GetConfig+0x4a>
 8007aca:	e012      	b.n	8007af2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f948 	bl	8007d70 <USBD_CtlSendData>
        break;
 8007ae0:	e00c      	b.n	8007afc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f940 	bl	8007d70 <USBD_CtlSendData>
        break;
 8007af0:	e004      	b.n	8007afc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f8be 	bl	8007c76 <USBD_CtlError>
        break;
 8007afa:	bf00      	nop
}
 8007afc:	bf00      	nop
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d81e      	bhi.n	8007b5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	88db      	ldrh	r3, [r3, #6]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d004      	beq.n	8007b2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f8a5 	bl	8007c76 <USBD_CtlError>
        break;
 8007b2c:	e01a      	b.n	8007b64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d005      	beq.n	8007b4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f043 0202 	orr.w	r2, r3, #2
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	330c      	adds	r3, #12
 8007b4e:	2202      	movs	r2, #2
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f90c 	bl	8007d70 <USBD_CtlSendData>
      break;
 8007b58:	e004      	b.n	8007b64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f88a 	bl	8007c76 <USBD_CtlError>
      break;
 8007b62:	bf00      	nop
  }
}
 8007b64:	bf00      	nop
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	885b      	ldrh	r3, [r3, #2]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d107      	bne.n	8007b8e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f94c 	bl	8007e24 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007b8c:	e013      	b.n	8007bb6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	885b      	ldrh	r3, [r3, #2]
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d10b      	bne.n	8007bae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	889b      	ldrh	r3, [r3, #4]
 8007b9a:	0a1b      	lsrs	r3, r3, #8
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f93c 	bl	8007e24 <USBD_CtlSendStatus>
}
 8007bac:	e003      	b.n	8007bb6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f860 	bl	8007c76 <USBD_CtlError>
}
 8007bb6:	bf00      	nop
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d80b      	bhi.n	8007bee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	885b      	ldrh	r3, [r3, #2]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d10c      	bne.n	8007bf8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f91c 	bl	8007e24 <USBD_CtlSendStatus>
      }
      break;
 8007bec:	e004      	b.n	8007bf8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f840 	bl	8007c76 <USBD_CtlError>
      break;
 8007bf6:	e000      	b.n	8007bfa <USBD_ClrFeature+0x3c>
      break;
 8007bf8:	bf00      	nop
  }
}
 8007bfa:	bf00      	nop
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	781a      	ldrb	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	781a      	ldrb	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7ff fa40 	bl	80070b2 <SWAPBYTE>
 8007c32:	4603      	mov	r3, r0
 8007c34:	461a      	mov	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3301      	adds	r3, #1
 8007c44:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f7ff fa33 	bl	80070b2 <SWAPBYTE>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	461a      	mov	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3301      	adds	r3, #1
 8007c58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f7ff fa26 	bl	80070b2 <SWAPBYTE>
 8007c66:	4603      	mov	r3, r0
 8007c68:	461a      	mov	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	80da      	strh	r2, [r3, #6]
}
 8007c6e:	bf00      	nop
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b082      	sub	sp, #8
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c80:	2180      	movs	r1, #128	@ 0x80
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f004 fd00 	bl	800c688 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c88:	2100      	movs	r1, #0
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f004 fcfc 	bl	800c688 <USBD_LL_StallEP>
}
 8007c90:	bf00      	nop
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d042      	beq.n	8007d34 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007cb2:	6938      	ldr	r0, [r7, #16]
 8007cb4:	f000 f842 	bl	8007d3c <USBD_GetLen>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	3301      	adds	r3, #1
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cc2:	d808      	bhi.n	8007cd6 <USBD_GetString+0x3e>
 8007cc4:	6938      	ldr	r0, [r7, #16]
 8007cc6:	f000 f839 	bl	8007d3c <USBD_GetLen>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	3301      	adds	r3, #1
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	e001      	b.n	8007cda <USBD_GetString+0x42>
 8007cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	7812      	ldrb	r2, [r2, #0]
 8007ce8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	3301      	adds	r3, #1
 8007cee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	2203      	movs	r2, #3
 8007cf8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d00:	e013      	b.n	8007d2a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007d02:	7dfb      	ldrb	r3, [r7, #23]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	4413      	add	r3, r2
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	7812      	ldrb	r2, [r2, #0]
 8007d0c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	3301      	adds	r3, #1
 8007d12:	613b      	str	r3, [r7, #16]
    idx++;
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	3301      	adds	r3, #1
 8007d18:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	4413      	add	r3, r2
 8007d20:	2200      	movs	r2, #0
 8007d22:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
 8007d26:	3301      	adds	r3, #1
 8007d28:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e7      	bne.n	8007d02 <USBD_GetString+0x6a>
 8007d32:	e000      	b.n	8007d36 <USBD_GetString+0x9e>
    return;
 8007d34:	bf00      	nop
  }
}
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d4c:	e005      	b.n	8007d5a <USBD_GetLen+0x1e>
  {
    len++;
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	3301      	adds	r3, #1
 8007d52:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	3301      	adds	r3, #1
 8007d58:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f5      	bne.n	8007d4e <USBD_GetLen+0x12>
  }

  return len;
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	2100      	movs	r1, #0
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f004 fcff 	bl	800c79a <USBD_LL_Transmit>

  return USBD_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b084      	sub	sp, #16
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	2100      	movs	r1, #0
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f004 fcee 	bl	800c79a <USBD_LL_Transmit>

  return USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2203      	movs	r2, #3
 8007dd8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	2100      	movs	r1, #0
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f004 fcf2 	bl	800c7dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b084      	sub	sp, #16
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	2100      	movs	r1, #0
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f004 fce1 	bl	800c7dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2204      	movs	r2, #4
 8007e30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e34:	2300      	movs	r3, #0
 8007e36:	2200      	movs	r2, #0
 8007e38:	2100      	movs	r1, #0
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f004 fcad 	bl	800c79a <USBD_LL_Transmit>

  return USBD_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2205      	movs	r2, #5
 8007e56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	2100      	movs	r1, #0
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f004 fcbb 	bl	800c7dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <__NVIC_SetPriority>:
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	6039      	str	r1, [r7, #0]
 8007e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	db0a      	blt.n	8007e9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	490c      	ldr	r1, [pc, #48]	@ (8007ebc <__NVIC_SetPriority+0x4c>)
 8007e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e8e:	0112      	lsls	r2, r2, #4
 8007e90:	b2d2      	uxtb	r2, r2
 8007e92:	440b      	add	r3, r1
 8007e94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007e98:	e00a      	b.n	8007eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	4908      	ldr	r1, [pc, #32]	@ (8007ec0 <__NVIC_SetPriority+0x50>)
 8007ea0:	79fb      	ldrb	r3, [r7, #7]
 8007ea2:	f003 030f 	and.w	r3, r3, #15
 8007ea6:	3b04      	subs	r3, #4
 8007ea8:	0112      	lsls	r2, r2, #4
 8007eaa:	b2d2      	uxtb	r2, r2
 8007eac:	440b      	add	r3, r1
 8007eae:	761a      	strb	r2, [r3, #24]
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	e000e100 	.word	0xe000e100
 8007ec0:	e000ed00 	.word	0xe000ed00

08007ec4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007ec8:	4b05      	ldr	r3, [pc, #20]	@ (8007ee0 <SysTick_Handler+0x1c>)
 8007eca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007ecc:	f002 fe60 	bl	800ab90 <xTaskGetSchedulerState>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d001      	beq.n	8007eda <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007ed6:	f003 fd8f 	bl	800b9f8 <xPortSysTickHandler>
  }
}
 8007eda:	bf00      	nop
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	e000e010 	.word	0xe000e010

08007ee4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007ee8:	2100      	movs	r1, #0
 8007eea:	f06f 0004 	mvn.w	r0, #4
 8007eee:	f7ff ffbf 	bl	8007e70 <__NVIC_SetPriority>
#endif
}
 8007ef2:	bf00      	nop
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007efe:	f3ef 8305 	mrs	r3, IPSR
 8007f02:	603b      	str	r3, [r7, #0]
  return(result);
 8007f04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007f0a:	f06f 0305 	mvn.w	r3, #5
 8007f0e:	607b      	str	r3, [r7, #4]
 8007f10:	e00c      	b.n	8007f2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f12:	4b0a      	ldr	r3, [pc, #40]	@ (8007f3c <osKernelInitialize+0x44>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d105      	bne.n	8007f26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f1a:	4b08      	ldr	r3, [pc, #32]	@ (8007f3c <osKernelInitialize+0x44>)
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	607b      	str	r3, [r7, #4]
 8007f24:	e002      	b.n	8007f2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f26:	f04f 33ff 	mov.w	r3, #4294967295
 8007f2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f2c:	687b      	ldr	r3, [r7, #4]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	200002b0 	.word	0x200002b0

08007f40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f46:	f3ef 8305 	mrs	r3, IPSR
 8007f4a:	603b      	str	r3, [r7, #0]
  return(result);
 8007f4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007f52:	f06f 0305 	mvn.w	r3, #5
 8007f56:	607b      	str	r3, [r7, #4]
 8007f58:	e010      	b.n	8007f7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f88 <osKernelStart+0x48>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d109      	bne.n	8007f76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007f62:	f7ff ffbf 	bl	8007ee4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007f66:	4b08      	ldr	r3, [pc, #32]	@ (8007f88 <osKernelStart+0x48>)
 8007f68:	2202      	movs	r2, #2
 8007f6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f6c:	f002 f8fa 	bl	800a164 <vTaskStartScheduler>
      stat = osOK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	607b      	str	r3, [r7, #4]
 8007f74:	e002      	b.n	8007f7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007f76:	f04f 33ff 	mov.w	r3, #4294967295
 8007f7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f7c:	687b      	ldr	r3, [r7, #4]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	200002b0 	.word	0x200002b0

08007f8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b08e      	sub	sp, #56	@ 0x38
 8007f90:	af04      	add	r7, sp, #16
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f9c:	f3ef 8305 	mrs	r3, IPSR
 8007fa0:	617b      	str	r3, [r7, #20]
  return(result);
 8007fa2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d17e      	bne.n	80080a6 <osThreadNew+0x11a>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d07b      	beq.n	80080a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007fae:	2380      	movs	r3, #128	@ 0x80
 8007fb0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007fb2:	2318      	movs	r3, #24
 8007fb4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007fba:	f04f 33ff 	mov.w	r3, #4294967295
 8007fbe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d045      	beq.n	8008052 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <osThreadNew+0x48>
        name = attr->name;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d002      	beq.n	8007fe2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d008      	beq.n	8007ffa <osThreadNew+0x6e>
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	2b38      	cmp	r3, #56	@ 0x38
 8007fec:	d805      	bhi.n	8007ffa <osThreadNew+0x6e>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <osThreadNew+0x72>
        return (NULL);
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e054      	b.n	80080a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	089b      	lsrs	r3, r3, #2
 800800c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00e      	beq.n	8008034 <osThreadNew+0xa8>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	2ba7      	cmp	r3, #167	@ 0xa7
 800801c:	d90a      	bls.n	8008034 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008022:	2b00      	cmp	r3, #0
 8008024:	d006      	beq.n	8008034 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <osThreadNew+0xa8>
        mem = 1;
 800802e:	2301      	movs	r3, #1
 8008030:	61bb      	str	r3, [r7, #24]
 8008032:	e010      	b.n	8008056 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10c      	bne.n	8008056 <osThreadNew+0xca>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d108      	bne.n	8008056 <osThreadNew+0xca>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d104      	bne.n	8008056 <osThreadNew+0xca>
          mem = 0;
 800804c:	2300      	movs	r3, #0
 800804e:	61bb      	str	r3, [r7, #24]
 8008050:	e001      	b.n	8008056 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d110      	bne.n	800807e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008064:	9202      	str	r2, [sp, #8]
 8008066:	9301      	str	r3, [sp, #4]
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	6a3a      	ldr	r2, [r7, #32]
 8008070:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f001 fe82 	bl	8009d7c <xTaskCreateStatic>
 8008078:	4603      	mov	r3, r0
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	e013      	b.n	80080a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d110      	bne.n	80080a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	b29a      	uxth	r2, r3
 8008088:	f107 0310 	add.w	r3, r7, #16
 800808c:	9301      	str	r3, [sp, #4]
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f001 fed0 	bl	8009e3c <xTaskCreate>
 800809c:	4603      	mov	r3, r0
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d001      	beq.n	80080a6 <osThreadNew+0x11a>
            hTask = NULL;
 80080a2:	2300      	movs	r3, #0
 80080a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80080a6:	693b      	ldr	r3, [r7, #16]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3728      	adds	r7, #40	@ 0x28
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080b8:	f3ef 8305 	mrs	r3, IPSR
 80080bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80080be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <osDelay+0x1c>
    stat = osErrorISR;
 80080c4:	f06f 0305 	mvn.w	r3, #5
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	e007      	b.n	80080dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f002 f80e 	bl	800a0f8 <vTaskDelay>
    }
  }

  return (stat);
 80080dc:	68fb      	ldr	r3, [r7, #12]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b086      	sub	sp, #24
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080f2:	f3ef 8305 	mrs	r3, IPSR
 80080f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80080f8:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d12d      	bne.n	800815a <osEventFlagsNew+0x74>
    mem = -1;
 80080fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008102:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d015      	beq.n	8008136 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d006      	beq.n	8008120 <osEventFlagsNew+0x3a>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	2b1f      	cmp	r3, #31
 8008118:	d902      	bls.n	8008120 <osEventFlagsNew+0x3a>
        mem = 1;
 800811a:	2301      	movs	r3, #1
 800811c:	613b      	str	r3, [r7, #16]
 800811e:	e00c      	b.n	800813a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d108      	bne.n	800813a <osEventFlagsNew+0x54>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d104      	bne.n	800813a <osEventFlagsNew+0x54>
          mem = 0;
 8008130:	2300      	movs	r3, #0
 8008132:	613b      	str	r3, [r7, #16]
 8008134:	e001      	b.n	800813a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d106      	bne.n	800814e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	4618      	mov	r0, r3
 8008146:	f000 fb59 	bl	80087fc <xEventGroupCreateStatic>
 800814a:	6178      	str	r0, [r7, #20]
 800814c:	e005      	b.n	800815a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d102      	bne.n	800815a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8008154:	f000 fb8b 	bl	800886e <xEventGroupCreate>
 8008158:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800815a:	697b      	ldr	r3, [r7, #20]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d003      	beq.n	8008180 <osEventFlagsSet+0x1c>
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800817e:	d303      	bcc.n	8008188 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8008180:	f06f 0303 	mvn.w	r3, #3
 8008184:	617b      	str	r3, [r7, #20]
 8008186:	e028      	b.n	80081da <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008188:	f3ef 8305 	mrs	r3, IPSR
 800818c:	60fb      	str	r3, [r7, #12]
  return(result);
 800818e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008190:	2b00      	cmp	r3, #0
 8008192:	d01d      	beq.n	80081d0 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8008194:	2300      	movs	r3, #0
 8008196:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8008198:	f107 0308 	add.w	r3, r7, #8
 800819c:	461a      	mov	r2, r3
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6938      	ldr	r0, [r7, #16]
 80081a2:	f000 fd8b 	bl	8008cbc <xEventGroupSetBitsFromISR>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d103      	bne.n	80081b4 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 80081ac:	f06f 0302 	mvn.w	r3, #2
 80081b0:	617b      	str	r3, [r7, #20]
 80081b2:	e012      	b.n	80081da <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00d      	beq.n	80081da <osEventFlagsSet+0x76>
 80081be:	4b09      	ldr	r3, [pc, #36]	@ (80081e4 <osEventFlagsSet+0x80>)
 80081c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	e004      	b.n	80081da <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6938      	ldr	r0, [r7, #16]
 80081d4:	f000 fcaa 	bl	8008b2c <xEventGroupSetBits>
 80081d8:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80081da:	697b      	ldr	r3, [r7, #20]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	e000ed04 	.word	0xe000ed04

080081e8 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d003      	beq.n	8008204 <osEventFlagsClear+0x1c>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008202:	d303      	bcc.n	800820c <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 8008204:	f06f 0303 	mvn.w	r3, #3
 8008208:	617b      	str	r3, [r7, #20]
 800820a:	e019      	b.n	8008240 <osEventFlagsClear+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800820c:	f3ef 8305 	mrs	r3, IPSR
 8008210:	60fb      	str	r3, [r7, #12]
  return(result);
 8008212:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00e      	beq.n	8008236 <osEventFlagsClear+0x4e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8008218:	6938      	ldr	r0, [r7, #16]
 800821a:	f000 fc63 	bl	8008ae4 <xEventGroupGetBitsFromISR>
 800821e:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8008220:	6839      	ldr	r1, [r7, #0]
 8008222:	6938      	ldr	r0, [r7, #16]
 8008224:	f000 fc4a 	bl	8008abc <xEventGroupClearBitsFromISR>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d108      	bne.n	8008240 <osEventFlagsClear+0x58>
      rflags = (uint32_t)osErrorResource;
 800822e:	f06f 0302 	mvn.w	r3, #2
 8008232:	617b      	str	r3, [r7, #20]
 8008234:	e004      	b.n	8008240 <osEventFlagsClear+0x58>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6938      	ldr	r0, [r7, #16]
 800823a:	f000 fc05 	bl	8008a48 <xEventGroupClearBits>
 800823e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8008240:	697b      	ldr	r3, [r7, #20]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800824a:	b580      	push	{r7, lr}
 800824c:	b08c      	sub	sp, #48	@ 0x30
 800824e:	af02      	add	r7, sp, #8
 8008250:	60f8      	str	r0, [r7, #12]
 8008252:	60b9      	str	r1, [r7, #8]
 8008254:	607a      	str	r2, [r7, #4]
 8008256:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <osEventFlagsWait+0x20>
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008268:	d303      	bcc.n	8008272 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800826a:	f06f 0303 	mvn.w	r3, #3
 800826e:	61fb      	str	r3, [r7, #28]
 8008270:	e04b      	b.n	800830a <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008272:	f3ef 8305 	mrs	r3, IPSR
 8008276:	617b      	str	r3, [r7, #20]
  return(result);
 8008278:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 800827e:	f06f 0305 	mvn.w	r3, #5
 8008282:	61fb      	str	r3, [r7, #28]
 8008284:	e041      	b.n	800830a <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	2b00      	cmp	r3, #0
 800828e:	d002      	beq.n	8008296 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8008290:	2301      	movs	r3, #1
 8008292:	627b      	str	r3, [r7, #36]	@ 0x24
 8008294:	e001      	b.n	800829a <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8008296:	2300      	movs	r3, #0
 8008298:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	623b      	str	r3, [r7, #32]
 80082a8:	e001      	b.n	80082ae <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 80082aa:	2301      	movs	r3, #1
 80082ac:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b4:	6a3a      	ldr	r2, [r7, #32]
 80082b6:	68b9      	ldr	r1, [r7, #8]
 80082b8:	69b8      	ldr	r0, [r7, #24]
 80082ba:	f000 faf3 	bl	80088a4 <xEventGroupWaitBits>
 80082be:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f003 0301 	and.w	r3, r3, #1
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d010      	beq.n	80082ec <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	4013      	ands	r3, r2
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d019      	beq.n	800830a <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 80082dc:	f06f 0301 	mvn.w	r3, #1
 80082e0:	61fb      	str	r3, [r7, #28]
 80082e2:	e012      	b.n	800830a <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 80082e4:	f06f 0302 	mvn.w	r3, #2
 80082e8:	61fb      	str	r3, [r7, #28]
 80082ea:	e00e      	b.n	800830a <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	4013      	ands	r3, r2
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d109      	bne.n	800830a <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 80082fc:	f06f 0301 	mvn.w	r3, #1
 8008300:	61fb      	str	r3, [r7, #28]
 8008302:	e002      	b.n	800830a <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8008304:	f06f 0302 	mvn.w	r3, #2
 8008308:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800830a:	69fb      	ldr	r3, [r7, #28]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3728      	adds	r7, #40	@ 0x28
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800831c:	2300      	movs	r3, #0
 800831e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008320:	f3ef 8305 	mrs	r3, IPSR
 8008324:	60bb      	str	r3, [r7, #8]
  return(result);
 8008326:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008328:	2b00      	cmp	r3, #0
 800832a:	d174      	bne.n	8008416 <osMutexNew+0x102>
    if (attr != NULL) {
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <osMutexNew+0x26>
      type = attr->attr_bits;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	61bb      	str	r3, [r7, #24]
 8008338:	e001      	b.n	800833e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	d002      	beq.n	800834e <osMutexNew+0x3a>
      rmtx = 1U;
 8008348:	2301      	movs	r3, #1
 800834a:	617b      	str	r3, [r7, #20]
 800834c:	e001      	b.n	8008352 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	f003 0308 	and.w	r3, r3, #8
 8008358:	2b00      	cmp	r3, #0
 800835a:	d15c      	bne.n	8008416 <osMutexNew+0x102>
      mem = -1;
 800835c:	f04f 33ff 	mov.w	r3, #4294967295
 8008360:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d015      	beq.n	8008394 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d006      	beq.n	800837e <osMutexNew+0x6a>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	2b4f      	cmp	r3, #79	@ 0x4f
 8008376:	d902      	bls.n	800837e <osMutexNew+0x6a>
          mem = 1;
 8008378:	2301      	movs	r3, #1
 800837a:	613b      	str	r3, [r7, #16]
 800837c:	e00c      	b.n	8008398 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d108      	bne.n	8008398 <osMutexNew+0x84>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d104      	bne.n	8008398 <osMutexNew+0x84>
            mem = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	613b      	str	r3, [r7, #16]
 8008392:	e001      	b.n	8008398 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d112      	bne.n	80083c4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d007      	beq.n	80083b4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	4619      	mov	r1, r3
 80083aa:	2004      	movs	r0, #4
 80083ac:	f000 fec5 	bl	800913a <xQueueCreateMutexStatic>
 80083b0:	61f8      	str	r0, [r7, #28]
 80083b2:	e016      	b.n	80083e2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	4619      	mov	r1, r3
 80083ba:	2001      	movs	r0, #1
 80083bc:	f000 febd 	bl	800913a <xQueueCreateMutexStatic>
 80083c0:	61f8      	str	r0, [r7, #28]
 80083c2:	e00e      	b.n	80083e2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10b      	bne.n	80083e2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d004      	beq.n	80083da <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80083d0:	2004      	movs	r0, #4
 80083d2:	f000 fe9a 	bl	800910a <xQueueCreateMutex>
 80083d6:	61f8      	str	r0, [r7, #28]
 80083d8:	e003      	b.n	80083e2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80083da:	2001      	movs	r0, #1
 80083dc:	f000 fe95 	bl	800910a <xQueueCreateMutex>
 80083e0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00c      	beq.n	8008402 <osMutexNew+0xee>
        if (attr != NULL) {
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <osMutexNew+0xe2>
          name = attr->name;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	e001      	b.n	80083fa <osMutexNew+0xe6>
        } else {
          name = NULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80083fa:	68f9      	ldr	r1, [r7, #12]
 80083fc:	69f8      	ldr	r0, [r7, #28]
 80083fe:	f001 fc5f 	bl	8009cc0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d006      	beq.n	8008416 <osMutexNew+0x102>
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	f043 0301 	orr.w	r3, r3, #1
 8008414:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008416:	69fb      	ldr	r3, [r7, #28]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3720      	adds	r7, #32
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f023 0301 	bic.w	r3, r3, #1
 8008430:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800843a:	2300      	movs	r3, #0
 800843c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800843e:	f3ef 8305 	mrs	r3, IPSR
 8008442:	60bb      	str	r3, [r7, #8]
  return(result);
 8008444:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800844a:	f06f 0305 	mvn.w	r3, #5
 800844e:	617b      	str	r3, [r7, #20]
 8008450:	e02c      	b.n	80084ac <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d103      	bne.n	8008460 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008458:	f06f 0303 	mvn.w	r3, #3
 800845c:	617b      	str	r3, [r7, #20]
 800845e:	e025      	b.n	80084ac <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d011      	beq.n	800848a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6938      	ldr	r0, [r7, #16]
 800846a:	f000 feb6 	bl	80091da <xQueueTakeMutexRecursive>
 800846e:	4603      	mov	r3, r0
 8008470:	2b01      	cmp	r3, #1
 8008472:	d01b      	beq.n	80084ac <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800847a:	f06f 0301 	mvn.w	r3, #1
 800847e:	617b      	str	r3, [r7, #20]
 8008480:	e014      	b.n	80084ac <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008482:	f06f 0302 	mvn.w	r3, #2
 8008486:	617b      	str	r3, [r7, #20]
 8008488:	e010      	b.n	80084ac <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6938      	ldr	r0, [r7, #16]
 800848e:	f001 f95d 	bl	800974c <xQueueSemaphoreTake>
 8008492:	4603      	mov	r3, r0
 8008494:	2b01      	cmp	r3, #1
 8008496:	d009      	beq.n	80084ac <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800849e:	f06f 0301 	mvn.w	r3, #1
 80084a2:	617b      	str	r3, [r7, #20]
 80084a4:	e002      	b.n	80084ac <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80084a6:	f06f 0302 	mvn.w	r3, #2
 80084aa:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80084ac:	697b      	ldr	r3, [r7, #20]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b086      	sub	sp, #24
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f023 0301 	bic.w	r3, r3, #1
 80084c4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084d2:	f3ef 8305 	mrs	r3, IPSR
 80084d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80084d8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <osMutexRelease+0x30>
    stat = osErrorISR;
 80084de:	f06f 0305 	mvn.w	r3, #5
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	e01f      	b.n	8008526 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d103      	bne.n	80084f4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80084ec:	f06f 0303 	mvn.w	r3, #3
 80084f0:	617b      	str	r3, [r7, #20]
 80084f2:	e018      	b.n	8008526 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d009      	beq.n	800850e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80084fa:	6938      	ldr	r0, [r7, #16]
 80084fc:	f000 fe38 	bl	8009170 <xQueueGiveMutexRecursive>
 8008500:	4603      	mov	r3, r0
 8008502:	2b01      	cmp	r3, #1
 8008504:	d00f      	beq.n	8008526 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008506:	f06f 0302 	mvn.w	r3, #2
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	e00b      	b.n	8008526 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800850e:	2300      	movs	r3, #0
 8008510:	2200      	movs	r2, #0
 8008512:	2100      	movs	r1, #0
 8008514:	6938      	ldr	r0, [r7, #16]
 8008516:	f000 fe97 	bl	8009248 <xQueueGenericSend>
 800851a:	4603      	mov	r3, r0
 800851c:	2b01      	cmp	r3, #1
 800851e:	d002      	beq.n	8008526 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008520:	f06f 0302 	mvn.w	r3, #2
 8008524:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008526:	697b      	ldr	r3, [r7, #20]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008530:	b580      	push	{r7, lr}
 8008532:	b08a      	sub	sp, #40	@ 0x28
 8008534:	af02      	add	r7, sp, #8
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800853c:	2300      	movs	r3, #0
 800853e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008540:	f3ef 8305 	mrs	r3, IPSR
 8008544:	613b      	str	r3, [r7, #16]
  return(result);
 8008546:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008548:	2b00      	cmp	r3, #0
 800854a:	d15f      	bne.n	800860c <osMessageQueueNew+0xdc>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d05c      	beq.n	800860c <osMessageQueueNew+0xdc>
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d059      	beq.n	800860c <osMessageQueueNew+0xdc>
    mem = -1;
 8008558:	f04f 33ff 	mov.w	r3, #4294967295
 800855c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d029      	beq.n	80085b8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d012      	beq.n	8008592 <osMessageQueueNew+0x62>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	2b4f      	cmp	r3, #79	@ 0x4f
 8008572:	d90e      	bls.n	8008592 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00a      	beq.n	8008592 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	695a      	ldr	r2, [r3, #20]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	fb01 f303 	mul.w	r3, r1, r3
 8008588:	429a      	cmp	r2, r3
 800858a:	d302      	bcc.n	8008592 <osMessageQueueNew+0x62>
        mem = 1;
 800858c:	2301      	movs	r3, #1
 800858e:	61bb      	str	r3, [r7, #24]
 8008590:	e014      	b.n	80085bc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d110      	bne.n	80085bc <osMessageQueueNew+0x8c>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10c      	bne.n	80085bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d108      	bne.n	80085bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d104      	bne.n	80085bc <osMessageQueueNew+0x8c>
          mem = 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	61bb      	str	r3, [r7, #24]
 80085b6:	e001      	b.n	80085bc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80085b8:	2300      	movs	r3, #0
 80085ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d10b      	bne.n	80085da <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	691a      	ldr	r2, [r3, #16]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	2100      	movs	r1, #0
 80085cc:	9100      	str	r1, [sp, #0]
 80085ce:	68b9      	ldr	r1, [r7, #8]
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 fca5 	bl	8008f20 <xQueueGenericCreateStatic>
 80085d6:	61f8      	str	r0, [r7, #28]
 80085d8:	e008      	b.n	80085ec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d105      	bne.n	80085ec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80085e0:	2200      	movs	r2, #0
 80085e2:	68b9      	ldr	r1, [r7, #8]
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 fd18 	bl	800901a <xQueueGenericCreate>
 80085ea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00c      	beq.n	800860c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <osMessageQueueNew+0xd0>
        name = attr->name;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	e001      	b.n	8008604 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008600:	2300      	movs	r3, #0
 8008602:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008604:	6979      	ldr	r1, [r7, #20]
 8008606:	69f8      	ldr	r0, [r7, #28]
 8008608:	f001 fb5a 	bl	8009cc0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800860c:	69fb      	ldr	r3, [r7, #28]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3720      	adds	r7, #32
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008618:	b580      	push	{r7, lr}
 800861a:	b088      	sub	sp, #32
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	603b      	str	r3, [r7, #0]
 8008624:	4613      	mov	r3, r2
 8008626:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800862c:	2300      	movs	r3, #0
 800862e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008630:	f3ef 8305 	mrs	r3, IPSR
 8008634:	617b      	str	r3, [r7, #20]
  return(result);
 8008636:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008638:	2b00      	cmp	r3, #0
 800863a:	d028      	beq.n	800868e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d005      	beq.n	800864e <osMessageQueuePut+0x36>
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <osMessageQueuePut+0x36>
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800864e:	f06f 0303 	mvn.w	r3, #3
 8008652:	61fb      	str	r3, [r7, #28]
 8008654:	e038      	b.n	80086c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008656:	2300      	movs	r3, #0
 8008658:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800865a:	f107 0210 	add.w	r2, r7, #16
 800865e:	2300      	movs	r3, #0
 8008660:	68b9      	ldr	r1, [r7, #8]
 8008662:	69b8      	ldr	r0, [r7, #24]
 8008664:	f000 fef2 	bl	800944c <xQueueGenericSendFromISR>
 8008668:	4603      	mov	r3, r0
 800866a:	2b01      	cmp	r3, #1
 800866c:	d003      	beq.n	8008676 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800866e:	f06f 0302 	mvn.w	r3, #2
 8008672:	61fb      	str	r3, [r7, #28]
 8008674:	e028      	b.n	80086c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d025      	beq.n	80086c8 <osMessageQueuePut+0xb0>
 800867c:	4b15      	ldr	r3, [pc, #84]	@ (80086d4 <osMessageQueuePut+0xbc>)
 800867e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	e01c      	b.n	80086c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <osMessageQueuePut+0x82>
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d103      	bne.n	80086a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800869a:	f06f 0303 	mvn.w	r3, #3
 800869e:	61fb      	str	r3, [r7, #28]
 80086a0:	e012      	b.n	80086c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80086a2:	2300      	movs	r3, #0
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	68b9      	ldr	r1, [r7, #8]
 80086a8:	69b8      	ldr	r0, [r7, #24]
 80086aa:	f000 fdcd 	bl	8009248 <xQueueGenericSend>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d009      	beq.n	80086c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80086ba:	f06f 0301 	mvn.w	r3, #1
 80086be:	61fb      	str	r3, [r7, #28]
 80086c0:	e002      	b.n	80086c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80086c2:	f06f 0302 	mvn.w	r3, #2
 80086c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80086c8:	69fb      	ldr	r3, [r7, #28]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3720      	adds	r7, #32
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	e000ed04 	.word	0xe000ed04

080086d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80086d8:	b580      	push	{r7, lr}
 80086da:	b088      	sub	sp, #32
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
 80086e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086ee:	f3ef 8305 	mrs	r3, IPSR
 80086f2:	617b      	str	r3, [r7, #20]
  return(result);
 80086f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d028      	beq.n	800874c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d005      	beq.n	800870c <osMessageQueueGet+0x34>
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <osMessageQueueGet+0x34>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800870c:	f06f 0303 	mvn.w	r3, #3
 8008710:	61fb      	str	r3, [r7, #28]
 8008712:	e037      	b.n	8008784 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008714:	2300      	movs	r3, #0
 8008716:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008718:	f107 0310 	add.w	r3, r7, #16
 800871c:	461a      	mov	r2, r3
 800871e:	68b9      	ldr	r1, [r7, #8]
 8008720:	69b8      	ldr	r0, [r7, #24]
 8008722:	f001 f923 	bl	800996c <xQueueReceiveFromISR>
 8008726:	4603      	mov	r3, r0
 8008728:	2b01      	cmp	r3, #1
 800872a:	d003      	beq.n	8008734 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800872c:	f06f 0302 	mvn.w	r3, #2
 8008730:	61fb      	str	r3, [r7, #28]
 8008732:	e027      	b.n	8008784 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d024      	beq.n	8008784 <osMessageQueueGet+0xac>
 800873a:	4b15      	ldr	r3, [pc, #84]	@ (8008790 <osMessageQueueGet+0xb8>)
 800873c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	e01b      	b.n	8008784 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d002      	beq.n	8008758 <osMessageQueueGet+0x80>
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d103      	bne.n	8008760 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008758:	f06f 0303 	mvn.w	r3, #3
 800875c:	61fb      	str	r3, [r7, #28]
 800875e:	e011      	b.n	8008784 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	68b9      	ldr	r1, [r7, #8]
 8008764:	69b8      	ldr	r0, [r7, #24]
 8008766:	f000 ff0f 	bl	8009588 <xQueueReceive>
 800876a:	4603      	mov	r3, r0
 800876c:	2b01      	cmp	r3, #1
 800876e:	d009      	beq.n	8008784 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008776:	f06f 0301 	mvn.w	r3, #1
 800877a:	61fb      	str	r3, [r7, #28]
 800877c:	e002      	b.n	8008784 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800877e:	f06f 0302 	mvn.w	r3, #2
 8008782:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008784:	69fb      	ldr	r3, [r7, #28]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3720      	adds	r7, #32
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	e000ed04 	.word	0xe000ed04

08008794 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4a07      	ldr	r2, [pc, #28]	@ (80087c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80087a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	4a06      	ldr	r2, [pc, #24]	@ (80087c4 <vApplicationGetIdleTaskMemory+0x30>)
 80087aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2280      	movs	r2, #128	@ 0x80
 80087b0:	601a      	str	r2, [r3, #0]
}
 80087b2:	bf00      	nop
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	200002b4 	.word	0x200002b4
 80087c4:	2000035c 	.word	0x2000035c

080087c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	4a07      	ldr	r2, [pc, #28]	@ (80087f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80087d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	4a06      	ldr	r2, [pc, #24]	@ (80087f8 <vApplicationGetTimerTaskMemory+0x30>)
 80087de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80087e6:	601a      	str	r2, [r3, #0]
}
 80087e8:	bf00      	nop
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	2000055c 	.word	0x2000055c
 80087f8:	20000604 	.word	0x20000604

080087fc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10b      	bne.n	8008822 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800881c:	bf00      	nop
 800881e:	bf00      	nop
 8008820:	e7fd      	b.n	800881e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008822:	2320      	movs	r3, #32
 8008824:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2b20      	cmp	r3, #32
 800882a:	d00b      	beq.n	8008844 <xEventGroupCreateStatic+0x48>
	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	60fb      	str	r3, [r7, #12]
}
 800883e:	bf00      	nop
 8008840:	bf00      	nop
 8008842:	e7fd      	b.n	8008840 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00a      	beq.n	8008864 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	2200      	movs	r2, #0
 8008852:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	3304      	adds	r3, #4
 8008858:	4618      	mov	r0, r3
 800885a:	f000 fa43 	bl	8008ce4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2201      	movs	r2, #1
 8008862:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8008864:	697b      	ldr	r3, [r7, #20]
	}
 8008866:	4618      	mov	r0, r3
 8008868:	3718      	adds	r7, #24
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800886e:	b580      	push	{r7, lr}
 8008870:	b082      	sub	sp, #8
 8008872:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8008874:	2020      	movs	r0, #32
 8008876:	f003 f951 	bl	800bb1c <pvPortMalloc>
 800887a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00a      	beq.n	8008898 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3304      	adds	r3, #4
 800888c:	4618      	mov	r0, r3
 800888e:	f000 fa29 	bl	8008ce4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8008898:	687b      	ldr	r3, [r7, #4]
	}
 800889a:	4618      	mov	r0, r3
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b090      	sub	sp, #64	@ 0x40
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80088ba:	2300      	movs	r3, #0
 80088bc:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10b      	bne.n	80088dc <xEventGroupWaitBits+0x38>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	623b      	str	r3, [r7, #32]
}
 80088d6:	bf00      	nop
 80088d8:	bf00      	nop
 80088da:	e7fd      	b.n	80088d8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088e2:	d30b      	bcc.n	80088fc <xEventGroupWaitBits+0x58>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	61fb      	str	r3, [r7, #28]
}
 80088f6:	bf00      	nop
 80088f8:	bf00      	nop
 80088fa:	e7fd      	b.n	80088f8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10b      	bne.n	800891a <xEventGroupWaitBits+0x76>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	61bb      	str	r3, [r7, #24]
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop
 8008918:	e7fd      	b.n	8008916 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800891a:	f002 f939 	bl	800ab90 <xTaskGetSchedulerState>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d102      	bne.n	800892a <xEventGroupWaitBits+0x86>
 8008924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <xEventGroupWaitBits+0x8a>
 800892a:	2301      	movs	r3, #1
 800892c:	e000      	b.n	8008930 <xEventGroupWaitBits+0x8c>
 800892e:	2300      	movs	r3, #0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10b      	bne.n	800894c <xEventGroupWaitBits+0xa8>
	__asm volatile
 8008934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	617b      	str	r3, [r7, #20]
}
 8008946:	bf00      	nop
 8008948:	bf00      	nop
 800894a:	e7fd      	b.n	8008948 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800894c:	f001 fc7a 	bl	800a244 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008956:	683a      	ldr	r2, [r7, #0]
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800895c:	f000 f98c 	bl	8008c78 <prvTestWaitCondition>
 8008960:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8008962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00e      	beq.n	8008986 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8008968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800896c:	2300      	movs	r3, #0
 800896e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d028      	beq.n	80089c8 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	43db      	mvns	r3, r3
 800897e:	401a      	ands	r2, r3
 8008980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e020      	b.n	80089c8 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8008986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008988:	2b00      	cmp	r3, #0
 800898a:	d104      	bne.n	8008996 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800898c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8008990:	2301      	movs	r3, #1
 8008992:	633b      	str	r3, [r7, #48]	@ 0x30
 8008994:	e018      	b.n	80089c8 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d003      	beq.n	80089a4 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800899c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80089a2:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80089aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089b0:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80089b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b4:	1d18      	adds	r0, r3, #4
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ba:	4313      	orrs	r3, r2
 80089bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089be:	4619      	mov	r1, r3
 80089c0:	f001 fe42 	bl	800a648 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80089c8:	f001 fc4a 	bl	800a260 <xTaskResumeAll>
 80089cc:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80089ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d031      	beq.n	8008a38 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 80089d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d107      	bne.n	80089ea <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 80089da:	4b1a      	ldr	r3, [pc, #104]	@ (8008a44 <xEventGroupWaitBits+0x1a0>)
 80089dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80089ea:	f002 fa4b 	bl	800ae84 <uxTaskResetEventItemValue>
 80089ee:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80089f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d11a      	bne.n	8008a30 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 80089fa:	f002 ff6d 	bl	800b8d8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80089fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	68b9      	ldr	r1, [r7, #8]
 8008a08:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008a0a:	f000 f935 	bl	8008c78 <prvTestWaitCondition>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d009      	beq.n	8008a28 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d006      	beq.n	8008a28 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	43db      	mvns	r3, r3
 8008a22:	401a      	ands	r2, r3
 8008a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a26:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8008a2c:	f002 ff86 	bl	800b93c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a32:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8008a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3740      	adds	r7, #64	@ 0x40
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	e000ed04 	.word	0xe000ed04

08008a48 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10b      	bne.n	8008a74 <xEventGroupClearBits+0x2c>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	60fb      	str	r3, [r7, #12]
}
 8008a6e:	bf00      	nop
 8008a70:	bf00      	nop
 8008a72:	e7fd      	b.n	8008a70 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a7a:	d30b      	bcc.n	8008a94 <xEventGroupClearBits+0x4c>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	60bb      	str	r3, [r7, #8]
}
 8008a8e:	bf00      	nop
 8008a90:	bf00      	nop
 8008a92:	e7fd      	b.n	8008a90 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8008a94:	f002 ff20 	bl	800b8d8 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	43db      	mvns	r3, r3
 8008aa6:	401a      	ands	r2, r3
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8008aac:	f002 ff46 	bl	800b93c <vPortExitCritical>

	return uxReturn;
 8008ab0:	693b      	ldr	r3, [r7, #16]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3718      	adds	r7, #24
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	4804      	ldr	r0, [pc, #16]	@ (8008ae0 <xEventGroupClearBitsFromISR+0x24>)
 8008ace:	f002 fdb3 	bl	800b638 <xTimerPendFunctionCallFromISR>
 8008ad2:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
	}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	08008c5f 	.word	0x08008c5f

08008ae4 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b089      	sub	sp, #36	@ 0x24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008af0:	f3ef 8211 	mrs	r2, BASEPRI
 8008af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	60fa      	str	r2, [r7, #12]
 8008b06:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b08:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b0a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	617b      	str	r3, [r7, #20]
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b1c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8008b1e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8008b20:	4618      	mov	r0, r3
 8008b22:	3724      	adds	r7, #36	@ 0x24
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08e      	sub	sp, #56	@ 0x38
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008b36:	2300      	movs	r3, #0
 8008b38:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10b      	bne.n	8008b60 <xEventGroupSetBits+0x34>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	613b      	str	r3, [r7, #16]
}
 8008b5a:	bf00      	nop
 8008b5c:	bf00      	nop
 8008b5e:	e7fd      	b.n	8008b5c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b66:	d30b      	bcc.n	8008b80 <xEventGroupSetBits+0x54>
	__asm volatile
 8008b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6c:	f383 8811 	msr	BASEPRI, r3
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	60fb      	str	r3, [r7, #12]
}
 8008b7a:	bf00      	nop
 8008b7c:	bf00      	nop
 8008b7e:	e7fd      	b.n	8008b7c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8008b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b82:	3304      	adds	r3, #4
 8008b84:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b88:	3308      	adds	r3, #8
 8008b8a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008b8c:	f001 fb5a 	bl	800a244 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8008b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	431a      	orrs	r2, r3
 8008b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba0:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008ba2:	e03c      	b.n	8008c1e <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8008ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008bba:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008bc2:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d108      	bne.n	8008be0 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00b      	beq.n	8008bf2 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008bde:	e008      	b.n	8008bf2 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	4013      	ands	r3, r2
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d101      	bne.n	8008bf2 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d010      	beq.n	8008c1a <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008c12:	4619      	mov	r1, r3
 8008c14:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008c16:	f001 fde5 	bl	800a7e4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8008c1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d1be      	bne.n	8008ba4 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2c:	43db      	mvns	r3, r3
 8008c2e:	401a      	ands	r2, r3
 8008c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c32:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008c34:	f001 fb14 	bl	800a260 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c3a:	681b      	ldr	r3, [r3, #0]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3738      	adds	r7, #56	@ 0x38
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff ff6b 	bl	8008b2c <xEventGroupSetBits>
}
 8008c56:	bf00      	nop
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff feec 	bl	8008a48 <xEventGroupClearBits>
}
 8008c70:	bf00      	nop
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8008c84:	2300      	movs	r3, #0
 8008c86:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d107      	bne.n	8008c9e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	4013      	ands	r3, r2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00a      	beq.n	8008cae <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	617b      	str	r3, [r7, #20]
 8008c9c:	e007      	b.n	8008cae <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d101      	bne.n	8008cae <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008caa:	2301      	movs	r3, #1
 8008cac:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8008cae:	697b      	ldr	r3, [r7, #20]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	371c      	adds	r7, #28
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	68f9      	ldr	r1, [r7, #12]
 8008cce:	4804      	ldr	r0, [pc, #16]	@ (8008ce0 <xEventGroupSetBitsFromISR+0x24>)
 8008cd0:	f002 fcb2 	bl	800b638 <xTimerPendFunctionCallFromISR>
 8008cd4:	6178      	str	r0, [r7, #20]

		return xReturn;
 8008cd6:	697b      	ldr	r3, [r7, #20]
	}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	08008c45 	.word	0x08008c45

08008ce4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f103 0208 	add.w	r2, r3, #8
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f103 0208 	add.w	r2, r3, #8
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f103 0208 	add.w	r2, r3, #8
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008d32:	bf00      	nop
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b085      	sub	sp, #20
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	689a      	ldr	r2, [r3, #8]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	601a      	str	r2, [r3, #0]
}
 8008d7a:	bf00      	nop
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d86:	b480      	push	{r7}
 8008d88:	b085      	sub	sp, #20
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9c:	d103      	bne.n	8008da6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	e00c      	b.n	8008dc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3308      	adds	r3, #8
 8008daa:	60fb      	str	r3, [r7, #12]
 8008dac:	e002      	b.n	8008db4 <vListInsert+0x2e>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	60fb      	str	r3, [r7, #12]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d2f6      	bcs.n	8008dae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	683a      	ldr	r2, [r7, #0]
 8008dce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	1c5a      	adds	r2, r3, #1
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	601a      	str	r2, [r3, #0]
}
 8008dec:	bf00      	nop
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	6892      	ldr	r2, [r2, #8]
 8008e0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	6852      	ldr	r2, [r2, #4]
 8008e18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d103      	bne.n	8008e2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	689a      	ldr	r2, [r3, #8]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	1e5a      	subs	r2, r3, #1
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10b      	bne.n	8008e78 <xQueueGenericReset+0x2c>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	60bb      	str	r3, [r7, #8]
}
 8008e72:	bf00      	nop
 8008e74:	bf00      	nop
 8008e76:	e7fd      	b.n	8008e74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008e78:	f002 fd2e 	bl	800b8d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e84:	68f9      	ldr	r1, [r7, #12]
 8008e86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008e88:	fb01 f303 	mul.w	r3, r1, r3
 8008e8c:	441a      	add	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	68f9      	ldr	r1, [r7, #12]
 8008eac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008eae:	fb01 f303 	mul.w	r3, r1, r3
 8008eb2:	441a      	add	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	22ff      	movs	r2, #255	@ 0xff
 8008ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	22ff      	movs	r2, #255	@ 0xff
 8008ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d114      	bne.n	8008ef8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d01a      	beq.n	8008f0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3310      	adds	r3, #16
 8008eda:	4618      	mov	r0, r3
 8008edc:	f001 fc1e 	bl	800a71c <xTaskRemoveFromEventList>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d012      	beq.n	8008f0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8008f1c <xQueueGenericReset+0xd0>)
 8008ee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008eec:	601a      	str	r2, [r3, #0]
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	e009      	b.n	8008f0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	3310      	adds	r3, #16
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7ff fef1 	bl	8008ce4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3324      	adds	r3, #36	@ 0x24
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7ff feec 	bl	8008ce4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008f0c:	f002 fd16 	bl	800b93c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008f10:	2301      	movs	r3, #1
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	e000ed04 	.word	0xe000ed04

08008f20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08e      	sub	sp, #56	@ 0x38
 8008f24:	af02      	add	r7, sp, #8
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10b      	bne.n	8008f4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008f46:	bf00      	nop
 8008f48:	bf00      	nop
 8008f4a:	e7fd      	b.n	8008f48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d10b      	bne.n	8008f6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop
 8008f68:	e7fd      	b.n	8008f66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <xQueueGenericCreateStatic+0x56>
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <xQueueGenericCreateStatic+0x5a>
 8008f76:	2301      	movs	r3, #1
 8008f78:	e000      	b.n	8008f7c <xQueueGenericCreateStatic+0x5c>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10b      	bne.n	8008f98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	623b      	str	r3, [r7, #32]
}
 8008f92:	bf00      	nop
 8008f94:	bf00      	nop
 8008f96:	e7fd      	b.n	8008f94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d102      	bne.n	8008fa4 <xQueueGenericCreateStatic+0x84>
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <xQueueGenericCreateStatic+0x88>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e000      	b.n	8008faa <xQueueGenericCreateStatic+0x8a>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10b      	bne.n	8008fc6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	61fb      	str	r3, [r7, #28]
}
 8008fc0:	bf00      	nop
 8008fc2:	bf00      	nop
 8008fc4:	e7fd      	b.n	8008fc2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008fc6:	2350      	movs	r3, #80	@ 0x50
 8008fc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	2b50      	cmp	r3, #80	@ 0x50
 8008fce:	d00b      	beq.n	8008fe8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	61bb      	str	r3, [r7, #24]
}
 8008fe2:	bf00      	nop
 8008fe4:	bf00      	nop
 8008fe6:	e7fd      	b.n	8008fe4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008fe8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00d      	beq.n	8009010 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ffc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	4613      	mov	r3, r2
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	68b9      	ldr	r1, [r7, #8]
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 f840 	bl	8009090 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009012:	4618      	mov	r0, r3
 8009014:	3730      	adds	r7, #48	@ 0x30
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800901a:	b580      	push	{r7, lr}
 800901c:	b08a      	sub	sp, #40	@ 0x28
 800901e:	af02      	add	r7, sp, #8
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	4613      	mov	r3, r2
 8009026:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10b      	bne.n	8009046 <xQueueGenericCreate+0x2c>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	613b      	str	r3, [r7, #16]
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	e7fd      	b.n	8009042 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	fb02 f303 	mul.w	r3, r2, r3
 800904e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	3350      	adds	r3, #80	@ 0x50
 8009054:	4618      	mov	r0, r3
 8009056:	f002 fd61 	bl	800bb1c <pvPortMalloc>
 800905a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d011      	beq.n	8009086 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	3350      	adds	r3, #80	@ 0x50
 800906a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009074:	79fa      	ldrb	r2, [r7, #7]
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	4613      	mov	r3, r2
 800907c:	697a      	ldr	r2, [r7, #20]
 800907e:	68b9      	ldr	r1, [r7, #8]
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 f805 	bl	8009090 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009086:	69bb      	ldr	r3, [r7, #24]
	}
 8009088:	4618      	mov	r0, r3
 800908a:	3720      	adds	r7, #32
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
 800909c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d103      	bne.n	80090ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	69ba      	ldr	r2, [r7, #24]
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	e002      	b.n	80090b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80090be:	2101      	movs	r1, #1
 80090c0:	69b8      	ldr	r0, [r7, #24]
 80090c2:	f7ff fec3 	bl	8008e4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	78fa      	ldrb	r2, [r7, #3]
 80090ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80090ce:	bf00      	nop
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b082      	sub	sp, #8
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00e      	beq.n	8009102 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80090f6:	2300      	movs	r3, #0
 80090f8:	2200      	movs	r2, #0
 80090fa:	2100      	movs	r1, #0
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f8a3 	bl	8009248 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009102:	bf00      	nop
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800910a:	b580      	push	{r7, lr}
 800910c:	b086      	sub	sp, #24
 800910e:	af00      	add	r7, sp, #0
 8009110:	4603      	mov	r3, r0
 8009112:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009114:	2301      	movs	r3, #1
 8009116:	617b      	str	r3, [r7, #20]
 8009118:	2300      	movs	r3, #0
 800911a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	461a      	mov	r2, r3
 8009120:	6939      	ldr	r1, [r7, #16]
 8009122:	6978      	ldr	r0, [r7, #20]
 8009124:	f7ff ff79 	bl	800901a <xQueueGenericCreate>
 8009128:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f7ff ffd3 	bl	80090d6 <prvInitialiseMutex>

		return xNewQueue;
 8009130:	68fb      	ldr	r3, [r7, #12]
	}
 8009132:	4618      	mov	r0, r3
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800913a:	b580      	push	{r7, lr}
 800913c:	b088      	sub	sp, #32
 800913e:	af02      	add	r7, sp, #8
 8009140:	4603      	mov	r3, r0
 8009142:	6039      	str	r1, [r7, #0]
 8009144:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009146:	2301      	movs	r3, #1
 8009148:	617b      	str	r3, [r7, #20]
 800914a:	2300      	movs	r3, #0
 800914c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800914e:	79fb      	ldrb	r3, [r7, #7]
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2200      	movs	r2, #0
 8009156:	6939      	ldr	r1, [r7, #16]
 8009158:	6978      	ldr	r0, [r7, #20]
 800915a:	f7ff fee1 	bl	8008f20 <xQueueGenericCreateStatic>
 800915e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f7ff ffb8 	bl	80090d6 <prvInitialiseMutex>

		return xNewQueue;
 8009166:	68fb      	ldr	r3, [r7, #12]
	}
 8009168:	4618      	mov	r0, r3
 800916a:	3718      	adds	r7, #24
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009170:	b590      	push	{r4, r7, lr}
 8009172:	b087      	sub	sp, #28
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10b      	bne.n	800919a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	60fb      	str	r3, [r7, #12]
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop
 8009198:	e7fd      	b.n	8009196 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	689c      	ldr	r4, [r3, #8]
 800919e:	f001 fce7 	bl	800ab70 <xTaskGetCurrentTaskHandle>
 80091a2:	4603      	mov	r3, r0
 80091a4:	429c      	cmp	r4, r3
 80091a6:	d111      	bne.n	80091cc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	1e5a      	subs	r2, r3, #1
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d105      	bne.n	80091c6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80091ba:	2300      	movs	r3, #0
 80091bc:	2200      	movs	r2, #0
 80091be:	2100      	movs	r1, #0
 80091c0:	6938      	ldr	r0, [r7, #16]
 80091c2:	f000 f841 	bl	8009248 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80091c6:	2301      	movs	r3, #1
 80091c8:	617b      	str	r3, [r7, #20]
 80091ca:	e001      	b.n	80091d0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80091cc:	2300      	movs	r3, #0
 80091ce:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80091d0:	697b      	ldr	r3, [r7, #20]
	}
 80091d2:	4618      	mov	r0, r3
 80091d4:	371c      	adds	r7, #28
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd90      	pop	{r4, r7, pc}

080091da <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80091da:	b590      	push	{r4, r7, lr}
 80091dc:	b087      	sub	sp, #28
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10b      	bne.n	8009206 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80091ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	60fb      	str	r3, [r7, #12]
}
 8009200:	bf00      	nop
 8009202:	bf00      	nop
 8009204:	e7fd      	b.n	8009202 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	689c      	ldr	r4, [r3, #8]
 800920a:	f001 fcb1 	bl	800ab70 <xTaskGetCurrentTaskHandle>
 800920e:	4603      	mov	r3, r0
 8009210:	429c      	cmp	r4, r3
 8009212:	d107      	bne.n	8009224 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	1c5a      	adds	r2, r3, #1
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800921e:	2301      	movs	r3, #1
 8009220:	617b      	str	r3, [r7, #20]
 8009222:	e00c      	b.n	800923e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6938      	ldr	r0, [r7, #16]
 8009228:	f000 fa90 	bl	800974c <xQueueSemaphoreTake>
 800922c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d004      	beq.n	800923e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800923e:	697b      	ldr	r3, [r7, #20]
	}
 8009240:	4618      	mov	r0, r3
 8009242:	371c      	adds	r7, #28
 8009244:	46bd      	mov	sp, r7
 8009246:	bd90      	pop	{r4, r7, pc}

08009248 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08e      	sub	sp, #56	@ 0x38
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
 8009254:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009256:	2300      	movs	r3, #0
 8009258:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10b      	bne.n	800927c <xQueueGenericSend+0x34>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009276:	bf00      	nop
 8009278:	bf00      	nop
 800927a:	e7fd      	b.n	8009278 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d103      	bne.n	800928a <xQueueGenericSend+0x42>
 8009282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009286:	2b00      	cmp	r3, #0
 8009288:	d101      	bne.n	800928e <xQueueGenericSend+0x46>
 800928a:	2301      	movs	r3, #1
 800928c:	e000      	b.n	8009290 <xQueueGenericSend+0x48>
 800928e:	2300      	movs	r3, #0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10b      	bne.n	80092ac <xQueueGenericSend+0x64>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80092a6:	bf00      	nop
 80092a8:	bf00      	nop
 80092aa:	e7fd      	b.n	80092a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d103      	bne.n	80092ba <xQueueGenericSend+0x72>
 80092b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d101      	bne.n	80092be <xQueueGenericSend+0x76>
 80092ba:	2301      	movs	r3, #1
 80092bc:	e000      	b.n	80092c0 <xQueueGenericSend+0x78>
 80092be:	2300      	movs	r3, #0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10b      	bne.n	80092dc <xQueueGenericSend+0x94>
	__asm volatile
 80092c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c8:	f383 8811 	msr	BASEPRI, r3
 80092cc:	f3bf 8f6f 	isb	sy
 80092d0:	f3bf 8f4f 	dsb	sy
 80092d4:	623b      	str	r3, [r7, #32]
}
 80092d6:	bf00      	nop
 80092d8:	bf00      	nop
 80092da:	e7fd      	b.n	80092d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092dc:	f001 fc58 	bl	800ab90 <xTaskGetSchedulerState>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d102      	bne.n	80092ec <xQueueGenericSend+0xa4>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <xQueueGenericSend+0xa8>
 80092ec:	2301      	movs	r3, #1
 80092ee:	e000      	b.n	80092f2 <xQueueGenericSend+0xaa>
 80092f0:	2300      	movs	r3, #0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10b      	bne.n	800930e <xQueueGenericSend+0xc6>
	__asm volatile
 80092f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	61fb      	str	r3, [r7, #28]
}
 8009308:	bf00      	nop
 800930a:	bf00      	nop
 800930c:	e7fd      	b.n	800930a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800930e:	f002 fae3 	bl	800b8d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800931a:	429a      	cmp	r2, r3
 800931c:	d302      	bcc.n	8009324 <xQueueGenericSend+0xdc>
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b02      	cmp	r3, #2
 8009322:	d129      	bne.n	8009378 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009324:	683a      	ldr	r2, [r7, #0]
 8009326:	68b9      	ldr	r1, [r7, #8]
 8009328:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800932a:	f000 fbb9 	bl	8009aa0 <prvCopyDataToQueue>
 800932e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009334:	2b00      	cmp	r3, #0
 8009336:	d010      	beq.n	800935a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933a:	3324      	adds	r3, #36	@ 0x24
 800933c:	4618      	mov	r0, r3
 800933e:	f001 f9ed 	bl	800a71c <xTaskRemoveFromEventList>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d013      	beq.n	8009370 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009348:	4b3f      	ldr	r3, [pc, #252]	@ (8009448 <xQueueGenericSend+0x200>)
 800934a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	e00a      	b.n	8009370 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800935a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800935c:	2b00      	cmp	r3, #0
 800935e:	d007      	beq.n	8009370 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009360:	4b39      	ldr	r3, [pc, #228]	@ (8009448 <xQueueGenericSend+0x200>)
 8009362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009366:	601a      	str	r2, [r3, #0]
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009370:	f002 fae4 	bl	800b93c <vPortExitCritical>
				return pdPASS;
 8009374:	2301      	movs	r3, #1
 8009376:	e063      	b.n	8009440 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d103      	bne.n	8009386 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800937e:	f002 fadd 	bl	800b93c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009382:	2300      	movs	r3, #0
 8009384:	e05c      	b.n	8009440 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009388:	2b00      	cmp	r3, #0
 800938a:	d106      	bne.n	800939a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800938c:	f107 0314 	add.w	r3, r7, #20
 8009390:	4618      	mov	r0, r3
 8009392:	f001 fa8b 	bl	800a8ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009396:	2301      	movs	r3, #1
 8009398:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800939a:	f002 facf 	bl	800b93c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800939e:	f000 ff51 	bl	800a244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093a2:	f002 fa99 	bl	800b8d8 <vPortEnterCritical>
 80093a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093ac:	b25b      	sxtb	r3, r3
 80093ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b2:	d103      	bne.n	80093bc <xQueueGenericSend+0x174>
 80093b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093c2:	b25b      	sxtb	r3, r3
 80093c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c8:	d103      	bne.n	80093d2 <xQueueGenericSend+0x18a>
 80093ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093d2:	f002 fab3 	bl	800b93c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093d6:	1d3a      	adds	r2, r7, #4
 80093d8:	f107 0314 	add.w	r3, r7, #20
 80093dc:	4611      	mov	r1, r2
 80093de:	4618      	mov	r0, r3
 80093e0:	f001 fa7a 	bl	800a8d8 <xTaskCheckForTimeOut>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d124      	bne.n	8009434 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093ec:	f000 fc50 	bl	8009c90 <prvIsQueueFull>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d018      	beq.n	8009428 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f8:	3310      	adds	r3, #16
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	4611      	mov	r1, r2
 80093fe:	4618      	mov	r0, r3
 8009400:	f001 f8fc 	bl	800a5fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009406:	f000 fbdb 	bl	8009bc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800940a:	f000 ff29 	bl	800a260 <xTaskResumeAll>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	f47f af7c 	bne.w	800930e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009416:	4b0c      	ldr	r3, [pc, #48]	@ (8009448 <xQueueGenericSend+0x200>)
 8009418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800941c:	601a      	str	r2, [r3, #0]
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	e772      	b.n	800930e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009428:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800942a:	f000 fbc9 	bl	8009bc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800942e:	f000 ff17 	bl	800a260 <xTaskResumeAll>
 8009432:	e76c      	b.n	800930e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009434:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009436:	f000 fbc3 	bl	8009bc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800943a:	f000 ff11 	bl	800a260 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800943e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009440:	4618      	mov	r0, r3
 8009442:	3738      	adds	r7, #56	@ 0x38
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	e000ed04 	.word	0xe000ed04

0800944c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b090      	sub	sp, #64	@ 0x40
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
 8009458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800945e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10b      	bne.n	800947c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009476:	bf00      	nop
 8009478:	bf00      	nop
 800947a:	e7fd      	b.n	8009478 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d103      	bne.n	800948a <xQueueGenericSendFromISR+0x3e>
 8009482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009486:	2b00      	cmp	r3, #0
 8009488:	d101      	bne.n	800948e <xQueueGenericSendFromISR+0x42>
 800948a:	2301      	movs	r3, #1
 800948c:	e000      	b.n	8009490 <xQueueGenericSendFromISR+0x44>
 800948e:	2300      	movs	r3, #0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d10b      	bne.n	80094ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009498:	f383 8811 	msr	BASEPRI, r3
 800949c:	f3bf 8f6f 	isb	sy
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80094a6:	bf00      	nop
 80094a8:	bf00      	nop
 80094aa:	e7fd      	b.n	80094a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d103      	bne.n	80094ba <xQueueGenericSendFromISR+0x6e>
 80094b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d101      	bne.n	80094be <xQueueGenericSendFromISR+0x72>
 80094ba:	2301      	movs	r3, #1
 80094bc:	e000      	b.n	80094c0 <xQueueGenericSendFromISR+0x74>
 80094be:	2300      	movs	r3, #0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10b      	bne.n	80094dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80094c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	623b      	str	r3, [r7, #32]
}
 80094d6:	bf00      	nop
 80094d8:	bf00      	nop
 80094da:	e7fd      	b.n	80094d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094dc:	f002 fadc 	bl	800ba98 <vPortValidateInterruptPriority>
	__asm volatile
 80094e0:	f3ef 8211 	mrs	r2, BASEPRI
 80094e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	61fa      	str	r2, [r7, #28]
 80094f6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80094f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009504:	429a      	cmp	r2, r3
 8009506:	d302      	bcc.n	800950e <xQueueGenericSendFromISR+0xc2>
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	2b02      	cmp	r3, #2
 800950c:	d12f      	bne.n	800956e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800950e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009510:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009514:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800951a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800951c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	68b9      	ldr	r1, [r7, #8]
 8009522:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009524:	f000 fabc 	bl	8009aa0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009528:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800952c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009530:	d112      	bne.n	8009558 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009536:	2b00      	cmp	r3, #0
 8009538:	d016      	beq.n	8009568 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800953a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953c:	3324      	adds	r3, #36	@ 0x24
 800953e:	4618      	mov	r0, r3
 8009540:	f001 f8ec 	bl	800a71c <xTaskRemoveFromEventList>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00e      	beq.n	8009568 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00b      	beq.n	8009568 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	601a      	str	r2, [r3, #0]
 8009556:	e007      	b.n	8009568 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009558:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800955c:	3301      	adds	r3, #1
 800955e:	b2db      	uxtb	r3, r3
 8009560:	b25a      	sxtb	r2, r3
 8009562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009568:	2301      	movs	r3, #1
 800956a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800956c:	e001      	b.n	8009572 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800956e:	2300      	movs	r3, #0
 8009570:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009574:	617b      	str	r3, [r7, #20]
	__asm volatile
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f383 8811 	msr	BASEPRI, r3
}
 800957c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800957e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009580:	4618      	mov	r0, r3
 8009582:	3740      	adds	r7, #64	@ 0x40
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b08c      	sub	sp, #48	@ 0x30
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009594:	2300      	movs	r3, #0
 8009596:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800959c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10b      	bne.n	80095ba <xQueueReceive+0x32>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	623b      	str	r3, [r7, #32]
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop
 80095b8:	e7fd      	b.n	80095b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d103      	bne.n	80095c8 <xQueueReceive+0x40>
 80095c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <xQueueReceive+0x44>
 80095c8:	2301      	movs	r3, #1
 80095ca:	e000      	b.n	80095ce <xQueueReceive+0x46>
 80095cc:	2300      	movs	r3, #0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10b      	bne.n	80095ea <xQueueReceive+0x62>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	61fb      	str	r3, [r7, #28]
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
 80095e8:	e7fd      	b.n	80095e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095ea:	f001 fad1 	bl	800ab90 <xTaskGetSchedulerState>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d102      	bne.n	80095fa <xQueueReceive+0x72>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d101      	bne.n	80095fe <xQueueReceive+0x76>
 80095fa:	2301      	movs	r3, #1
 80095fc:	e000      	b.n	8009600 <xQueueReceive+0x78>
 80095fe:	2300      	movs	r3, #0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10b      	bne.n	800961c <xQueueReceive+0x94>
	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	61bb      	str	r3, [r7, #24]
}
 8009616:	bf00      	nop
 8009618:	bf00      	nop
 800961a:	e7fd      	b.n	8009618 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800961c:	f002 f95c 	bl	800b8d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009624:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009628:	2b00      	cmp	r3, #0
 800962a:	d01f      	beq.n	800966c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800962c:	68b9      	ldr	r1, [r7, #8]
 800962e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009630:	f000 faa0 	bl	8009b74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009636:	1e5a      	subs	r2, r3, #1
 8009638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800963c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00f      	beq.n	8009664 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009646:	3310      	adds	r3, #16
 8009648:	4618      	mov	r0, r3
 800964a:	f001 f867 	bl	800a71c <xTaskRemoveFromEventList>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d007      	beq.n	8009664 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009654:	4b3c      	ldr	r3, [pc, #240]	@ (8009748 <xQueueReceive+0x1c0>)
 8009656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009664:	f002 f96a 	bl	800b93c <vPortExitCritical>
				return pdPASS;
 8009668:	2301      	movs	r3, #1
 800966a:	e069      	b.n	8009740 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d103      	bne.n	800967a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009672:	f002 f963 	bl	800b93c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009676:	2300      	movs	r3, #0
 8009678:	e062      	b.n	8009740 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800967a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967c:	2b00      	cmp	r3, #0
 800967e:	d106      	bne.n	800968e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009680:	f107 0310 	add.w	r3, r7, #16
 8009684:	4618      	mov	r0, r3
 8009686:	f001 f911 	bl	800a8ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800968a:	2301      	movs	r3, #1
 800968c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800968e:	f002 f955 	bl	800b93c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009692:	f000 fdd7 	bl	800a244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009696:	f002 f91f 	bl	800b8d8 <vPortEnterCritical>
 800969a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096a0:	b25b      	sxtb	r3, r3
 80096a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a6:	d103      	bne.n	80096b0 <xQueueReceive+0x128>
 80096a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096b6:	b25b      	sxtb	r3, r3
 80096b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096bc:	d103      	bne.n	80096c6 <xQueueReceive+0x13e>
 80096be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096c6:	f002 f939 	bl	800b93c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096ca:	1d3a      	adds	r2, r7, #4
 80096cc:	f107 0310 	add.w	r3, r7, #16
 80096d0:	4611      	mov	r1, r2
 80096d2:	4618      	mov	r0, r3
 80096d4:	f001 f900 	bl	800a8d8 <xTaskCheckForTimeOut>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d123      	bne.n	8009726 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096e0:	f000 fac0 	bl	8009c64 <prvIsQueueEmpty>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d017      	beq.n	800971a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ec:	3324      	adds	r3, #36	@ 0x24
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	4611      	mov	r1, r2
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 ff82 	bl	800a5fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096fa:	f000 fa61 	bl	8009bc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096fe:	f000 fdaf 	bl	800a260 <xTaskResumeAll>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d189      	bne.n	800961c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009708:	4b0f      	ldr	r3, [pc, #60]	@ (8009748 <xQueueReceive+0x1c0>)
 800970a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800970e:	601a      	str	r2, [r3, #0]
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	e780      	b.n	800961c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800971a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800971c:	f000 fa50 	bl	8009bc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009720:	f000 fd9e 	bl	800a260 <xTaskResumeAll>
 8009724:	e77a      	b.n	800961c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009728:	f000 fa4a 	bl	8009bc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800972c:	f000 fd98 	bl	800a260 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009732:	f000 fa97 	bl	8009c64 <prvIsQueueEmpty>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	f43f af6f 	beq.w	800961c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800973e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009740:	4618      	mov	r0, r3
 8009742:	3730      	adds	r7, #48	@ 0x30
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	e000ed04 	.word	0xe000ed04

0800974c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b08e      	sub	sp, #56	@ 0x38
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009756:	2300      	movs	r3, #0
 8009758:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800975e:	2300      	movs	r3, #0
 8009760:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10b      	bne.n	8009780 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	623b      	str	r3, [r7, #32]
}
 800977a:	bf00      	nop
 800977c:	bf00      	nop
 800977e:	e7fd      	b.n	800977c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00b      	beq.n	80097a0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978c:	f383 8811 	msr	BASEPRI, r3
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	61fb      	str	r3, [r7, #28]
}
 800979a:	bf00      	nop
 800979c:	bf00      	nop
 800979e:	e7fd      	b.n	800979c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097a0:	f001 f9f6 	bl	800ab90 <xTaskGetSchedulerState>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d102      	bne.n	80097b0 <xQueueSemaphoreTake+0x64>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <xQueueSemaphoreTake+0x68>
 80097b0:	2301      	movs	r3, #1
 80097b2:	e000      	b.n	80097b6 <xQueueSemaphoreTake+0x6a>
 80097b4:	2300      	movs	r3, #0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10b      	bne.n	80097d2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	61bb      	str	r3, [r7, #24]
}
 80097cc:	bf00      	nop
 80097ce:	bf00      	nop
 80097d0:	e7fd      	b.n	80097ce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097d2:	f002 f881 	bl	800b8d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80097d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097da:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80097dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d024      	beq.n	800982c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80097e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e4:	1e5a      	subs	r2, r3, #1
 80097e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d104      	bne.n	80097fc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80097f2:	f001 fb5f 	bl	800aeb4 <pvTaskIncrementMutexHeldCount>
 80097f6:	4602      	mov	r2, r0
 80097f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00f      	beq.n	8009824 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009806:	3310      	adds	r3, #16
 8009808:	4618      	mov	r0, r3
 800980a:	f000 ff87 	bl	800a71c <xTaskRemoveFromEventList>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d007      	beq.n	8009824 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009814:	4b54      	ldr	r3, [pc, #336]	@ (8009968 <xQueueSemaphoreTake+0x21c>)
 8009816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009824:	f002 f88a 	bl	800b93c <vPortExitCritical>
				return pdPASS;
 8009828:	2301      	movs	r3, #1
 800982a:	e098      	b.n	800995e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d112      	bne.n	8009858 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00b      	beq.n	8009850 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	617b      	str	r3, [r7, #20]
}
 800984a:	bf00      	nop
 800984c:	bf00      	nop
 800984e:	e7fd      	b.n	800984c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009850:	f002 f874 	bl	800b93c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009854:	2300      	movs	r3, #0
 8009856:	e082      	b.n	800995e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800985a:	2b00      	cmp	r3, #0
 800985c:	d106      	bne.n	800986c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800985e:	f107 030c 	add.w	r3, r7, #12
 8009862:	4618      	mov	r0, r3
 8009864:	f001 f822 	bl	800a8ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009868:	2301      	movs	r3, #1
 800986a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800986c:	f002 f866 	bl	800b93c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009870:	f000 fce8 	bl	800a244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009874:	f002 f830 	bl	800b8d8 <vPortEnterCritical>
 8009878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800987e:	b25b      	sxtb	r3, r3
 8009880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009884:	d103      	bne.n	800988e <xQueueSemaphoreTake+0x142>
 8009886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009888:	2200      	movs	r2, #0
 800988a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800988e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009890:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009894:	b25b      	sxtb	r3, r3
 8009896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989a:	d103      	bne.n	80098a4 <xQueueSemaphoreTake+0x158>
 800989c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098a4:	f002 f84a 	bl	800b93c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098a8:	463a      	mov	r2, r7
 80098aa:	f107 030c 	add.w	r3, r7, #12
 80098ae:	4611      	mov	r1, r2
 80098b0:	4618      	mov	r0, r3
 80098b2:	f001 f811 	bl	800a8d8 <xTaskCheckForTimeOut>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d132      	bne.n	8009922 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80098be:	f000 f9d1 	bl	8009c64 <prvIsQueueEmpty>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d026      	beq.n	8009916 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d109      	bne.n	80098e4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80098d0:	f002 f802 	bl	800b8d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80098d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	4618      	mov	r0, r3
 80098da:	f001 f977 	bl	800abcc <xTaskPriorityInherit>
 80098de:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80098e0:	f002 f82c 	bl	800b93c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e6:	3324      	adds	r3, #36	@ 0x24
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	4611      	mov	r1, r2
 80098ec:	4618      	mov	r0, r3
 80098ee:	f000 fe85 	bl	800a5fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80098f4:	f000 f964 	bl	8009bc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098f8:	f000 fcb2 	bl	800a260 <xTaskResumeAll>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f47f af67 	bne.w	80097d2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009904:	4b18      	ldr	r3, [pc, #96]	@ (8009968 <xQueueSemaphoreTake+0x21c>)
 8009906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	e75d      	b.n	80097d2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009916:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009918:	f000 f952 	bl	8009bc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800991c:	f000 fca0 	bl	800a260 <xTaskResumeAll>
 8009920:	e757      	b.n	80097d2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009922:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009924:	f000 f94c 	bl	8009bc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009928:	f000 fc9a 	bl	800a260 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800992c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800992e:	f000 f999 	bl	8009c64 <prvIsQueueEmpty>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	f43f af4c 	beq.w	80097d2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800993a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00d      	beq.n	800995c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009940:	f001 ffca 	bl	800b8d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009944:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009946:	f000 f893 	bl	8009a70 <prvGetDisinheritPriorityAfterTimeout>
 800994a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800994c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009952:	4618      	mov	r0, r3
 8009954:	f001 fa12 	bl	800ad7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009958:	f001 fff0 	bl	800b93c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800995c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800995e:	4618      	mov	r0, r3
 8009960:	3738      	adds	r7, #56	@ 0x38
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	e000ed04 	.word	0xe000ed04

0800996c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b08e      	sub	sp, #56	@ 0x38
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800997c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10b      	bne.n	800999a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009986:	f383 8811 	msr	BASEPRI, r3
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	623b      	str	r3, [r7, #32]
}
 8009994:	bf00      	nop
 8009996:	bf00      	nop
 8009998:	e7fd      	b.n	8009996 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d103      	bne.n	80099a8 <xQueueReceiveFromISR+0x3c>
 80099a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <xQueueReceiveFromISR+0x40>
 80099a8:	2301      	movs	r3, #1
 80099aa:	e000      	b.n	80099ae <xQueueReceiveFromISR+0x42>
 80099ac:	2300      	movs	r3, #0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10b      	bne.n	80099ca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	61fb      	str	r3, [r7, #28]
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop
 80099c8:	e7fd      	b.n	80099c6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099ca:	f002 f865 	bl	800ba98 <vPortValidateInterruptPriority>
	__asm volatile
 80099ce:	f3ef 8211 	mrs	r2, BASEPRI
 80099d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	61ba      	str	r2, [r7, #24]
 80099e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80099e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d02f      	beq.n	8009a56 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80099f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a00:	68b9      	ldr	r1, [r7, #8]
 8009a02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a04:	f000 f8b6 	bl	8009b74 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0a:	1e5a      	subs	r2, r3, #1
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a0e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009a10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a18:	d112      	bne.n	8009a40 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d016      	beq.n	8009a50 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a24:	3310      	adds	r3, #16
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fe78 	bl	800a71c <xTaskRemoveFromEventList>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00e      	beq.n	8009a50 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00b      	beq.n	8009a50 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	e007      	b.n	8009a50 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009a40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a44:	3301      	adds	r3, #1
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	b25a      	sxtb	r2, r3
 8009a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009a50:	2301      	movs	r3, #1
 8009a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a54:	e001      	b.n	8009a5a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f383 8811 	msr	BASEPRI, r3
}
 8009a64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3738      	adds	r7, #56	@ 0x38
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d006      	beq.n	8009a8e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	e001      	b.n	8009a92 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009a92:	68fb      	ldr	r3, [r7, #12]
	}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009aac:	2300      	movs	r3, #0
 8009aae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ab4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10d      	bne.n	8009ada <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d14d      	bne.n	8009b62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f001 f8e6 	bl	800ac9c <xTaskPriorityDisinherit>
 8009ad0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	609a      	str	r2, [r3, #8]
 8009ad8:	e043      	b.n	8009b62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d119      	bne.n	8009b14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6858      	ldr	r0, [r3, #4]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ae8:	461a      	mov	r2, r3
 8009aea:	68b9      	ldr	r1, [r7, #8]
 8009aec:	f002 ff98 	bl	800ca20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	685a      	ldr	r2, [r3, #4]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009af8:	441a      	add	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	685a      	ldr	r2, [r3, #4]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d32b      	bcc.n	8009b62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	605a      	str	r2, [r3, #4]
 8009b12:	e026      	b.n	8009b62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	68d8      	ldr	r0, [r3, #12]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	68b9      	ldr	r1, [r7, #8]
 8009b20:	f002 ff7e 	bl	800ca20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	68da      	ldr	r2, [r3, #12]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b2c:	425b      	negs	r3, r3
 8009b2e:	441a      	add	r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	68da      	ldr	r2, [r3, #12]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d207      	bcs.n	8009b50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	689a      	ldr	r2, [r3, #8]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b48:	425b      	negs	r3, r3
 8009b4a:	441a      	add	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d105      	bne.n	8009b62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d002      	beq.n	8009b62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009b6a:	697b      	ldr	r3, [r7, #20]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3718      	adds	r7, #24
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d018      	beq.n	8009bb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68da      	ldr	r2, [r3, #12]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b8e:	441a      	add	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	68da      	ldr	r2, [r3, #12]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d303      	bcc.n	8009ba8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	68d9      	ldr	r1, [r3, #12]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	6838      	ldr	r0, [r7, #0]
 8009bb4:	f002 ff34 	bl	800ca20 <memcpy>
	}
}
 8009bb8:	bf00      	nop
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009bc8:	f001 fe86 	bl	800b8d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009bd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bd4:	e011      	b.n	8009bfa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d012      	beq.n	8009c04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3324      	adds	r3, #36	@ 0x24
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 fd9a 	bl	800a71c <xTaskRemoveFromEventList>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d001      	beq.n	8009bf2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009bee:	f000 fed7 	bl	800a9a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	dce9      	bgt.n	8009bd6 <prvUnlockQueue+0x16>
 8009c02:	e000      	b.n	8009c06 <prvUnlockQueue+0x46>
					break;
 8009c04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	22ff      	movs	r2, #255	@ 0xff
 8009c0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009c0e:	f001 fe95 	bl	800b93c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c12:	f001 fe61 	bl	800b8d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c1e:	e011      	b.n	8009c44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d012      	beq.n	8009c4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	3310      	adds	r3, #16
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f000 fd75 	bl	800a71c <xTaskRemoveFromEventList>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d001      	beq.n	8009c3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c38:	f000 feb2 	bl	800a9a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c3c:	7bbb      	ldrb	r3, [r7, #14]
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	dce9      	bgt.n	8009c20 <prvUnlockQueue+0x60>
 8009c4c:	e000      	b.n	8009c50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	22ff      	movs	r2, #255	@ 0xff
 8009c54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009c58:	f001 fe70 	bl	800b93c <vPortExitCritical>
}
 8009c5c:	bf00      	nop
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c6c:	f001 fe34 	bl	800b8d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d102      	bne.n	8009c7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	60fb      	str	r3, [r7, #12]
 8009c7c:	e001      	b.n	8009c82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c82:	f001 fe5b 	bl	800b93c <vPortExitCritical>

	return xReturn;
 8009c86:	68fb      	ldr	r3, [r7, #12]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c98:	f001 fe1e 	bl	800b8d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d102      	bne.n	8009cae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	60fb      	str	r3, [r7, #12]
 8009cac:	e001      	b.n	8009cb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009cb2:	f001 fe43 	bl	800b93c <vPortExitCritical>

	return xReturn;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cca:	2300      	movs	r3, #0
 8009ccc:	60fb      	str	r3, [r7, #12]
 8009cce:	e014      	b.n	8009cfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009cd0:	4a0f      	ldr	r2, [pc, #60]	@ (8009d10 <vQueueAddToRegistry+0x50>)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10b      	bne.n	8009cf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009cdc:	490c      	ldr	r1, [pc, #48]	@ (8009d10 <vQueueAddToRegistry+0x50>)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8009d10 <vQueueAddToRegistry+0x50>)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	00db      	lsls	r3, r3, #3
 8009cec:	4413      	add	r3, r2
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009cf2:	e006      	b.n	8009d02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	60fb      	str	r3, [r7, #12]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b07      	cmp	r3, #7
 8009cfe:	d9e7      	bls.n	8009cd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009d00:	bf00      	nop
 8009d02:	bf00      	nop
 8009d04:	3714      	adds	r7, #20
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	20000a04 	.word	0x20000a04

08009d14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d24:	f001 fdd8 	bl	800b8d8 <vPortEnterCritical>
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d2e:	b25b      	sxtb	r3, r3
 8009d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d34:	d103      	bne.n	8009d3e <vQueueWaitForMessageRestricted+0x2a>
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d44:	b25b      	sxtb	r3, r3
 8009d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d4a:	d103      	bne.n	8009d54 <vQueueWaitForMessageRestricted+0x40>
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d54:	f001 fdf2 	bl	800b93c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d106      	bne.n	8009d6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	3324      	adds	r3, #36	@ 0x24
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	68b9      	ldr	r1, [r7, #8]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f000 fcab 	bl	800a6c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d6e:	6978      	ldr	r0, [r7, #20]
 8009d70:	f7ff ff26 	bl	8009bc0 <prvUnlockQueue>
	}
 8009d74:	bf00      	nop
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b08e      	sub	sp, #56	@ 0x38
 8009d80:	af04      	add	r7, sp, #16
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
 8009d88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10b      	bne.n	8009da8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	623b      	str	r3, [r7, #32]
}
 8009da2:	bf00      	nop
 8009da4:	bf00      	nop
 8009da6:	e7fd      	b.n	8009da4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10b      	bne.n	8009dc6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	61fb      	str	r3, [r7, #28]
}
 8009dc0:	bf00      	nop
 8009dc2:	bf00      	nop
 8009dc4:	e7fd      	b.n	8009dc2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009dc6:	23a8      	movs	r3, #168	@ 0xa8
 8009dc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	2ba8      	cmp	r3, #168	@ 0xa8
 8009dce:	d00b      	beq.n	8009de8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	61bb      	str	r3, [r7, #24]
}
 8009de2:	bf00      	nop
 8009de4:	bf00      	nop
 8009de6:	e7fd      	b.n	8009de4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009de8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d01e      	beq.n	8009e2e <xTaskCreateStatic+0xb2>
 8009df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d01b      	beq.n	8009e2e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009dfe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e02:	2202      	movs	r2, #2
 8009e04:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e08:	2300      	movs	r3, #0
 8009e0a:	9303      	str	r3, [sp, #12]
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0e:	9302      	str	r3, [sp, #8]
 8009e10:	f107 0314 	add.w	r3, r7, #20
 8009e14:	9301      	str	r3, [sp, #4]
 8009e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	68b9      	ldr	r1, [r7, #8]
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 f851 	bl	8009ec8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e28:	f000 f8f6 	bl	800a018 <prvAddNewTaskToReadyList>
 8009e2c:	e001      	b.n	8009e32 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e32:	697b      	ldr	r3, [r7, #20]
	}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3728      	adds	r7, #40	@ 0x28
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08c      	sub	sp, #48	@ 0x30
 8009e40:	af04      	add	r7, sp, #16
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	603b      	str	r3, [r7, #0]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e4c:	88fb      	ldrh	r3, [r7, #6]
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4618      	mov	r0, r3
 8009e52:	f001 fe63 	bl	800bb1c <pvPortMalloc>
 8009e56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00e      	beq.n	8009e7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e5e:	20a8      	movs	r0, #168	@ 0xa8
 8009e60:	f001 fe5c 	bl	800bb1c <pvPortMalloc>
 8009e64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d003      	beq.n	8009e74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	631a      	str	r2, [r3, #48]	@ 0x30
 8009e72:	e005      	b.n	8009e80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e74:	6978      	ldr	r0, [r7, #20]
 8009e76:	f001 ff1f 	bl	800bcb8 <vPortFree>
 8009e7a:	e001      	b.n	8009e80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d017      	beq.n	8009eb6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e8e:	88fa      	ldrh	r2, [r7, #6]
 8009e90:	2300      	movs	r3, #0
 8009e92:	9303      	str	r3, [sp, #12]
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	9302      	str	r3, [sp, #8]
 8009e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e9a:	9301      	str	r3, [sp, #4]
 8009e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	68b9      	ldr	r1, [r7, #8]
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f000 f80f 	bl	8009ec8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009eaa:	69f8      	ldr	r0, [r7, #28]
 8009eac:	f000 f8b4 	bl	800a018 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	61bb      	str	r3, [r7, #24]
 8009eb4:	e002      	b.n	8009ebc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009ebc:	69bb      	ldr	r3, [r7, #24]
	}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3720      	adds	r7, #32
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
	...

08009ec8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b088      	sub	sp, #32
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
 8009ed4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	461a      	mov	r2, r3
 8009ee0:	21a5      	movs	r1, #165	@ 0xa5
 8009ee2:	f002 fd13 	bl	800c90c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4413      	add	r3, r2
 8009ef6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	f023 0307 	bic.w	r3, r3, #7
 8009efe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	f003 0307 	and.w	r3, r3, #7
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00b      	beq.n	8009f22 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f0e:	f383 8811 	msr	BASEPRI, r3
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	617b      	str	r3, [r7, #20]
}
 8009f1c:	bf00      	nop
 8009f1e:	bf00      	nop
 8009f20:	e7fd      	b.n	8009f1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d01f      	beq.n	8009f68 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f28:	2300      	movs	r3, #0
 8009f2a:	61fb      	str	r3, [r7, #28]
 8009f2c:	e012      	b.n	8009f54 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	4413      	add	r3, r2
 8009f34:	7819      	ldrb	r1, [r3, #0]
 8009f36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	3334      	adds	r3, #52	@ 0x34
 8009f3e:	460a      	mov	r2, r1
 8009f40:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	4413      	add	r3, r2
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d006      	beq.n	8009f5c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	3301      	adds	r3, #1
 8009f52:	61fb      	str	r3, [r7, #28]
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	2b0f      	cmp	r3, #15
 8009f58:	d9e9      	bls.n	8009f2e <prvInitialiseNewTask+0x66>
 8009f5a:	e000      	b.n	8009f5e <prvInitialiseNewTask+0x96>
			{
				break;
 8009f5c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009f66:	e003      	b.n	8009f70 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f72:	2b37      	cmp	r3, #55	@ 0x37
 8009f74:	d901      	bls.n	8009f7a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f76:	2337      	movs	r3, #55	@ 0x37
 8009f78:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f88:	2200      	movs	r2, #0
 8009f8a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8e:	3304      	adds	r3, #4
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fe fec7 	bl	8008d24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f98:	3318      	adds	r3, #24
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fe fec2 	bl	8008d24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fa4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fb4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc8:	3354      	adds	r3, #84	@ 0x54
 8009fca:	224c      	movs	r2, #76	@ 0x4c
 8009fcc:	2100      	movs	r1, #0
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f002 fc9c 	bl	800c90c <memset>
 8009fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd6:	4a0d      	ldr	r2, [pc, #52]	@ (800a00c <prvInitialiseNewTask+0x144>)
 8009fd8:	659a      	str	r2, [r3, #88]	@ 0x58
 8009fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fdc:	4a0c      	ldr	r2, [pc, #48]	@ (800a010 <prvInitialiseNewTask+0x148>)
 8009fde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe2:	4a0c      	ldr	r2, [pc, #48]	@ (800a014 <prvInitialiseNewTask+0x14c>)
 8009fe4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009fe6:	683a      	ldr	r2, [r7, #0]
 8009fe8:	68f9      	ldr	r1, [r7, #12]
 8009fea:	69b8      	ldr	r0, [r7, #24]
 8009fec:	f001 fb44 	bl	800b678 <pxPortInitialiseStack>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d002      	beq.n	800a002 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a000:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a002:	bf00      	nop
 800a004:	3720      	adds	r7, #32
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	20006878 	.word	0x20006878
 800a010:	200068e0 	.word	0x200068e0
 800a014:	20006948 	.word	0x20006948

0800a018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a020:	f001 fc5a 	bl	800b8d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a024:	4b2d      	ldr	r3, [pc, #180]	@ (800a0dc <prvAddNewTaskToReadyList+0xc4>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	3301      	adds	r3, #1
 800a02a:	4a2c      	ldr	r2, [pc, #176]	@ (800a0dc <prvAddNewTaskToReadyList+0xc4>)
 800a02c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a02e:	4b2c      	ldr	r3, [pc, #176]	@ (800a0e0 <prvAddNewTaskToReadyList+0xc8>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d109      	bne.n	800a04a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a036:	4a2a      	ldr	r2, [pc, #168]	@ (800a0e0 <prvAddNewTaskToReadyList+0xc8>)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a03c:	4b27      	ldr	r3, [pc, #156]	@ (800a0dc <prvAddNewTaskToReadyList+0xc4>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d110      	bne.n	800a066 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a044:	f000 fcd0 	bl	800a9e8 <prvInitialiseTaskLists>
 800a048:	e00d      	b.n	800a066 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a04a:	4b26      	ldr	r3, [pc, #152]	@ (800a0e4 <prvAddNewTaskToReadyList+0xcc>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d109      	bne.n	800a066 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a052:	4b23      	ldr	r3, [pc, #140]	@ (800a0e0 <prvAddNewTaskToReadyList+0xc8>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d802      	bhi.n	800a066 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a060:	4a1f      	ldr	r2, [pc, #124]	@ (800a0e0 <prvAddNewTaskToReadyList+0xc8>)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a066:	4b20      	ldr	r3, [pc, #128]	@ (800a0e8 <prvAddNewTaskToReadyList+0xd0>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3301      	adds	r3, #1
 800a06c:	4a1e      	ldr	r2, [pc, #120]	@ (800a0e8 <prvAddNewTaskToReadyList+0xd0>)
 800a06e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a070:	4b1d      	ldr	r3, [pc, #116]	@ (800a0e8 <prvAddNewTaskToReadyList+0xd0>)
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a07c:	4b1b      	ldr	r3, [pc, #108]	@ (800a0ec <prvAddNewTaskToReadyList+0xd4>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	429a      	cmp	r2, r3
 800a082:	d903      	bls.n	800a08c <prvAddNewTaskToReadyList+0x74>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a088:	4a18      	ldr	r2, [pc, #96]	@ (800a0ec <prvAddNewTaskToReadyList+0xd4>)
 800a08a:	6013      	str	r3, [r2, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a090:	4613      	mov	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4a15      	ldr	r2, [pc, #84]	@ (800a0f0 <prvAddNewTaskToReadyList+0xd8>)
 800a09a:	441a      	add	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	3304      	adds	r3, #4
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	4610      	mov	r0, r2
 800a0a4:	f7fe fe4b 	bl	8008d3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a0a8:	f001 fc48 	bl	800b93c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a0ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a0e4 <prvAddNewTaskToReadyList+0xcc>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00e      	beq.n	800a0d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a0b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a0e0 <prvAddNewTaskToReadyList+0xc8>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d207      	bcs.n	800a0d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a0c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f4 <prvAddNewTaskToReadyList+0xdc>)
 800a0c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0d2:	bf00      	nop
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20000f18 	.word	0x20000f18
 800a0e0:	20000a44 	.word	0x20000a44
 800a0e4:	20000f24 	.word	0x20000f24
 800a0e8:	20000f34 	.word	0x20000f34
 800a0ec:	20000f20 	.word	0x20000f20
 800a0f0:	20000a48 	.word	0x20000a48
 800a0f4:	e000ed04 	.word	0xe000ed04

0800a0f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a100:	2300      	movs	r3, #0
 800a102:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d018      	beq.n	800a13c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a10a:	4b14      	ldr	r3, [pc, #80]	@ (800a15c <vTaskDelay+0x64>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00b      	beq.n	800a12a <vTaskDelay+0x32>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	60bb      	str	r3, [r7, #8]
}
 800a124:	bf00      	nop
 800a126:	bf00      	nop
 800a128:	e7fd      	b.n	800a126 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a12a:	f000 f88b 	bl	800a244 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a12e:	2100      	movs	r1, #0
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 fed3 	bl	800aedc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a136:	f000 f893 	bl	800a260 <xTaskResumeAll>
 800a13a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d107      	bne.n	800a152 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a142:	4b07      	ldr	r3, [pc, #28]	@ (800a160 <vTaskDelay+0x68>)
 800a144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a148:	601a      	str	r2, [r3, #0]
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a152:	bf00      	nop
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20000f40 	.word	0x20000f40
 800a160:	e000ed04 	.word	0xe000ed04

0800a164 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b08a      	sub	sp, #40	@ 0x28
 800a168:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a16a:	2300      	movs	r3, #0
 800a16c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a16e:	2300      	movs	r3, #0
 800a170:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a172:	463a      	mov	r2, r7
 800a174:	1d39      	adds	r1, r7, #4
 800a176:	f107 0308 	add.w	r3, r7, #8
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe fb0a 	bl	8008794 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a180:	6839      	ldr	r1, [r7, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	9202      	str	r2, [sp, #8]
 800a188:	9301      	str	r3, [sp, #4]
 800a18a:	2300      	movs	r3, #0
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	2300      	movs	r3, #0
 800a190:	460a      	mov	r2, r1
 800a192:	4924      	ldr	r1, [pc, #144]	@ (800a224 <vTaskStartScheduler+0xc0>)
 800a194:	4824      	ldr	r0, [pc, #144]	@ (800a228 <vTaskStartScheduler+0xc4>)
 800a196:	f7ff fdf1 	bl	8009d7c <xTaskCreateStatic>
 800a19a:	4603      	mov	r3, r0
 800a19c:	4a23      	ldr	r2, [pc, #140]	@ (800a22c <vTaskStartScheduler+0xc8>)
 800a19e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a1a0:	4b22      	ldr	r3, [pc, #136]	@ (800a22c <vTaskStartScheduler+0xc8>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d002      	beq.n	800a1ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	617b      	str	r3, [r7, #20]
 800a1ac:	e001      	b.n	800a1b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d102      	bne.n	800a1be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a1b8:	f000 fee4 	bl	800af84 <xTimerCreateTimerTask>
 800a1bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d11b      	bne.n	800a1fc <vTaskStartScheduler+0x98>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	613b      	str	r3, [r7, #16]
}
 800a1d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a1d8:	4b15      	ldr	r3, [pc, #84]	@ (800a230 <vTaskStartScheduler+0xcc>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	3354      	adds	r3, #84	@ 0x54
 800a1de:	4a15      	ldr	r2, [pc, #84]	@ (800a234 <vTaskStartScheduler+0xd0>)
 800a1e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a1e2:	4b15      	ldr	r3, [pc, #84]	@ (800a238 <vTaskStartScheduler+0xd4>)
 800a1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a1ea:	4b14      	ldr	r3, [pc, #80]	@ (800a23c <vTaskStartScheduler+0xd8>)
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a1f0:	4b13      	ldr	r3, [pc, #76]	@ (800a240 <vTaskStartScheduler+0xdc>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a1f6:	f001 facb 	bl	800b790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a1fa:	e00f      	b.n	800a21c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a202:	d10b      	bne.n	800a21c <vTaskStartScheduler+0xb8>
	__asm volatile
 800a204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	60fb      	str	r3, [r7, #12]
}
 800a216:	bf00      	nop
 800a218:	bf00      	nop
 800a21a:	e7fd      	b.n	800a218 <vTaskStartScheduler+0xb4>
}
 800a21c:	bf00      	nop
 800a21e:	3718      	adds	r7, #24
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	0800d320 	.word	0x0800d320
 800a228:	0800a9b9 	.word	0x0800a9b9
 800a22c:	20000f3c 	.word	0x20000f3c
 800a230:	20000a44 	.word	0x20000a44
 800a234:	20000124 	.word	0x20000124
 800a238:	20000f38 	.word	0x20000f38
 800a23c:	20000f24 	.word	0x20000f24
 800a240:	20000f1c 	.word	0x20000f1c

0800a244 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a244:	b480      	push	{r7}
 800a246:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a248:	4b04      	ldr	r3, [pc, #16]	@ (800a25c <vTaskSuspendAll+0x18>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3301      	adds	r3, #1
 800a24e:	4a03      	ldr	r2, [pc, #12]	@ (800a25c <vTaskSuspendAll+0x18>)
 800a250:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a252:	bf00      	nop
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	20000f40 	.word	0x20000f40

0800a260 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a266:	2300      	movs	r3, #0
 800a268:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a26a:	2300      	movs	r3, #0
 800a26c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a26e:	4b42      	ldr	r3, [pc, #264]	@ (800a378 <xTaskResumeAll+0x118>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10b      	bne.n	800a28e <xTaskResumeAll+0x2e>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	603b      	str	r3, [r7, #0]
}
 800a288:	bf00      	nop
 800a28a:	bf00      	nop
 800a28c:	e7fd      	b.n	800a28a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a28e:	f001 fb23 	bl	800b8d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a292:	4b39      	ldr	r3, [pc, #228]	@ (800a378 <xTaskResumeAll+0x118>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	3b01      	subs	r3, #1
 800a298:	4a37      	ldr	r2, [pc, #220]	@ (800a378 <xTaskResumeAll+0x118>)
 800a29a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a29c:	4b36      	ldr	r3, [pc, #216]	@ (800a378 <xTaskResumeAll+0x118>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d162      	bne.n	800a36a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a2a4:	4b35      	ldr	r3, [pc, #212]	@ (800a37c <xTaskResumeAll+0x11c>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d05e      	beq.n	800a36a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2ac:	e02f      	b.n	800a30e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2ae:	4b34      	ldr	r3, [pc, #208]	@ (800a380 <xTaskResumeAll+0x120>)
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	3318      	adds	r3, #24
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fe fd9c 	bl	8008df8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7fe fd97 	bl	8008df8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2ce:	4b2d      	ldr	r3, [pc, #180]	@ (800a384 <xTaskResumeAll+0x124>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d903      	bls.n	800a2de <xTaskResumeAll+0x7e>
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2da:	4a2a      	ldr	r2, [pc, #168]	@ (800a384 <xTaskResumeAll+0x124>)
 800a2dc:	6013      	str	r3, [r2, #0]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4413      	add	r3, r2
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4a27      	ldr	r2, [pc, #156]	@ (800a388 <xTaskResumeAll+0x128>)
 800a2ec:	441a      	add	r2, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	f7fe fd22 	bl	8008d3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2fe:	4b23      	ldr	r3, [pc, #140]	@ (800a38c <xTaskResumeAll+0x12c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a304:	429a      	cmp	r2, r3
 800a306:	d302      	bcc.n	800a30e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a308:	4b21      	ldr	r3, [pc, #132]	@ (800a390 <xTaskResumeAll+0x130>)
 800a30a:	2201      	movs	r2, #1
 800a30c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a30e:	4b1c      	ldr	r3, [pc, #112]	@ (800a380 <xTaskResumeAll+0x120>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1cb      	bne.n	800a2ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a31c:	f000 fc08 	bl	800ab30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a320:	4b1c      	ldr	r3, [pc, #112]	@ (800a394 <xTaskResumeAll+0x134>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d010      	beq.n	800a34e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a32c:	f000 f846 	bl	800a3bc <xTaskIncrementTick>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d002      	beq.n	800a33c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a336:	4b16      	ldr	r3, [pc, #88]	@ (800a390 <xTaskResumeAll+0x130>)
 800a338:	2201      	movs	r2, #1
 800a33a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	3b01      	subs	r3, #1
 800a340:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1f1      	bne.n	800a32c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a348:	4b12      	ldr	r3, [pc, #72]	@ (800a394 <xTaskResumeAll+0x134>)
 800a34a:	2200      	movs	r2, #0
 800a34c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a34e:	4b10      	ldr	r3, [pc, #64]	@ (800a390 <xTaskResumeAll+0x130>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d009      	beq.n	800a36a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a356:	2301      	movs	r3, #1
 800a358:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a35a:	4b0f      	ldr	r3, [pc, #60]	@ (800a398 <xTaskResumeAll+0x138>)
 800a35c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a360:	601a      	str	r2, [r3, #0]
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a36a:	f001 fae7 	bl	800b93c <vPortExitCritical>

	return xAlreadyYielded;
 800a36e:	68bb      	ldr	r3, [r7, #8]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	20000f40 	.word	0x20000f40
 800a37c:	20000f18 	.word	0x20000f18
 800a380:	20000ed8 	.word	0x20000ed8
 800a384:	20000f20 	.word	0x20000f20
 800a388:	20000a48 	.word	0x20000a48
 800a38c:	20000a44 	.word	0x20000a44
 800a390:	20000f2c 	.word	0x20000f2c
 800a394:	20000f28 	.word	0x20000f28
 800a398:	e000ed04 	.word	0xe000ed04

0800a39c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a3a2:	4b05      	ldr	r3, [pc, #20]	@ (800a3b8 <xTaskGetTickCount+0x1c>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a3a8:	687b      	ldr	r3, [r7, #4]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	20000f1c 	.word	0x20000f1c

0800a3bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b086      	sub	sp, #24
 800a3c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3c6:	4b4f      	ldr	r3, [pc, #316]	@ (800a504 <xTaskIncrementTick+0x148>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f040 8090 	bne.w	800a4f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a3d0:	4b4d      	ldr	r3, [pc, #308]	@ (800a508 <xTaskIncrementTick+0x14c>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a3d8:	4a4b      	ldr	r2, [pc, #300]	@ (800a508 <xTaskIncrementTick+0x14c>)
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d121      	bne.n	800a428 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a3e4:	4b49      	ldr	r3, [pc, #292]	@ (800a50c <xTaskIncrementTick+0x150>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00b      	beq.n	800a406 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	603b      	str	r3, [r7, #0]
}
 800a400:	bf00      	nop
 800a402:	bf00      	nop
 800a404:	e7fd      	b.n	800a402 <xTaskIncrementTick+0x46>
 800a406:	4b41      	ldr	r3, [pc, #260]	@ (800a50c <xTaskIncrementTick+0x150>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	60fb      	str	r3, [r7, #12]
 800a40c:	4b40      	ldr	r3, [pc, #256]	@ (800a510 <xTaskIncrementTick+0x154>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a3e      	ldr	r2, [pc, #248]	@ (800a50c <xTaskIncrementTick+0x150>)
 800a412:	6013      	str	r3, [r2, #0]
 800a414:	4a3e      	ldr	r2, [pc, #248]	@ (800a510 <xTaskIncrementTick+0x154>)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6013      	str	r3, [r2, #0]
 800a41a:	4b3e      	ldr	r3, [pc, #248]	@ (800a514 <xTaskIncrementTick+0x158>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	3301      	adds	r3, #1
 800a420:	4a3c      	ldr	r2, [pc, #240]	@ (800a514 <xTaskIncrementTick+0x158>)
 800a422:	6013      	str	r3, [r2, #0]
 800a424:	f000 fb84 	bl	800ab30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a428:	4b3b      	ldr	r3, [pc, #236]	@ (800a518 <xTaskIncrementTick+0x15c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d349      	bcc.n	800a4c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a432:	4b36      	ldr	r3, [pc, #216]	@ (800a50c <xTaskIncrementTick+0x150>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d104      	bne.n	800a446 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a43c:	4b36      	ldr	r3, [pc, #216]	@ (800a518 <xTaskIncrementTick+0x15c>)
 800a43e:	f04f 32ff 	mov.w	r2, #4294967295
 800a442:	601a      	str	r2, [r3, #0]
					break;
 800a444:	e03f      	b.n	800a4c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a446:	4b31      	ldr	r3, [pc, #196]	@ (800a50c <xTaskIncrementTick+0x150>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d203      	bcs.n	800a466 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a45e:	4a2e      	ldr	r2, [pc, #184]	@ (800a518 <xTaskIncrementTick+0x15c>)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a464:	e02f      	b.n	800a4c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	3304      	adds	r3, #4
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7fe fcc4 	bl	8008df8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a474:	2b00      	cmp	r3, #0
 800a476:	d004      	beq.n	800a482 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	3318      	adds	r3, #24
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fe fcbb 	bl	8008df8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a486:	4b25      	ldr	r3, [pc, #148]	@ (800a51c <xTaskIncrementTick+0x160>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d903      	bls.n	800a496 <xTaskIncrementTick+0xda>
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a492:	4a22      	ldr	r2, [pc, #136]	@ (800a51c <xTaskIncrementTick+0x160>)
 800a494:	6013      	str	r3, [r2, #0]
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a49a:	4613      	mov	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	4413      	add	r3, r2
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4a1f      	ldr	r2, [pc, #124]	@ (800a520 <xTaskIncrementTick+0x164>)
 800a4a4:	441a      	add	r2, r3
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	4610      	mov	r0, r2
 800a4ae:	f7fe fc46 	bl	8008d3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4b6:	4b1b      	ldr	r3, [pc, #108]	@ (800a524 <xTaskIncrementTick+0x168>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d3b8      	bcc.n	800a432 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4c4:	e7b5      	b.n	800a432 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a4c6:	4b17      	ldr	r3, [pc, #92]	@ (800a524 <xTaskIncrementTick+0x168>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4cc:	4914      	ldr	r1, [pc, #80]	@ (800a520 <xTaskIncrementTick+0x164>)
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	440b      	add	r3, r1
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d901      	bls.n	800a4e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a4e2:	4b11      	ldr	r3, [pc, #68]	@ (800a528 <xTaskIncrementTick+0x16c>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d007      	beq.n	800a4fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	617b      	str	r3, [r7, #20]
 800a4ee:	e004      	b.n	800a4fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a4f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a52c <xTaskIncrementTick+0x170>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	4a0d      	ldr	r2, [pc, #52]	@ (800a52c <xTaskIncrementTick+0x170>)
 800a4f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a4fa:	697b      	ldr	r3, [r7, #20]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3718      	adds	r7, #24
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	20000f40 	.word	0x20000f40
 800a508:	20000f1c 	.word	0x20000f1c
 800a50c:	20000ed0 	.word	0x20000ed0
 800a510:	20000ed4 	.word	0x20000ed4
 800a514:	20000f30 	.word	0x20000f30
 800a518:	20000f38 	.word	0x20000f38
 800a51c:	20000f20 	.word	0x20000f20
 800a520:	20000a48 	.word	0x20000a48
 800a524:	20000a44 	.word	0x20000a44
 800a528:	20000f2c 	.word	0x20000f2c
 800a52c:	20000f28 	.word	0x20000f28

0800a530 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a536:	4b2b      	ldr	r3, [pc, #172]	@ (800a5e4 <vTaskSwitchContext+0xb4>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a53e:	4b2a      	ldr	r3, [pc, #168]	@ (800a5e8 <vTaskSwitchContext+0xb8>)
 800a540:	2201      	movs	r2, #1
 800a542:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a544:	e047      	b.n	800a5d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a546:	4b28      	ldr	r3, [pc, #160]	@ (800a5e8 <vTaskSwitchContext+0xb8>)
 800a548:	2200      	movs	r2, #0
 800a54a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a54c:	4b27      	ldr	r3, [pc, #156]	@ (800a5ec <vTaskSwitchContext+0xbc>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	60fb      	str	r3, [r7, #12]
 800a552:	e011      	b.n	800a578 <vTaskSwitchContext+0x48>
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d10b      	bne.n	800a572 <vTaskSwitchContext+0x42>
	__asm volatile
 800a55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55e:	f383 8811 	msr	BASEPRI, r3
 800a562:	f3bf 8f6f 	isb	sy
 800a566:	f3bf 8f4f 	dsb	sy
 800a56a:	607b      	str	r3, [r7, #4]
}
 800a56c:	bf00      	nop
 800a56e:	bf00      	nop
 800a570:	e7fd      	b.n	800a56e <vTaskSwitchContext+0x3e>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	3b01      	subs	r3, #1
 800a576:	60fb      	str	r3, [r7, #12]
 800a578:	491d      	ldr	r1, [pc, #116]	@ (800a5f0 <vTaskSwitchContext+0xc0>)
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	4613      	mov	r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	4413      	add	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	440b      	add	r3, r1
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d0e3      	beq.n	800a554 <vTaskSwitchContext+0x24>
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	4613      	mov	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	4413      	add	r3, r2
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	4a16      	ldr	r2, [pc, #88]	@ (800a5f0 <vTaskSwitchContext+0xc0>)
 800a598:	4413      	add	r3, r2
 800a59a:	60bb      	str	r3, [r7, #8]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	685a      	ldr	r2, [r3, #4]
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	605a      	str	r2, [r3, #4]
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	685a      	ldr	r2, [r3, #4]
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d104      	bne.n	800a5bc <vTaskSwitchContext+0x8c>
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	685a      	ldr	r2, [r3, #4]
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	605a      	str	r2, [r3, #4]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	4a0c      	ldr	r2, [pc, #48]	@ (800a5f4 <vTaskSwitchContext+0xc4>)
 800a5c4:	6013      	str	r3, [r2, #0]
 800a5c6:	4a09      	ldr	r2, [pc, #36]	@ (800a5ec <vTaskSwitchContext+0xbc>)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a5cc:	4b09      	ldr	r3, [pc, #36]	@ (800a5f4 <vTaskSwitchContext+0xc4>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3354      	adds	r3, #84	@ 0x54
 800a5d2:	4a09      	ldr	r2, [pc, #36]	@ (800a5f8 <vTaskSwitchContext+0xc8>)
 800a5d4:	6013      	str	r3, [r2, #0]
}
 800a5d6:	bf00      	nop
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	20000f40 	.word	0x20000f40
 800a5e8:	20000f2c 	.word	0x20000f2c
 800a5ec:	20000f20 	.word	0x20000f20
 800a5f0:	20000a48 	.word	0x20000a48
 800a5f4:	20000a44 	.word	0x20000a44
 800a5f8:	20000124 	.word	0x20000124

0800a5fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10b      	bne.n	800a624 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	60fb      	str	r3, [r7, #12]
}
 800a61e:	bf00      	nop
 800a620:	bf00      	nop
 800a622:	e7fd      	b.n	800a620 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a624:	4b07      	ldr	r3, [pc, #28]	@ (800a644 <vTaskPlaceOnEventList+0x48>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	3318      	adds	r3, #24
 800a62a:	4619      	mov	r1, r3
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f7fe fbaa 	bl	8008d86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a632:	2101      	movs	r1, #1
 800a634:	6838      	ldr	r0, [r7, #0]
 800a636:	f000 fc51 	bl	800aedc <prvAddCurrentTaskToDelayedList>
}
 800a63a:	bf00      	nop
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20000a44 	.word	0x20000a44

0800a648 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10b      	bne.n	800a672 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	617b      	str	r3, [r7, #20]
}
 800a66c:	bf00      	nop
 800a66e:	bf00      	nop
 800a670:	e7fd      	b.n	800a66e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800a672:	4b12      	ldr	r3, [pc, #72]	@ (800a6bc <vTaskPlaceOnUnorderedEventList+0x74>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d10b      	bne.n	800a692 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800a67a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a67e:	f383 8811 	msr	BASEPRI, r3
 800a682:	f3bf 8f6f 	isb	sy
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	613b      	str	r3, [r7, #16]
}
 800a68c:	bf00      	nop
 800a68e:	bf00      	nop
 800a690:	e7fd      	b.n	800a68e <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a692:	4b0b      	ldr	r3, [pc, #44]	@ (800a6c0 <vTaskPlaceOnUnorderedEventList+0x78>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a69c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a69e:	4b08      	ldr	r3, [pc, #32]	@ (800a6c0 <vTaskPlaceOnUnorderedEventList+0x78>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	3318      	adds	r3, #24
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f7fe fb49 	bl	8008d3e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6ac:	2101      	movs	r1, #1
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fc14 	bl	800aedc <prvAddCurrentTaskToDelayedList>
}
 800a6b4:	bf00      	nop
 800a6b6:	3718      	adds	r7, #24
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	20000f40 	.word	0x20000f40
 800a6c0:	20000a44 	.word	0x20000a44

0800a6c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10b      	bne.n	800a6ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	617b      	str	r3, [r7, #20]
}
 800a6e8:	bf00      	nop
 800a6ea:	bf00      	nop
 800a6ec:	e7fd      	b.n	800a6ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6ee:	4b0a      	ldr	r3, [pc, #40]	@ (800a718 <vTaskPlaceOnEventListRestricted+0x54>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	3318      	adds	r3, #24
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7fe fb21 	bl	8008d3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d002      	beq.n	800a708 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a702:	f04f 33ff 	mov.w	r3, #4294967295
 800a706:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a708:	6879      	ldr	r1, [r7, #4]
 800a70a:	68b8      	ldr	r0, [r7, #8]
 800a70c:	f000 fbe6 	bl	800aedc <prvAddCurrentTaskToDelayedList>
	}
 800a710:	bf00      	nop
 800a712:	3718      	adds	r7, #24
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	20000a44 	.word	0x20000a44

0800a71c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10b      	bne.n	800a74a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	60fb      	str	r3, [r7, #12]
}
 800a744:	bf00      	nop
 800a746:	bf00      	nop
 800a748:	e7fd      	b.n	800a746 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	3318      	adds	r3, #24
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fe fb52 	bl	8008df8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a754:	4b1d      	ldr	r3, [pc, #116]	@ (800a7cc <xTaskRemoveFromEventList+0xb0>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d11d      	bne.n	800a798 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	3304      	adds	r3, #4
 800a760:	4618      	mov	r0, r3
 800a762:	f7fe fb49 	bl	8008df8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a76a:	4b19      	ldr	r3, [pc, #100]	@ (800a7d0 <xTaskRemoveFromEventList+0xb4>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d903      	bls.n	800a77a <xTaskRemoveFromEventList+0x5e>
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a776:	4a16      	ldr	r2, [pc, #88]	@ (800a7d0 <xTaskRemoveFromEventList+0xb4>)
 800a778:	6013      	str	r3, [r2, #0]
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a77e:	4613      	mov	r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4413      	add	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4a13      	ldr	r2, [pc, #76]	@ (800a7d4 <xTaskRemoveFromEventList+0xb8>)
 800a788:	441a      	add	r2, r3
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	3304      	adds	r3, #4
 800a78e:	4619      	mov	r1, r3
 800a790:	4610      	mov	r0, r2
 800a792:	f7fe fad4 	bl	8008d3e <vListInsertEnd>
 800a796:	e005      	b.n	800a7a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	3318      	adds	r3, #24
 800a79c:	4619      	mov	r1, r3
 800a79e:	480e      	ldr	r0, [pc, #56]	@ (800a7d8 <xTaskRemoveFromEventList+0xbc>)
 800a7a0:	f7fe facd 	bl	8008d3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a7dc <xTaskRemoveFromEventList+0xc0>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d905      	bls.n	800a7be <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a7b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a7e0 <xTaskRemoveFromEventList+0xc4>)
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	601a      	str	r2, [r3, #0]
 800a7bc:	e001      	b.n	800a7c2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a7c2:	697b      	ldr	r3, [r7, #20]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	20000f40 	.word	0x20000f40
 800a7d0:	20000f20 	.word	0x20000f20
 800a7d4:	20000a48 	.word	0x20000a48
 800a7d8:	20000ed8 	.word	0x20000ed8
 800a7dc:	20000a44 	.word	0x20000a44
 800a7e0:	20000f2c 	.word	0x20000f2c

0800a7e4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b086      	sub	sp, #24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a7ee:	4b2a      	ldr	r3, [pc, #168]	@ (800a898 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d10b      	bne.n	800a80e <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800a7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	613b      	str	r3, [r7, #16]
}
 800a808:	bf00      	nop
 800a80a:	bf00      	nop
 800a80c:	e7fd      	b.n	800a80a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10b      	bne.n	800a83c <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800a824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	60fb      	str	r3, [r7, #12]
}
 800a836:	bf00      	nop
 800a838:	bf00      	nop
 800a83a:	e7fd      	b.n	800a838 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f7fe fadb 	bl	8008df8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	3304      	adds	r3, #4
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe fad6 	bl	8008df8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a850:	4b12      	ldr	r3, [pc, #72]	@ (800a89c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	429a      	cmp	r2, r3
 800a856:	d903      	bls.n	800a860 <vTaskRemoveFromUnorderedEventList+0x7c>
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a85c:	4a0f      	ldr	r2, [pc, #60]	@ (800a89c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a85e:	6013      	str	r3, [r2, #0]
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a864:	4613      	mov	r3, r2
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	4413      	add	r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4a0c      	ldr	r2, [pc, #48]	@ (800a8a0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a86e:	441a      	add	r2, r3
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	3304      	adds	r3, #4
 800a874:	4619      	mov	r1, r3
 800a876:	4610      	mov	r0, r2
 800a878:	f7fe fa61 	bl	8008d3e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a880:	4b08      	ldr	r3, [pc, #32]	@ (800a8a4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a886:	429a      	cmp	r2, r3
 800a888:	d902      	bls.n	800a890 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a88a:	4b07      	ldr	r3, [pc, #28]	@ (800a8a8 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800a88c:	2201      	movs	r2, #1
 800a88e:	601a      	str	r2, [r3, #0]
	}
}
 800a890:	bf00      	nop
 800a892:	3718      	adds	r7, #24
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	20000f40 	.word	0x20000f40
 800a89c:	20000f20 	.word	0x20000f20
 800a8a0:	20000a48 	.word	0x20000a48
 800a8a4:	20000a44 	.word	0x20000a44
 800a8a8:	20000f2c 	.word	0x20000f2c

0800a8ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a8b4:	4b06      	ldr	r3, [pc, #24]	@ (800a8d0 <vTaskInternalSetTimeOutState+0x24>)
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a8bc:	4b05      	ldr	r3, [pc, #20]	@ (800a8d4 <vTaskInternalSetTimeOutState+0x28>)
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	605a      	str	r2, [r3, #4]
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	20000f30 	.word	0x20000f30
 800a8d4:	20000f1c 	.word	0x20000f1c

0800a8d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b088      	sub	sp, #32
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10b      	bne.n	800a900 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ec:	f383 8811 	msr	BASEPRI, r3
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	613b      	str	r3, [r7, #16]
}
 800a8fa:	bf00      	nop
 800a8fc:	bf00      	nop
 800a8fe:	e7fd      	b.n	800a8fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10b      	bne.n	800a91e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	60fb      	str	r3, [r7, #12]
}
 800a918:	bf00      	nop
 800a91a:	bf00      	nop
 800a91c:	e7fd      	b.n	800a91a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a91e:	f000 ffdb 	bl	800b8d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a922:	4b1d      	ldr	r3, [pc, #116]	@ (800a998 <xTaskCheckForTimeOut+0xc0>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	69ba      	ldr	r2, [r7, #24]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a93a:	d102      	bne.n	800a942 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a93c:	2300      	movs	r3, #0
 800a93e:	61fb      	str	r3, [r7, #28]
 800a940:	e023      	b.n	800a98a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	4b15      	ldr	r3, [pc, #84]	@ (800a99c <xTaskCheckForTimeOut+0xc4>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d007      	beq.n	800a95e <xTaskCheckForTimeOut+0x86>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	69ba      	ldr	r2, [r7, #24]
 800a954:	429a      	cmp	r2, r3
 800a956:	d302      	bcc.n	800a95e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a958:	2301      	movs	r3, #1
 800a95a:	61fb      	str	r3, [r7, #28]
 800a95c:	e015      	b.n	800a98a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	697a      	ldr	r2, [r7, #20]
 800a964:	429a      	cmp	r2, r3
 800a966:	d20b      	bcs.n	800a980 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	1ad2      	subs	r2, r2, r3
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f7ff ff99 	bl	800a8ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a97a:	2300      	movs	r3, #0
 800a97c:	61fb      	str	r3, [r7, #28]
 800a97e:	e004      	b.n	800a98a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	2200      	movs	r2, #0
 800a984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a986:	2301      	movs	r3, #1
 800a988:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a98a:	f000 ffd7 	bl	800b93c <vPortExitCritical>

	return xReturn;
 800a98e:	69fb      	ldr	r3, [r7, #28]
}
 800a990:	4618      	mov	r0, r3
 800a992:	3720      	adds	r7, #32
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	20000f1c 	.word	0x20000f1c
 800a99c:	20000f30 	.word	0x20000f30

0800a9a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a9a4:	4b03      	ldr	r3, [pc, #12]	@ (800a9b4 <vTaskMissedYield+0x14>)
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	601a      	str	r2, [r3, #0]
}
 800a9aa:	bf00      	nop
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	20000f2c 	.word	0x20000f2c

0800a9b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a9c0:	f000 f852 	bl	800aa68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a9c4:	4b06      	ldr	r3, [pc, #24]	@ (800a9e0 <prvIdleTask+0x28>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d9f9      	bls.n	800a9c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a9cc:	4b05      	ldr	r3, [pc, #20]	@ (800a9e4 <prvIdleTask+0x2c>)
 800a9ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a9dc:	e7f0      	b.n	800a9c0 <prvIdleTask+0x8>
 800a9de:	bf00      	nop
 800a9e0:	20000a48 	.word	0x20000a48
 800a9e4:	e000ed04 	.word	0xe000ed04

0800a9e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	607b      	str	r3, [r7, #4]
 800a9f2:	e00c      	b.n	800aa0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	4413      	add	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4a12      	ldr	r2, [pc, #72]	@ (800aa48 <prvInitialiseTaskLists+0x60>)
 800aa00:	4413      	add	r3, r2
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fe f96e 	bl	8008ce4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	607b      	str	r3, [r7, #4]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2b37      	cmp	r3, #55	@ 0x37
 800aa12:	d9ef      	bls.n	800a9f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa14:	480d      	ldr	r0, [pc, #52]	@ (800aa4c <prvInitialiseTaskLists+0x64>)
 800aa16:	f7fe f965 	bl	8008ce4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa1a:	480d      	ldr	r0, [pc, #52]	@ (800aa50 <prvInitialiseTaskLists+0x68>)
 800aa1c:	f7fe f962 	bl	8008ce4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa20:	480c      	ldr	r0, [pc, #48]	@ (800aa54 <prvInitialiseTaskLists+0x6c>)
 800aa22:	f7fe f95f 	bl	8008ce4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa26:	480c      	ldr	r0, [pc, #48]	@ (800aa58 <prvInitialiseTaskLists+0x70>)
 800aa28:	f7fe f95c 	bl	8008ce4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa2c:	480b      	ldr	r0, [pc, #44]	@ (800aa5c <prvInitialiseTaskLists+0x74>)
 800aa2e:	f7fe f959 	bl	8008ce4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa32:	4b0b      	ldr	r3, [pc, #44]	@ (800aa60 <prvInitialiseTaskLists+0x78>)
 800aa34:	4a05      	ldr	r2, [pc, #20]	@ (800aa4c <prvInitialiseTaskLists+0x64>)
 800aa36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa38:	4b0a      	ldr	r3, [pc, #40]	@ (800aa64 <prvInitialiseTaskLists+0x7c>)
 800aa3a:	4a05      	ldr	r2, [pc, #20]	@ (800aa50 <prvInitialiseTaskLists+0x68>)
 800aa3c:	601a      	str	r2, [r3, #0]
}
 800aa3e:	bf00      	nop
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20000a48 	.word	0x20000a48
 800aa4c:	20000ea8 	.word	0x20000ea8
 800aa50:	20000ebc 	.word	0x20000ebc
 800aa54:	20000ed8 	.word	0x20000ed8
 800aa58:	20000eec 	.word	0x20000eec
 800aa5c:	20000f04 	.word	0x20000f04
 800aa60:	20000ed0 	.word	0x20000ed0
 800aa64:	20000ed4 	.word	0x20000ed4

0800aa68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa6e:	e019      	b.n	800aaa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa70:	f000 ff32 	bl	800b8d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa74:	4b10      	ldr	r3, [pc, #64]	@ (800aab8 <prvCheckTasksWaitingTermination+0x50>)
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	3304      	adds	r3, #4
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7fe f9b9 	bl	8008df8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa86:	4b0d      	ldr	r3, [pc, #52]	@ (800aabc <prvCheckTasksWaitingTermination+0x54>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	4a0b      	ldr	r2, [pc, #44]	@ (800aabc <prvCheckTasksWaitingTermination+0x54>)
 800aa8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa90:	4b0b      	ldr	r3, [pc, #44]	@ (800aac0 <prvCheckTasksWaitingTermination+0x58>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3b01      	subs	r3, #1
 800aa96:	4a0a      	ldr	r2, [pc, #40]	@ (800aac0 <prvCheckTasksWaitingTermination+0x58>)
 800aa98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa9a:	f000 ff4f 	bl	800b93c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f810 	bl	800aac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aaa4:	4b06      	ldr	r3, [pc, #24]	@ (800aac0 <prvCheckTasksWaitingTermination+0x58>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d1e1      	bne.n	800aa70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aaac:	bf00      	nop
 800aaae:	bf00      	nop
 800aab0:	3708      	adds	r7, #8
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	20000eec 	.word	0x20000eec
 800aabc:	20000f18 	.word	0x20000f18
 800aac0:	20000f00 	.word	0x20000f00

0800aac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	3354      	adds	r3, #84	@ 0x54
 800aad0:	4618      	mov	r0, r3
 800aad2:	f001 ff23 	bl	800c91c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d108      	bne.n	800aaf2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aae4:	4618      	mov	r0, r3
 800aae6:	f001 f8e7 	bl	800bcb8 <vPortFree>
				vPortFree( pxTCB );
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f001 f8e4 	bl	800bcb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aaf0:	e019      	b.n	800ab26 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d103      	bne.n	800ab04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f001 f8db 	bl	800bcb8 <vPortFree>
	}
 800ab02:	e010      	b.n	800ab26 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d00b      	beq.n	800ab26 <prvDeleteTCB+0x62>
	__asm volatile
 800ab0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	60fb      	str	r3, [r7, #12]
}
 800ab20:	bf00      	nop
 800ab22:	bf00      	nop
 800ab24:	e7fd      	b.n	800ab22 <prvDeleteTCB+0x5e>
	}
 800ab26:	bf00      	nop
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
	...

0800ab30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab36:	4b0c      	ldr	r3, [pc, #48]	@ (800ab68 <prvResetNextTaskUnblockTime+0x38>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d104      	bne.n	800ab4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab40:	4b0a      	ldr	r3, [pc, #40]	@ (800ab6c <prvResetNextTaskUnblockTime+0x3c>)
 800ab42:	f04f 32ff 	mov.w	r2, #4294967295
 800ab46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab48:	e008      	b.n	800ab5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab4a:	4b07      	ldr	r3, [pc, #28]	@ (800ab68 <prvResetNextTaskUnblockTime+0x38>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	4a04      	ldr	r2, [pc, #16]	@ (800ab6c <prvResetNextTaskUnblockTime+0x3c>)
 800ab5a:	6013      	str	r3, [r2, #0]
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	20000ed0 	.word	0x20000ed0
 800ab6c:	20000f38 	.word	0x20000f38

0800ab70 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ab76:	4b05      	ldr	r3, [pc, #20]	@ (800ab8c <xTaskGetCurrentTaskHandle+0x1c>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ab7c:	687b      	ldr	r3, [r7, #4]
	}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	370c      	adds	r7, #12
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	20000a44 	.word	0x20000a44

0800ab90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab96:	4b0b      	ldr	r3, [pc, #44]	@ (800abc4 <xTaskGetSchedulerState+0x34>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d102      	bne.n	800aba4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	607b      	str	r3, [r7, #4]
 800aba2:	e008      	b.n	800abb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aba4:	4b08      	ldr	r3, [pc, #32]	@ (800abc8 <xTaskGetSchedulerState+0x38>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d102      	bne.n	800abb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800abac:	2302      	movs	r3, #2
 800abae:	607b      	str	r3, [r7, #4]
 800abb0:	e001      	b.n	800abb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800abb2:	2300      	movs	r3, #0
 800abb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800abb6:	687b      	ldr	r3, [r7, #4]
	}
 800abb8:	4618      	mov	r0, r3
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr
 800abc4:	20000f24 	.word	0x20000f24
 800abc8:	20000f40 	.word	0x20000f40

0800abcc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800abd8:	2300      	movs	r3, #0
 800abda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d051      	beq.n	800ac86 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abe6:	4b2a      	ldr	r3, [pc, #168]	@ (800ac90 <xTaskPriorityInherit+0xc4>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abec:	429a      	cmp	r2, r3
 800abee:	d241      	bcs.n	800ac74 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	699b      	ldr	r3, [r3, #24]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	db06      	blt.n	800ac06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abf8:	4b25      	ldr	r3, [pc, #148]	@ (800ac90 <xTaskPriorityInherit+0xc4>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abfe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	6959      	ldr	r1, [r3, #20]
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac0e:	4613      	mov	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	4a1f      	ldr	r2, [pc, #124]	@ (800ac94 <xTaskPriorityInherit+0xc8>)
 800ac18:	4413      	add	r3, r2
 800ac1a:	4299      	cmp	r1, r3
 800ac1c:	d122      	bne.n	800ac64 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	3304      	adds	r3, #4
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fe f8e8 	bl	8008df8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac28:	4b19      	ldr	r3, [pc, #100]	@ (800ac90 <xTaskPriorityInherit+0xc4>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac36:	4b18      	ldr	r3, [pc, #96]	@ (800ac98 <xTaskPriorityInherit+0xcc>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d903      	bls.n	800ac46 <xTaskPriorityInherit+0x7a>
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac42:	4a15      	ldr	r2, [pc, #84]	@ (800ac98 <xTaskPriorityInherit+0xcc>)
 800ac44:	6013      	str	r3, [r2, #0]
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4413      	add	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4a10      	ldr	r2, [pc, #64]	@ (800ac94 <xTaskPriorityInherit+0xc8>)
 800ac54:	441a      	add	r2, r3
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	3304      	adds	r3, #4
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	f7fe f86e 	bl	8008d3e <vListInsertEnd>
 800ac62:	e004      	b.n	800ac6e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac64:	4b0a      	ldr	r3, [pc, #40]	@ (800ac90 <xTaskPriorityInherit+0xc4>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	60fb      	str	r3, [r7, #12]
 800ac72:	e008      	b.n	800ac86 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac78:	4b05      	ldr	r3, [pc, #20]	@ (800ac90 <xTaskPriorityInherit+0xc4>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d201      	bcs.n	800ac86 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ac82:	2301      	movs	r3, #1
 800ac84:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac86:	68fb      	ldr	r3, [r7, #12]
	}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	20000a44 	.word	0x20000a44
 800ac94:	20000a48 	.word	0x20000a48
 800ac98:	20000f20 	.word	0x20000f20

0800ac9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aca8:	2300      	movs	r3, #0
 800acaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d058      	beq.n	800ad64 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800acb2:	4b2f      	ldr	r3, [pc, #188]	@ (800ad70 <xTaskPriorityDisinherit+0xd4>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	693a      	ldr	r2, [r7, #16]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d00b      	beq.n	800acd4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800acbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	60fb      	str	r3, [r7, #12]
}
 800acce:	bf00      	nop
 800acd0:	bf00      	nop
 800acd2:	e7fd      	b.n	800acd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10b      	bne.n	800acf4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800acdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	60bb      	str	r3, [r7, #8]
}
 800acee:	bf00      	nop
 800acf0:	bf00      	nop
 800acf2:	e7fd      	b.n	800acf0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acf8:	1e5a      	subs	r2, r3, #1
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d02c      	beq.n	800ad64 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d128      	bne.n	800ad64 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	3304      	adds	r3, #4
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fe f86e 	bl	8008df8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad34:	4b0f      	ldr	r3, [pc, #60]	@ (800ad74 <xTaskPriorityDisinherit+0xd8>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d903      	bls.n	800ad44 <xTaskPriorityDisinherit+0xa8>
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad40:	4a0c      	ldr	r2, [pc, #48]	@ (800ad74 <xTaskPriorityDisinherit+0xd8>)
 800ad42:	6013      	str	r3, [r2, #0]
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad48:	4613      	mov	r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4413      	add	r3, r2
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4a09      	ldr	r2, [pc, #36]	@ (800ad78 <xTaskPriorityDisinherit+0xdc>)
 800ad52:	441a      	add	r2, r3
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	3304      	adds	r3, #4
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4610      	mov	r0, r2
 800ad5c:	f7fd ffef 	bl	8008d3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad60:	2301      	movs	r3, #1
 800ad62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad64:	697b      	ldr	r3, [r7, #20]
	}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3718      	adds	r7, #24
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	20000a44 	.word	0x20000a44
 800ad74:	20000f20 	.word	0x20000f20
 800ad78:	20000a48 	.word	0x20000a48

0800ad7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b088      	sub	sp, #32
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d06c      	beq.n	800ae6e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10b      	bne.n	800adb4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ad9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	60fb      	str	r3, [r7, #12]
}
 800adae:	bf00      	nop
 800adb0:	bf00      	nop
 800adb2:	e7fd      	b.n	800adb0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d902      	bls.n	800adc4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	61fb      	str	r3, [r7, #28]
 800adc2:	e002      	b.n	800adca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adc8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adce:	69fa      	ldr	r2, [r7, #28]
 800add0:	429a      	cmp	r2, r3
 800add2:	d04c      	beq.n	800ae6e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	429a      	cmp	r2, r3
 800addc:	d147      	bne.n	800ae6e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800adde:	4b26      	ldr	r3, [pc, #152]	@ (800ae78 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	69ba      	ldr	r2, [r7, #24]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d10b      	bne.n	800ae00 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ade8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adec:	f383 8811 	msr	BASEPRI, r3
 800adf0:	f3bf 8f6f 	isb	sy
 800adf4:	f3bf 8f4f 	dsb	sy
 800adf8:	60bb      	str	r3, [r7, #8]
}
 800adfa:	bf00      	nop
 800adfc:	bf00      	nop
 800adfe:	e7fd      	b.n	800adfc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	69fa      	ldr	r2, [r7, #28]
 800ae0a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	699b      	ldr	r3, [r3, #24]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	db04      	blt.n	800ae1e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	6959      	ldr	r1, [r3, #20]
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	4613      	mov	r3, r2
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	4413      	add	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4a13      	ldr	r2, [pc, #76]	@ (800ae7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ae2e:	4413      	add	r3, r2
 800ae30:	4299      	cmp	r1, r3
 800ae32:	d11c      	bne.n	800ae6e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	3304      	adds	r3, #4
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7fd ffdd 	bl	8008df8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae42:	4b0f      	ldr	r3, [pc, #60]	@ (800ae80 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d903      	bls.n	800ae52 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae4e:	4a0c      	ldr	r2, [pc, #48]	@ (800ae80 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ae50:	6013      	str	r3, [r2, #0]
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae56:	4613      	mov	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	4a07      	ldr	r2, [pc, #28]	@ (800ae7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ae60:	441a      	add	r2, r3
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	3304      	adds	r3, #4
 800ae66:	4619      	mov	r1, r3
 800ae68:	4610      	mov	r0, r2
 800ae6a:	f7fd ff68 	bl	8008d3e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae6e:	bf00      	nop
 800ae70:	3720      	adds	r7, #32
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	20000a44 	.word	0x20000a44
 800ae7c:	20000a48 	.word	0x20000a48
 800ae80:	20000f20 	.word	0x20000f20

0800ae84 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ae8a:	4b09      	ldr	r3, [pc, #36]	@ (800aeb0 <uxTaskResetEventItemValue+0x2c>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae92:	4b07      	ldr	r3, [pc, #28]	@ (800aeb0 <uxTaskResetEventItemValue+0x2c>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae98:	4b05      	ldr	r3, [pc, #20]	@ (800aeb0 <uxTaskResetEventItemValue+0x2c>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800aea0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800aea2:	687b      	ldr	r3, [r7, #4]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	20000a44 	.word	0x20000a44

0800aeb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800aeb4:	b480      	push	{r7}
 800aeb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800aeb8:	4b07      	ldr	r3, [pc, #28]	@ (800aed8 <pvTaskIncrementMutexHeldCount+0x24>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d004      	beq.n	800aeca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800aec0:	4b05      	ldr	r3, [pc, #20]	@ (800aed8 <pvTaskIncrementMutexHeldCount+0x24>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aec6:	3201      	adds	r2, #1
 800aec8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800aeca:	4b03      	ldr	r3, [pc, #12]	@ (800aed8 <pvTaskIncrementMutexHeldCount+0x24>)
 800aecc:	681b      	ldr	r3, [r3, #0]
	}
 800aece:	4618      	mov	r0, r3
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr
 800aed8:	20000a44 	.word	0x20000a44

0800aedc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aee6:	4b21      	ldr	r3, [pc, #132]	@ (800af6c <prvAddCurrentTaskToDelayedList+0x90>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aeec:	4b20      	ldr	r3, [pc, #128]	@ (800af70 <prvAddCurrentTaskToDelayedList+0x94>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	3304      	adds	r3, #4
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fd ff80 	bl	8008df8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefe:	d10a      	bne.n	800af16 <prvAddCurrentTaskToDelayedList+0x3a>
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d007      	beq.n	800af16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af06:	4b1a      	ldr	r3, [pc, #104]	@ (800af70 <prvAddCurrentTaskToDelayedList+0x94>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	3304      	adds	r3, #4
 800af0c:	4619      	mov	r1, r3
 800af0e:	4819      	ldr	r0, [pc, #100]	@ (800af74 <prvAddCurrentTaskToDelayedList+0x98>)
 800af10:	f7fd ff15 	bl	8008d3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af14:	e026      	b.n	800af64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4413      	add	r3, r2
 800af1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af1e:	4b14      	ldr	r3, [pc, #80]	@ (800af70 <prvAddCurrentTaskToDelayedList+0x94>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d209      	bcs.n	800af42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af2e:	4b12      	ldr	r3, [pc, #72]	@ (800af78 <prvAddCurrentTaskToDelayedList+0x9c>)
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	4b0f      	ldr	r3, [pc, #60]	@ (800af70 <prvAddCurrentTaskToDelayedList+0x94>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	3304      	adds	r3, #4
 800af38:	4619      	mov	r1, r3
 800af3a:	4610      	mov	r0, r2
 800af3c:	f7fd ff23 	bl	8008d86 <vListInsert>
}
 800af40:	e010      	b.n	800af64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af42:	4b0e      	ldr	r3, [pc, #56]	@ (800af7c <prvAddCurrentTaskToDelayedList+0xa0>)
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	4b0a      	ldr	r3, [pc, #40]	@ (800af70 <prvAddCurrentTaskToDelayedList+0x94>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	3304      	adds	r3, #4
 800af4c:	4619      	mov	r1, r3
 800af4e:	4610      	mov	r0, r2
 800af50:	f7fd ff19 	bl	8008d86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af54:	4b0a      	ldr	r3, [pc, #40]	@ (800af80 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d202      	bcs.n	800af64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800af5e:	4a08      	ldr	r2, [pc, #32]	@ (800af80 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	6013      	str	r3, [r2, #0]
}
 800af64:	bf00      	nop
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	20000f1c 	.word	0x20000f1c
 800af70:	20000a44 	.word	0x20000a44
 800af74:	20000f04 	.word	0x20000f04
 800af78:	20000ed4 	.word	0x20000ed4
 800af7c:	20000ed0 	.word	0x20000ed0
 800af80:	20000f38 	.word	0x20000f38

0800af84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b08a      	sub	sp, #40	@ 0x28
 800af88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af8a:	2300      	movs	r3, #0
 800af8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af8e:	f000 fb13 	bl	800b5b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af92:	4b1d      	ldr	r3, [pc, #116]	@ (800b008 <xTimerCreateTimerTask+0x84>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d021      	beq.n	800afde <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af9a:	2300      	movs	r3, #0
 800af9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af9e:	2300      	movs	r3, #0
 800afa0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800afa2:	1d3a      	adds	r2, r7, #4
 800afa4:	f107 0108 	add.w	r1, r7, #8
 800afa8:	f107 030c 	add.w	r3, r7, #12
 800afac:	4618      	mov	r0, r3
 800afae:	f7fd fc0b 	bl	80087c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800afb2:	6879      	ldr	r1, [r7, #4]
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	9202      	str	r2, [sp, #8]
 800afba:	9301      	str	r3, [sp, #4]
 800afbc:	2302      	movs	r3, #2
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	2300      	movs	r3, #0
 800afc2:	460a      	mov	r2, r1
 800afc4:	4911      	ldr	r1, [pc, #68]	@ (800b00c <xTimerCreateTimerTask+0x88>)
 800afc6:	4812      	ldr	r0, [pc, #72]	@ (800b010 <xTimerCreateTimerTask+0x8c>)
 800afc8:	f7fe fed8 	bl	8009d7c <xTaskCreateStatic>
 800afcc:	4603      	mov	r3, r0
 800afce:	4a11      	ldr	r2, [pc, #68]	@ (800b014 <xTimerCreateTimerTask+0x90>)
 800afd0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800afd2:	4b10      	ldr	r3, [pc, #64]	@ (800b014 <xTimerCreateTimerTask+0x90>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d001      	beq.n	800afde <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800afda:	2301      	movs	r3, #1
 800afdc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10b      	bne.n	800affc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800afe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe8:	f383 8811 	msr	BASEPRI, r3
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	f3bf 8f4f 	dsb	sy
 800aff4:	613b      	str	r3, [r7, #16]
}
 800aff6:	bf00      	nop
 800aff8:	bf00      	nop
 800affa:	e7fd      	b.n	800aff8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800affc:	697b      	ldr	r3, [r7, #20]
}
 800affe:	4618      	mov	r0, r3
 800b000:	3718      	adds	r7, #24
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	20000f74 	.word	0x20000f74
 800b00c:	0800d328 	.word	0x0800d328
 800b010:	0800b151 	.word	0x0800b151
 800b014:	20000f78 	.word	0x20000f78

0800b018 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b08a      	sub	sp, #40	@ 0x28
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
 800b024:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b026:	2300      	movs	r3, #0
 800b028:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10b      	bne.n	800b048 <xTimerGenericCommand+0x30>
	__asm volatile
 800b030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b034:	f383 8811 	msr	BASEPRI, r3
 800b038:	f3bf 8f6f 	isb	sy
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	623b      	str	r3, [r7, #32]
}
 800b042:	bf00      	nop
 800b044:	bf00      	nop
 800b046:	e7fd      	b.n	800b044 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b048:	4b19      	ldr	r3, [pc, #100]	@ (800b0b0 <xTimerGenericCommand+0x98>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d02a      	beq.n	800b0a6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	2b05      	cmp	r3, #5
 800b060:	dc18      	bgt.n	800b094 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b062:	f7ff fd95 	bl	800ab90 <xTaskGetSchedulerState>
 800b066:	4603      	mov	r3, r0
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d109      	bne.n	800b080 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b06c:	4b10      	ldr	r3, [pc, #64]	@ (800b0b0 <xTimerGenericCommand+0x98>)
 800b06e:	6818      	ldr	r0, [r3, #0]
 800b070:	f107 0110 	add.w	r1, r7, #16
 800b074:	2300      	movs	r3, #0
 800b076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b078:	f7fe f8e6 	bl	8009248 <xQueueGenericSend>
 800b07c:	6278      	str	r0, [r7, #36]	@ 0x24
 800b07e:	e012      	b.n	800b0a6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b080:	4b0b      	ldr	r3, [pc, #44]	@ (800b0b0 <xTimerGenericCommand+0x98>)
 800b082:	6818      	ldr	r0, [r3, #0]
 800b084:	f107 0110 	add.w	r1, r7, #16
 800b088:	2300      	movs	r3, #0
 800b08a:	2200      	movs	r2, #0
 800b08c:	f7fe f8dc 	bl	8009248 <xQueueGenericSend>
 800b090:	6278      	str	r0, [r7, #36]	@ 0x24
 800b092:	e008      	b.n	800b0a6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b094:	4b06      	ldr	r3, [pc, #24]	@ (800b0b0 <xTimerGenericCommand+0x98>)
 800b096:	6818      	ldr	r0, [r3, #0]
 800b098:	f107 0110 	add.w	r1, r7, #16
 800b09c:	2300      	movs	r3, #0
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	f7fe f9d4 	bl	800944c <xQueueGenericSendFromISR>
 800b0a4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3728      	adds	r7, #40	@ 0x28
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	20000f74 	.word	0x20000f74

0800b0b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b088      	sub	sp, #32
 800b0b8:	af02      	add	r7, sp, #8
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0be:	4b23      	ldr	r3, [pc, #140]	@ (800b14c <prvProcessExpiredTimer+0x98>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	3304      	adds	r3, #4
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7fd fe93 	bl	8008df8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0d8:	f003 0304 	and.w	r3, r3, #4
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d023      	beq.n	800b128 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	699a      	ldr	r2, [r3, #24]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	18d1      	adds	r1, r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	683a      	ldr	r2, [r7, #0]
 800b0ec:	6978      	ldr	r0, [r7, #20]
 800b0ee:	f000 f8d5 	bl	800b29c <prvInsertTimerInActiveList>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d020      	beq.n	800b13a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	2100      	movs	r1, #0
 800b102:	6978      	ldr	r0, [r7, #20]
 800b104:	f7ff ff88 	bl	800b018 <xTimerGenericCommand>
 800b108:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d114      	bne.n	800b13a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b114:	f383 8811 	msr	BASEPRI, r3
 800b118:	f3bf 8f6f 	isb	sy
 800b11c:	f3bf 8f4f 	dsb	sy
 800b120:	60fb      	str	r3, [r7, #12]
}
 800b122:	bf00      	nop
 800b124:	bf00      	nop
 800b126:	e7fd      	b.n	800b124 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b12e:	f023 0301 	bic.w	r3, r3, #1
 800b132:	b2da      	uxtb	r2, r3
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	6a1b      	ldr	r3, [r3, #32]
 800b13e:	6978      	ldr	r0, [r7, #20]
 800b140:	4798      	blx	r3
}
 800b142:	bf00      	nop
 800b144:	3718      	adds	r7, #24
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	20000f6c 	.word	0x20000f6c

0800b150 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b158:	f107 0308 	add.w	r3, r7, #8
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 f859 	bl	800b214 <prvGetNextExpireTime>
 800b162:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	4619      	mov	r1, r3
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f000 f805 	bl	800b178 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b16e:	f000 f8d7 	bl	800b320 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b172:	bf00      	nop
 800b174:	e7f0      	b.n	800b158 <prvTimerTask+0x8>
	...

0800b178 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b182:	f7ff f85f 	bl	800a244 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b186:	f107 0308 	add.w	r3, r7, #8
 800b18a:	4618      	mov	r0, r3
 800b18c:	f000 f866 	bl	800b25c <prvSampleTimeNow>
 800b190:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d130      	bne.n	800b1fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10a      	bne.n	800b1b4 <prvProcessTimerOrBlockTask+0x3c>
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d806      	bhi.n	800b1b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b1a6:	f7ff f85b 	bl	800a260 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b1aa:	68f9      	ldr	r1, [r7, #12]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7ff ff81 	bl	800b0b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b1b2:	e024      	b.n	800b1fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d008      	beq.n	800b1cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b1ba:	4b13      	ldr	r3, [pc, #76]	@ (800b208 <prvProcessTimerOrBlockTask+0x90>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d101      	bne.n	800b1c8 <prvProcessTimerOrBlockTask+0x50>
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e000      	b.n	800b1ca <prvProcessTimerOrBlockTask+0x52>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b1cc:	4b0f      	ldr	r3, [pc, #60]	@ (800b20c <prvProcessTimerOrBlockTask+0x94>)
 800b1ce:	6818      	ldr	r0, [r3, #0]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	1ad3      	subs	r3, r2, r3
 800b1d6:	683a      	ldr	r2, [r7, #0]
 800b1d8:	4619      	mov	r1, r3
 800b1da:	f7fe fd9b 	bl	8009d14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b1de:	f7ff f83f 	bl	800a260 <xTaskResumeAll>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d10a      	bne.n	800b1fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b1e8:	4b09      	ldr	r3, [pc, #36]	@ (800b210 <prvProcessTimerOrBlockTask+0x98>)
 800b1ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1ee:	601a      	str	r2, [r3, #0]
 800b1f0:	f3bf 8f4f 	dsb	sy
 800b1f4:	f3bf 8f6f 	isb	sy
}
 800b1f8:	e001      	b.n	800b1fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b1fa:	f7ff f831 	bl	800a260 <xTaskResumeAll>
}
 800b1fe:	bf00      	nop
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	20000f70 	.word	0x20000f70
 800b20c:	20000f74 	.word	0x20000f74
 800b210:	e000ed04 	.word	0xe000ed04

0800b214 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b21c:	4b0e      	ldr	r3, [pc, #56]	@ (800b258 <prvGetNextExpireTime+0x44>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d101      	bne.n	800b22a <prvGetNextExpireTime+0x16>
 800b226:	2201      	movs	r2, #1
 800b228:	e000      	b.n	800b22c <prvGetNextExpireTime+0x18>
 800b22a:	2200      	movs	r2, #0
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d105      	bne.n	800b244 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b238:	4b07      	ldr	r3, [pc, #28]	@ (800b258 <prvGetNextExpireTime+0x44>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	60fb      	str	r3, [r7, #12]
 800b242:	e001      	b.n	800b248 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b244:	2300      	movs	r3, #0
 800b246:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b248:	68fb      	ldr	r3, [r7, #12]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	20000f6c 	.word	0x20000f6c

0800b25c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b264:	f7ff f89a 	bl	800a39c <xTaskGetTickCount>
 800b268:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b26a:	4b0b      	ldr	r3, [pc, #44]	@ (800b298 <prvSampleTimeNow+0x3c>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	429a      	cmp	r2, r3
 800b272:	d205      	bcs.n	800b280 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b274:	f000 f93a 	bl	800b4ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	601a      	str	r2, [r3, #0]
 800b27e:	e002      	b.n	800b286 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b286:	4a04      	ldr	r2, [pc, #16]	@ (800b298 <prvSampleTimeNow+0x3c>)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b28c:	68fb      	ldr	r3, [r7, #12]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	20000f7c 	.word	0x20000f7c

0800b29c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	607a      	str	r2, [r7, #4]
 800b2a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d812      	bhi.n	800b2e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	1ad2      	subs	r2, r2, r3
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d302      	bcc.n	800b2d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	617b      	str	r3, [r7, #20]
 800b2d4:	e01b      	b.n	800b30e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b2d6:	4b10      	ldr	r3, [pc, #64]	@ (800b318 <prvInsertTimerInActiveList+0x7c>)
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	3304      	adds	r3, #4
 800b2de:	4619      	mov	r1, r3
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	f7fd fd50 	bl	8008d86 <vListInsert>
 800b2e6:	e012      	b.n	800b30e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d206      	bcs.n	800b2fe <prvInsertTimerInActiveList+0x62>
 800b2f0:	68ba      	ldr	r2, [r7, #8]
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d302      	bcc.n	800b2fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	617b      	str	r3, [r7, #20]
 800b2fc:	e007      	b.n	800b30e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2fe:	4b07      	ldr	r3, [pc, #28]	@ (800b31c <prvInsertTimerInActiveList+0x80>)
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	3304      	adds	r3, #4
 800b306:	4619      	mov	r1, r3
 800b308:	4610      	mov	r0, r2
 800b30a:	f7fd fd3c 	bl	8008d86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b30e:	697b      	ldr	r3, [r7, #20]
}
 800b310:	4618      	mov	r0, r3
 800b312:	3718      	adds	r7, #24
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	20000f70 	.word	0x20000f70
 800b31c:	20000f6c 	.word	0x20000f6c

0800b320 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b08e      	sub	sp, #56	@ 0x38
 800b324:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b326:	e0ce      	b.n	800b4c6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	da19      	bge.n	800b362 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b32e:	1d3b      	adds	r3, r7, #4
 800b330:	3304      	adds	r3, #4
 800b332:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10b      	bne.n	800b352 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b33e:	f383 8811 	msr	BASEPRI, r3
 800b342:	f3bf 8f6f 	isb	sy
 800b346:	f3bf 8f4f 	dsb	sy
 800b34a:	61fb      	str	r3, [r7, #28]
}
 800b34c:	bf00      	nop
 800b34e:	bf00      	nop
 800b350:	e7fd      	b.n	800b34e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b358:	6850      	ldr	r0, [r2, #4]
 800b35a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b35c:	6892      	ldr	r2, [r2, #8]
 800b35e:	4611      	mov	r1, r2
 800b360:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f2c0 80ae 	blt.w	800b4c6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b370:	695b      	ldr	r3, [r3, #20]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d004      	beq.n	800b380 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b378:	3304      	adds	r3, #4
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fd fd3c 	bl	8008df8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b380:	463b      	mov	r3, r7
 800b382:	4618      	mov	r0, r3
 800b384:	f7ff ff6a 	bl	800b25c <prvSampleTimeNow>
 800b388:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2b09      	cmp	r3, #9
 800b38e:	f200 8097 	bhi.w	800b4c0 <prvProcessReceivedCommands+0x1a0>
 800b392:	a201      	add	r2, pc, #4	@ (adr r2, 800b398 <prvProcessReceivedCommands+0x78>)
 800b394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b398:	0800b3c1 	.word	0x0800b3c1
 800b39c:	0800b3c1 	.word	0x0800b3c1
 800b3a0:	0800b3c1 	.word	0x0800b3c1
 800b3a4:	0800b437 	.word	0x0800b437
 800b3a8:	0800b44b 	.word	0x0800b44b
 800b3ac:	0800b497 	.word	0x0800b497
 800b3b0:	0800b3c1 	.word	0x0800b3c1
 800b3b4:	0800b3c1 	.word	0x0800b3c1
 800b3b8:	0800b437 	.word	0x0800b437
 800b3bc:	0800b44b 	.word	0x0800b44b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3c6:	f043 0301 	orr.w	r3, r3, #1
 800b3ca:	b2da      	uxtb	r2, r3
 800b3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3d6:	699b      	ldr	r3, [r3, #24]
 800b3d8:	18d1      	adds	r1, r2, r3
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3e0:	f7ff ff5c 	bl	800b29c <prvInsertTimerInActiveList>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d06c      	beq.n	800b4c4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ec:	6a1b      	ldr	r3, [r3, #32]
 800b3ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3f8:	f003 0304 	and.w	r3, r3, #4
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d061      	beq.n	800b4c4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	441a      	add	r2, r3
 800b408:	2300      	movs	r3, #0
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	2300      	movs	r3, #0
 800b40e:	2100      	movs	r1, #0
 800b410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b412:	f7ff fe01 	bl	800b018 <xTimerGenericCommand>
 800b416:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b418:	6a3b      	ldr	r3, [r7, #32]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d152      	bne.n	800b4c4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	61bb      	str	r3, [r7, #24]
}
 800b430:	bf00      	nop
 800b432:	bf00      	nop
 800b434:	e7fd      	b.n	800b432 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b438:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b43c:	f023 0301 	bic.w	r3, r3, #1
 800b440:	b2da      	uxtb	r2, r3
 800b442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b444:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b448:	e03d      	b.n	800b4c6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b44c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b450:	f043 0301 	orr.w	r3, r3, #1
 800b454:	b2da      	uxtb	r2, r3
 800b456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b458:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b460:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b464:	699b      	ldr	r3, [r3, #24]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d10b      	bne.n	800b482 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b46e:	f383 8811 	msr	BASEPRI, r3
 800b472:	f3bf 8f6f 	isb	sy
 800b476:	f3bf 8f4f 	dsb	sy
 800b47a:	617b      	str	r3, [r7, #20]
}
 800b47c:	bf00      	nop
 800b47e:	bf00      	nop
 800b480:	e7fd      	b.n	800b47e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b484:	699a      	ldr	r2, [r3, #24]
 800b486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b488:	18d1      	adds	r1, r2, r3
 800b48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b48e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b490:	f7ff ff04 	bl	800b29c <prvInsertTimerInActiveList>
					break;
 800b494:	e017      	b.n	800b4c6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b498:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b49c:	f003 0302 	and.w	r3, r3, #2
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d103      	bne.n	800b4ac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b4a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4a6:	f000 fc07 	bl	800bcb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b4aa:	e00c      	b.n	800b4c6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4b2:	f023 0301 	bic.w	r3, r3, #1
 800b4b6:	b2da      	uxtb	r2, r3
 800b4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b4be:	e002      	b.n	800b4c6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b4c0:	bf00      	nop
 800b4c2:	e000      	b.n	800b4c6 <prvProcessReceivedCommands+0x1a6>
					break;
 800b4c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b4c6:	4b08      	ldr	r3, [pc, #32]	@ (800b4e8 <prvProcessReceivedCommands+0x1c8>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	1d39      	adds	r1, r7, #4
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7fe f85a 	bl	8009588 <xQueueReceive>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f47f af26 	bne.w	800b328 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b4dc:	bf00      	nop
 800b4de:	bf00      	nop
 800b4e0:	3730      	adds	r7, #48	@ 0x30
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	20000f74 	.word	0x20000f74

0800b4ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b088      	sub	sp, #32
 800b4f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b4f2:	e049      	b.n	800b588 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b4f4:	4b2e      	ldr	r3, [pc, #184]	@ (800b5b0 <prvSwitchTimerLists+0xc4>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4fe:	4b2c      	ldr	r3, [pc, #176]	@ (800b5b0 <prvSwitchTimerLists+0xc4>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	3304      	adds	r3, #4
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fd fc73 	bl	8008df8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6a1b      	ldr	r3, [r3, #32]
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b520:	f003 0304 	and.w	r3, r3, #4
 800b524:	2b00      	cmp	r3, #0
 800b526:	d02f      	beq.n	800b588 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	699b      	ldr	r3, [r3, #24]
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	4413      	add	r3, r2
 800b530:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	429a      	cmp	r2, r3
 800b538:	d90e      	bls.n	800b558 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b546:	4b1a      	ldr	r3, [pc, #104]	@ (800b5b0 <prvSwitchTimerLists+0xc4>)
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	3304      	adds	r3, #4
 800b54e:	4619      	mov	r1, r3
 800b550:	4610      	mov	r0, r2
 800b552:	f7fd fc18 	bl	8008d86 <vListInsert>
 800b556:	e017      	b.n	800b588 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b558:	2300      	movs	r3, #0
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	2300      	movs	r3, #0
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	2100      	movs	r1, #0
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f7ff fd58 	bl	800b018 <xTimerGenericCommand>
 800b568:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10b      	bne.n	800b588 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	603b      	str	r3, [r7, #0]
}
 800b582:	bf00      	nop
 800b584:	bf00      	nop
 800b586:	e7fd      	b.n	800b584 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b588:	4b09      	ldr	r3, [pc, #36]	@ (800b5b0 <prvSwitchTimerLists+0xc4>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1b0      	bne.n	800b4f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b592:	4b07      	ldr	r3, [pc, #28]	@ (800b5b0 <prvSwitchTimerLists+0xc4>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b598:	4b06      	ldr	r3, [pc, #24]	@ (800b5b4 <prvSwitchTimerLists+0xc8>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a04      	ldr	r2, [pc, #16]	@ (800b5b0 <prvSwitchTimerLists+0xc4>)
 800b59e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b5a0:	4a04      	ldr	r2, [pc, #16]	@ (800b5b4 <prvSwitchTimerLists+0xc8>)
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	6013      	str	r3, [r2, #0]
}
 800b5a6:	bf00      	nop
 800b5a8:	3718      	adds	r7, #24
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	20000f6c 	.word	0x20000f6c
 800b5b4:	20000f70 	.word	0x20000f70

0800b5b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b5be:	f000 f98b 	bl	800b8d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b5c2:	4b15      	ldr	r3, [pc, #84]	@ (800b618 <prvCheckForValidListAndQueue+0x60>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d120      	bne.n	800b60c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b5ca:	4814      	ldr	r0, [pc, #80]	@ (800b61c <prvCheckForValidListAndQueue+0x64>)
 800b5cc:	f7fd fb8a 	bl	8008ce4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b5d0:	4813      	ldr	r0, [pc, #76]	@ (800b620 <prvCheckForValidListAndQueue+0x68>)
 800b5d2:	f7fd fb87 	bl	8008ce4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b5d6:	4b13      	ldr	r3, [pc, #76]	@ (800b624 <prvCheckForValidListAndQueue+0x6c>)
 800b5d8:	4a10      	ldr	r2, [pc, #64]	@ (800b61c <prvCheckForValidListAndQueue+0x64>)
 800b5da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b5dc:	4b12      	ldr	r3, [pc, #72]	@ (800b628 <prvCheckForValidListAndQueue+0x70>)
 800b5de:	4a10      	ldr	r2, [pc, #64]	@ (800b620 <prvCheckForValidListAndQueue+0x68>)
 800b5e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	4b11      	ldr	r3, [pc, #68]	@ (800b62c <prvCheckForValidListAndQueue+0x74>)
 800b5e8:	4a11      	ldr	r2, [pc, #68]	@ (800b630 <prvCheckForValidListAndQueue+0x78>)
 800b5ea:	2110      	movs	r1, #16
 800b5ec:	200a      	movs	r0, #10
 800b5ee:	f7fd fc97 	bl	8008f20 <xQueueGenericCreateStatic>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	4a08      	ldr	r2, [pc, #32]	@ (800b618 <prvCheckForValidListAndQueue+0x60>)
 800b5f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b5f8:	4b07      	ldr	r3, [pc, #28]	@ (800b618 <prvCheckForValidListAndQueue+0x60>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d005      	beq.n	800b60c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b600:	4b05      	ldr	r3, [pc, #20]	@ (800b618 <prvCheckForValidListAndQueue+0x60>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	490b      	ldr	r1, [pc, #44]	@ (800b634 <prvCheckForValidListAndQueue+0x7c>)
 800b606:	4618      	mov	r0, r3
 800b608:	f7fe fb5a 	bl	8009cc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b60c:	f000 f996 	bl	800b93c <vPortExitCritical>
}
 800b610:	bf00      	nop
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	20000f74 	.word	0x20000f74
 800b61c:	20000f44 	.word	0x20000f44
 800b620:	20000f58 	.word	0x20000f58
 800b624:	20000f6c 	.word	0x20000f6c
 800b628:	20000f70 	.word	0x20000f70
 800b62c:	20001020 	.word	0x20001020
 800b630:	20000f80 	.word	0x20000f80
 800b634:	0800d330 	.word	0x0800d330

0800b638 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b08a      	sub	sp, #40	@ 0x28
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
 800b644:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800b646:	f06f 0301 	mvn.w	r3, #1
 800b64a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b658:	4b06      	ldr	r3, [pc, #24]	@ (800b674 <xTimerPendFunctionCallFromISR+0x3c>)
 800b65a:	6818      	ldr	r0, [r3, #0]
 800b65c:	f107 0114 	add.w	r1, r7, #20
 800b660:	2300      	movs	r3, #0
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	f7fd fef2 	bl	800944c <xQueueGenericSendFromISR>
 800b668:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800b66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3728      	adds	r7, #40	@ 0x28
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	20000f74 	.word	0x20000f74

0800b678 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	3b04      	subs	r3, #4
 800b688:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	3b04      	subs	r3, #4
 800b696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	f023 0201 	bic.w	r2, r3, #1
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3b04      	subs	r3, #4
 800b6a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b6a8:	4a0c      	ldr	r2, [pc, #48]	@ (800b6dc <pxPortInitialiseStack+0x64>)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	3b14      	subs	r3, #20
 800b6b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	3b04      	subs	r3, #4
 800b6be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f06f 0202 	mvn.w	r2, #2
 800b6c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	3b20      	subs	r3, #32
 800b6cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3714      	adds	r7, #20
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr
 800b6dc:	0800b6e1 	.word	0x0800b6e1

0800b6e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b6ea:	4b13      	ldr	r3, [pc, #76]	@ (800b738 <prvTaskExitError+0x58>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f2:	d00b      	beq.n	800b70c <prvTaskExitError+0x2c>
	__asm volatile
 800b6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f8:	f383 8811 	msr	BASEPRI, r3
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	60fb      	str	r3, [r7, #12]
}
 800b706:	bf00      	nop
 800b708:	bf00      	nop
 800b70a:	e7fd      	b.n	800b708 <prvTaskExitError+0x28>
	__asm volatile
 800b70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b710:	f383 8811 	msr	BASEPRI, r3
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	60bb      	str	r3, [r7, #8]
}
 800b71e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b720:	bf00      	nop
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d0fc      	beq.n	800b722 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b728:	bf00      	nop
 800b72a:	bf00      	nop
 800b72c:	3714      	adds	r7, #20
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	200000bc 	.word	0x200000bc
 800b73c:	00000000 	.word	0x00000000

0800b740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b740:	4b07      	ldr	r3, [pc, #28]	@ (800b760 <pxCurrentTCBConst2>)
 800b742:	6819      	ldr	r1, [r3, #0]
 800b744:	6808      	ldr	r0, [r1, #0]
 800b746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b74a:	f380 8809 	msr	PSP, r0
 800b74e:	f3bf 8f6f 	isb	sy
 800b752:	f04f 0000 	mov.w	r0, #0
 800b756:	f380 8811 	msr	BASEPRI, r0
 800b75a:	4770      	bx	lr
 800b75c:	f3af 8000 	nop.w

0800b760 <pxCurrentTCBConst2>:
 800b760:	20000a44 	.word	0x20000a44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b764:	bf00      	nop
 800b766:	bf00      	nop

0800b768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b768:	4808      	ldr	r0, [pc, #32]	@ (800b78c <prvPortStartFirstTask+0x24>)
 800b76a:	6800      	ldr	r0, [r0, #0]
 800b76c:	6800      	ldr	r0, [r0, #0]
 800b76e:	f380 8808 	msr	MSP, r0
 800b772:	f04f 0000 	mov.w	r0, #0
 800b776:	f380 8814 	msr	CONTROL, r0
 800b77a:	b662      	cpsie	i
 800b77c:	b661      	cpsie	f
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	df00      	svc	0
 800b788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b78a:	bf00      	nop
 800b78c:	e000ed08 	.word	0xe000ed08

0800b790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b086      	sub	sp, #24
 800b794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b796:	4b47      	ldr	r3, [pc, #284]	@ (800b8b4 <xPortStartScheduler+0x124>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a47      	ldr	r2, [pc, #284]	@ (800b8b8 <xPortStartScheduler+0x128>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d10b      	bne.n	800b7b8 <xPortStartScheduler+0x28>
	__asm volatile
 800b7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a4:	f383 8811 	msr	BASEPRI, r3
 800b7a8:	f3bf 8f6f 	isb	sy
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	613b      	str	r3, [r7, #16]
}
 800b7b2:	bf00      	nop
 800b7b4:	bf00      	nop
 800b7b6:	e7fd      	b.n	800b7b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b7b8:	4b3e      	ldr	r3, [pc, #248]	@ (800b8b4 <xPortStartScheduler+0x124>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a3f      	ldr	r2, [pc, #252]	@ (800b8bc <xPortStartScheduler+0x12c>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d10b      	bne.n	800b7da <xPortStartScheduler+0x4a>
	__asm volatile
 800b7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	60fb      	str	r3, [r7, #12]
}
 800b7d4:	bf00      	nop
 800b7d6:	bf00      	nop
 800b7d8:	e7fd      	b.n	800b7d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b7da:	4b39      	ldr	r3, [pc, #228]	@ (800b8c0 <xPortStartScheduler+0x130>)
 800b7dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	22ff      	movs	r2, #255	@ 0xff
 800b7ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b7f4:	78fb      	ldrb	r3, [r7, #3]
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b7fc:	b2da      	uxtb	r2, r3
 800b7fe:	4b31      	ldr	r3, [pc, #196]	@ (800b8c4 <xPortStartScheduler+0x134>)
 800b800:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b802:	4b31      	ldr	r3, [pc, #196]	@ (800b8c8 <xPortStartScheduler+0x138>)
 800b804:	2207      	movs	r2, #7
 800b806:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b808:	e009      	b.n	800b81e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b80a:	4b2f      	ldr	r3, [pc, #188]	@ (800b8c8 <xPortStartScheduler+0x138>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	3b01      	subs	r3, #1
 800b810:	4a2d      	ldr	r2, [pc, #180]	@ (800b8c8 <xPortStartScheduler+0x138>)
 800b812:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b814:	78fb      	ldrb	r3, [r7, #3]
 800b816:	b2db      	uxtb	r3, r3
 800b818:	005b      	lsls	r3, r3, #1
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b81e:	78fb      	ldrb	r3, [r7, #3]
 800b820:	b2db      	uxtb	r3, r3
 800b822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b826:	2b80      	cmp	r3, #128	@ 0x80
 800b828:	d0ef      	beq.n	800b80a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b82a:	4b27      	ldr	r3, [pc, #156]	@ (800b8c8 <xPortStartScheduler+0x138>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f1c3 0307 	rsb	r3, r3, #7
 800b832:	2b04      	cmp	r3, #4
 800b834:	d00b      	beq.n	800b84e <xPortStartScheduler+0xbe>
	__asm volatile
 800b836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b83a:	f383 8811 	msr	BASEPRI, r3
 800b83e:	f3bf 8f6f 	isb	sy
 800b842:	f3bf 8f4f 	dsb	sy
 800b846:	60bb      	str	r3, [r7, #8]
}
 800b848:	bf00      	nop
 800b84a:	bf00      	nop
 800b84c:	e7fd      	b.n	800b84a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b84e:	4b1e      	ldr	r3, [pc, #120]	@ (800b8c8 <xPortStartScheduler+0x138>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	021b      	lsls	r3, r3, #8
 800b854:	4a1c      	ldr	r2, [pc, #112]	@ (800b8c8 <xPortStartScheduler+0x138>)
 800b856:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b858:	4b1b      	ldr	r3, [pc, #108]	@ (800b8c8 <xPortStartScheduler+0x138>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b860:	4a19      	ldr	r2, [pc, #100]	@ (800b8c8 <xPortStartScheduler+0x138>)
 800b862:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	b2da      	uxtb	r2, r3
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b86c:	4b17      	ldr	r3, [pc, #92]	@ (800b8cc <xPortStartScheduler+0x13c>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a16      	ldr	r2, [pc, #88]	@ (800b8cc <xPortStartScheduler+0x13c>)
 800b872:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b876:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b878:	4b14      	ldr	r3, [pc, #80]	@ (800b8cc <xPortStartScheduler+0x13c>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a13      	ldr	r2, [pc, #76]	@ (800b8cc <xPortStartScheduler+0x13c>)
 800b87e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b882:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b884:	f000 f8da 	bl	800ba3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b888:	4b11      	ldr	r3, [pc, #68]	@ (800b8d0 <xPortStartScheduler+0x140>)
 800b88a:	2200      	movs	r2, #0
 800b88c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b88e:	f000 f8f9 	bl	800ba84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b892:	4b10      	ldr	r3, [pc, #64]	@ (800b8d4 <xPortStartScheduler+0x144>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a0f      	ldr	r2, [pc, #60]	@ (800b8d4 <xPortStartScheduler+0x144>)
 800b898:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b89c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b89e:	f7ff ff63 	bl	800b768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b8a2:	f7fe fe45 	bl	800a530 <vTaskSwitchContext>
	prvTaskExitError();
 800b8a6:	f7ff ff1b 	bl	800b6e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3718      	adds	r7, #24
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	e000ed00 	.word	0xe000ed00
 800b8b8:	410fc271 	.word	0x410fc271
 800b8bc:	410fc270 	.word	0x410fc270
 800b8c0:	e000e400 	.word	0xe000e400
 800b8c4:	20001070 	.word	0x20001070
 800b8c8:	20001074 	.word	0x20001074
 800b8cc:	e000ed20 	.word	0xe000ed20
 800b8d0:	200000bc 	.word	0x200000bc
 800b8d4:	e000ef34 	.word	0xe000ef34

0800b8d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e2:	f383 8811 	msr	BASEPRI, r3
 800b8e6:	f3bf 8f6f 	isb	sy
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	607b      	str	r3, [r7, #4]
}
 800b8f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b8f2:	4b10      	ldr	r3, [pc, #64]	@ (800b934 <vPortEnterCritical+0x5c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	4a0e      	ldr	r2, [pc, #56]	@ (800b934 <vPortEnterCritical+0x5c>)
 800b8fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b8fc:	4b0d      	ldr	r3, [pc, #52]	@ (800b934 <vPortEnterCritical+0x5c>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b01      	cmp	r3, #1
 800b902:	d110      	bne.n	800b926 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b904:	4b0c      	ldr	r3, [pc, #48]	@ (800b938 <vPortEnterCritical+0x60>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00b      	beq.n	800b926 <vPortEnterCritical+0x4e>
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	603b      	str	r3, [r7, #0]
}
 800b920:	bf00      	nop
 800b922:	bf00      	nop
 800b924:	e7fd      	b.n	800b922 <vPortEnterCritical+0x4a>
	}
}
 800b926:	bf00      	nop
 800b928:	370c      	adds	r7, #12
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	200000bc 	.word	0x200000bc
 800b938:	e000ed04 	.word	0xe000ed04

0800b93c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b942:	4b12      	ldr	r3, [pc, #72]	@ (800b98c <vPortExitCritical+0x50>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d10b      	bne.n	800b962 <vPortExitCritical+0x26>
	__asm volatile
 800b94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b94e:	f383 8811 	msr	BASEPRI, r3
 800b952:	f3bf 8f6f 	isb	sy
 800b956:	f3bf 8f4f 	dsb	sy
 800b95a:	607b      	str	r3, [r7, #4]
}
 800b95c:	bf00      	nop
 800b95e:	bf00      	nop
 800b960:	e7fd      	b.n	800b95e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b962:	4b0a      	ldr	r3, [pc, #40]	@ (800b98c <vPortExitCritical+0x50>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	3b01      	subs	r3, #1
 800b968:	4a08      	ldr	r2, [pc, #32]	@ (800b98c <vPortExitCritical+0x50>)
 800b96a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b96c:	4b07      	ldr	r3, [pc, #28]	@ (800b98c <vPortExitCritical+0x50>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d105      	bne.n	800b980 <vPortExitCritical+0x44>
 800b974:	2300      	movs	r3, #0
 800b976:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	f383 8811 	msr	BASEPRI, r3
}
 800b97e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b980:	bf00      	nop
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr
 800b98c:	200000bc 	.word	0x200000bc

0800b990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b990:	f3ef 8009 	mrs	r0, PSP
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	4b15      	ldr	r3, [pc, #84]	@ (800b9f0 <pxCurrentTCBConst>)
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	f01e 0f10 	tst.w	lr, #16
 800b9a0:	bf08      	it	eq
 800b9a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b9a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9aa:	6010      	str	r0, [r2, #0]
 800b9ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b9b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b9b4:	f380 8811 	msr	BASEPRI, r0
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	f3bf 8f6f 	isb	sy
 800b9c0:	f7fe fdb6 	bl	800a530 <vTaskSwitchContext>
 800b9c4:	f04f 0000 	mov.w	r0, #0
 800b9c8:	f380 8811 	msr	BASEPRI, r0
 800b9cc:	bc09      	pop	{r0, r3}
 800b9ce:	6819      	ldr	r1, [r3, #0]
 800b9d0:	6808      	ldr	r0, [r1, #0]
 800b9d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d6:	f01e 0f10 	tst.w	lr, #16
 800b9da:	bf08      	it	eq
 800b9dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b9e0:	f380 8809 	msr	PSP, r0
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	f3af 8000 	nop.w

0800b9f0 <pxCurrentTCBConst>:
 800b9f0:	20000a44 	.word	0x20000a44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b9f4:	bf00      	nop
 800b9f6:	bf00      	nop

0800b9f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	607b      	str	r3, [r7, #4]
}
 800ba10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ba12:	f7fe fcd3 	bl	800a3bc <xTaskIncrementTick>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d003      	beq.n	800ba24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ba1c:	4b06      	ldr	r3, [pc, #24]	@ (800ba38 <xPortSysTickHandler+0x40>)
 800ba1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba22:	601a      	str	r2, [r3, #0]
 800ba24:	2300      	movs	r3, #0
 800ba26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	f383 8811 	msr	BASEPRI, r3
}
 800ba2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ba30:	bf00      	nop
 800ba32:	3708      	adds	r7, #8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	e000ed04 	.word	0xe000ed04

0800ba3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ba40:	4b0b      	ldr	r3, [pc, #44]	@ (800ba70 <vPortSetupTimerInterrupt+0x34>)
 800ba42:	2200      	movs	r2, #0
 800ba44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ba46:	4b0b      	ldr	r3, [pc, #44]	@ (800ba74 <vPortSetupTimerInterrupt+0x38>)
 800ba48:	2200      	movs	r2, #0
 800ba4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba78 <vPortSetupTimerInterrupt+0x3c>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a0a      	ldr	r2, [pc, #40]	@ (800ba7c <vPortSetupTimerInterrupt+0x40>)
 800ba52:	fba2 2303 	umull	r2, r3, r2, r3
 800ba56:	099b      	lsrs	r3, r3, #6
 800ba58:	4a09      	ldr	r2, [pc, #36]	@ (800ba80 <vPortSetupTimerInterrupt+0x44>)
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba5e:	4b04      	ldr	r3, [pc, #16]	@ (800ba70 <vPortSetupTimerInterrupt+0x34>)
 800ba60:	2207      	movs	r2, #7
 800ba62:	601a      	str	r2, [r3, #0]
}
 800ba64:	bf00      	nop
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop
 800ba70:	e000e010 	.word	0xe000e010
 800ba74:	e000e018 	.word	0xe000e018
 800ba78:	20000004 	.word	0x20000004
 800ba7c:	10624dd3 	.word	0x10624dd3
 800ba80:	e000e014 	.word	0xe000e014

0800ba84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ba94 <vPortEnableVFP+0x10>
 800ba88:	6801      	ldr	r1, [r0, #0]
 800ba8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ba8e:	6001      	str	r1, [r0, #0]
 800ba90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ba92:	bf00      	nop
 800ba94:	e000ed88 	.word	0xe000ed88

0800ba98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ba9e:	f3ef 8305 	mrs	r3, IPSR
 800baa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2b0f      	cmp	r3, #15
 800baa8:	d915      	bls.n	800bad6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800baaa:	4a18      	ldr	r2, [pc, #96]	@ (800bb0c <vPortValidateInterruptPriority+0x74>)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	4413      	add	r3, r2
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bab4:	4b16      	ldr	r3, [pc, #88]	@ (800bb10 <vPortValidateInterruptPriority+0x78>)
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	7afa      	ldrb	r2, [r7, #11]
 800baba:	429a      	cmp	r2, r3
 800babc:	d20b      	bcs.n	800bad6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800babe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bac2:	f383 8811 	msr	BASEPRI, r3
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	607b      	str	r3, [r7, #4]
}
 800bad0:	bf00      	nop
 800bad2:	bf00      	nop
 800bad4:	e7fd      	b.n	800bad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bad6:	4b0f      	ldr	r3, [pc, #60]	@ (800bb14 <vPortValidateInterruptPriority+0x7c>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bade:	4b0e      	ldr	r3, [pc, #56]	@ (800bb18 <vPortValidateInterruptPriority+0x80>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d90b      	bls.n	800bafe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baea:	f383 8811 	msr	BASEPRI, r3
 800baee:	f3bf 8f6f 	isb	sy
 800baf2:	f3bf 8f4f 	dsb	sy
 800baf6:	603b      	str	r3, [r7, #0]
}
 800baf8:	bf00      	nop
 800bafa:	bf00      	nop
 800bafc:	e7fd      	b.n	800bafa <vPortValidateInterruptPriority+0x62>
	}
 800bafe:	bf00      	nop
 800bb00:	3714      	adds	r7, #20
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	e000e3f0 	.word	0xe000e3f0
 800bb10:	20001070 	.word	0x20001070
 800bb14:	e000ed0c 	.word	0xe000ed0c
 800bb18:	20001074 	.word	0x20001074

0800bb1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08a      	sub	sp, #40	@ 0x28
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bb24:	2300      	movs	r3, #0
 800bb26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bb28:	f7fe fb8c 	bl	800a244 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bb2c:	4b5c      	ldr	r3, [pc, #368]	@ (800bca0 <pvPortMalloc+0x184>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d101      	bne.n	800bb38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bb34:	f000 f924 	bl	800bd80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bb38:	4b5a      	ldr	r3, [pc, #360]	@ (800bca4 <pvPortMalloc+0x188>)
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4013      	ands	r3, r2
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f040 8095 	bne.w	800bc70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d01e      	beq.n	800bb8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bb4c:	2208      	movs	r2, #8
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4413      	add	r3, r2
 800bb52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f003 0307 	and.w	r3, r3, #7
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d015      	beq.n	800bb8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f023 0307 	bic.w	r3, r3, #7
 800bb64:	3308      	adds	r3, #8
 800bb66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f003 0307 	and.w	r3, r3, #7
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00b      	beq.n	800bb8a <pvPortMalloc+0x6e>
	__asm volatile
 800bb72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb76:	f383 8811 	msr	BASEPRI, r3
 800bb7a:	f3bf 8f6f 	isb	sy
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	617b      	str	r3, [r7, #20]
}
 800bb84:	bf00      	nop
 800bb86:	bf00      	nop
 800bb88:	e7fd      	b.n	800bb86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d06f      	beq.n	800bc70 <pvPortMalloc+0x154>
 800bb90:	4b45      	ldr	r3, [pc, #276]	@ (800bca8 <pvPortMalloc+0x18c>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d86a      	bhi.n	800bc70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bb9a:	4b44      	ldr	r3, [pc, #272]	@ (800bcac <pvPortMalloc+0x190>)
 800bb9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bb9e:	4b43      	ldr	r3, [pc, #268]	@ (800bcac <pvPortMalloc+0x190>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bba4:	e004      	b.n	800bbb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d903      	bls.n	800bbc2 <pvPortMalloc+0xa6>
 800bbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1f1      	bne.n	800bba6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bbc2:	4b37      	ldr	r3, [pc, #220]	@ (800bca0 <pvPortMalloc+0x184>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d051      	beq.n	800bc70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bbcc:	6a3b      	ldr	r3, [r7, #32]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2208      	movs	r2, #8
 800bbd2:	4413      	add	r3, r2
 800bbd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	6a3b      	ldr	r3, [r7, #32]
 800bbdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe0:	685a      	ldr	r2, [r3, #4]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	1ad2      	subs	r2, r2, r3
 800bbe6:	2308      	movs	r3, #8
 800bbe8:	005b      	lsls	r3, r3, #1
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d920      	bls.n	800bc30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bbee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	f003 0307 	and.w	r3, r3, #7
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d00b      	beq.n	800bc18 <pvPortMalloc+0xfc>
	__asm volatile
 800bc00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc04:	f383 8811 	msr	BASEPRI, r3
 800bc08:	f3bf 8f6f 	isb	sy
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	613b      	str	r3, [r7, #16]
}
 800bc12:	bf00      	nop
 800bc14:	bf00      	nop
 800bc16:	e7fd      	b.n	800bc14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc1a:	685a      	ldr	r2, [r3, #4]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	1ad2      	subs	r2, r2, r3
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bc2a:	69b8      	ldr	r0, [r7, #24]
 800bc2c:	f000 f90a 	bl	800be44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bc30:	4b1d      	ldr	r3, [pc, #116]	@ (800bca8 <pvPortMalloc+0x18c>)
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	1ad3      	subs	r3, r2, r3
 800bc3a:	4a1b      	ldr	r2, [pc, #108]	@ (800bca8 <pvPortMalloc+0x18c>)
 800bc3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bc3e:	4b1a      	ldr	r3, [pc, #104]	@ (800bca8 <pvPortMalloc+0x18c>)
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	4b1b      	ldr	r3, [pc, #108]	@ (800bcb0 <pvPortMalloc+0x194>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d203      	bcs.n	800bc52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bc4a:	4b17      	ldr	r3, [pc, #92]	@ (800bca8 <pvPortMalloc+0x18c>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a18      	ldr	r2, [pc, #96]	@ (800bcb0 <pvPortMalloc+0x194>)
 800bc50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc54:	685a      	ldr	r2, [r3, #4]
 800bc56:	4b13      	ldr	r3, [pc, #76]	@ (800bca4 <pvPortMalloc+0x188>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	431a      	orrs	r2, r3
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc62:	2200      	movs	r2, #0
 800bc64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bc66:	4b13      	ldr	r3, [pc, #76]	@ (800bcb4 <pvPortMalloc+0x198>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	4a11      	ldr	r2, [pc, #68]	@ (800bcb4 <pvPortMalloc+0x198>)
 800bc6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bc70:	f7fe faf6 	bl	800a260 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	f003 0307 	and.w	r3, r3, #7
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00b      	beq.n	800bc96 <pvPortMalloc+0x17a>
	__asm volatile
 800bc7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	60fb      	str	r3, [r7, #12]
}
 800bc90:	bf00      	nop
 800bc92:	bf00      	nop
 800bc94:	e7fd      	b.n	800bc92 <pvPortMalloc+0x176>
	return pvReturn;
 800bc96:	69fb      	ldr	r3, [r7, #28]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3728      	adds	r7, #40	@ 0x28
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	20004c80 	.word	0x20004c80
 800bca4:	20004c94 	.word	0x20004c94
 800bca8:	20004c84 	.word	0x20004c84
 800bcac:	20004c78 	.word	0x20004c78
 800bcb0:	20004c88 	.word	0x20004c88
 800bcb4:	20004c8c 	.word	0x20004c8c

0800bcb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b086      	sub	sp, #24
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d04f      	beq.n	800bd6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bcca:	2308      	movs	r3, #8
 800bccc:	425b      	negs	r3, r3
 800bcce:	697a      	ldr	r2, [r7, #20]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	685a      	ldr	r2, [r3, #4]
 800bcdc:	4b25      	ldr	r3, [pc, #148]	@ (800bd74 <vPortFree+0xbc>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4013      	ands	r3, r2
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d10b      	bne.n	800bcfe <vPortFree+0x46>
	__asm volatile
 800bce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcea:	f383 8811 	msr	BASEPRI, r3
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	f3bf 8f4f 	dsb	sy
 800bcf6:	60fb      	str	r3, [r7, #12]
}
 800bcf8:	bf00      	nop
 800bcfa:	bf00      	nop
 800bcfc:	e7fd      	b.n	800bcfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00b      	beq.n	800bd1e <vPortFree+0x66>
	__asm volatile
 800bd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd0a:	f383 8811 	msr	BASEPRI, r3
 800bd0e:	f3bf 8f6f 	isb	sy
 800bd12:	f3bf 8f4f 	dsb	sy
 800bd16:	60bb      	str	r3, [r7, #8]
}
 800bd18:	bf00      	nop
 800bd1a:	bf00      	nop
 800bd1c:	e7fd      	b.n	800bd1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	685a      	ldr	r2, [r3, #4]
 800bd22:	4b14      	ldr	r3, [pc, #80]	@ (800bd74 <vPortFree+0xbc>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4013      	ands	r3, r2
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d01e      	beq.n	800bd6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d11a      	bne.n	800bd6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	685a      	ldr	r2, [r3, #4]
 800bd38:	4b0e      	ldr	r3, [pc, #56]	@ (800bd74 <vPortFree+0xbc>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	43db      	mvns	r3, r3
 800bd3e:	401a      	ands	r2, r3
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bd44:	f7fe fa7e 	bl	800a244 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	685a      	ldr	r2, [r3, #4]
 800bd4c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd78 <vPortFree+0xc0>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4413      	add	r3, r2
 800bd52:	4a09      	ldr	r2, [pc, #36]	@ (800bd78 <vPortFree+0xc0>)
 800bd54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bd56:	6938      	ldr	r0, [r7, #16]
 800bd58:	f000 f874 	bl	800be44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bd5c:	4b07      	ldr	r3, [pc, #28]	@ (800bd7c <vPortFree+0xc4>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	3301      	adds	r3, #1
 800bd62:	4a06      	ldr	r2, [pc, #24]	@ (800bd7c <vPortFree+0xc4>)
 800bd64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bd66:	f7fe fa7b 	bl	800a260 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bd6a:	bf00      	nop
 800bd6c:	3718      	adds	r7, #24
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	20004c94 	.word	0x20004c94
 800bd78:	20004c84 	.word	0x20004c84
 800bd7c:	20004c90 	.word	0x20004c90

0800bd80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bd80:	b480      	push	{r7}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bd86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bd8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bd8c:	4b27      	ldr	r3, [pc, #156]	@ (800be2c <prvHeapInit+0xac>)
 800bd8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f003 0307 	and.w	r3, r3, #7
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d00c      	beq.n	800bdb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	3307      	adds	r3, #7
 800bd9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f023 0307 	bic.w	r3, r3, #7
 800bda6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bda8:	68ba      	ldr	r2, [r7, #8]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	4a1f      	ldr	r2, [pc, #124]	@ (800be2c <prvHeapInit+0xac>)
 800bdb0:	4413      	add	r3, r2
 800bdb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bdb8:	4a1d      	ldr	r2, [pc, #116]	@ (800be30 <prvHeapInit+0xb0>)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bdbe:	4b1c      	ldr	r3, [pc, #112]	@ (800be30 <prvHeapInit+0xb0>)
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	4413      	add	r3, r2
 800bdca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bdcc:	2208      	movs	r2, #8
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	1a9b      	subs	r3, r3, r2
 800bdd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f023 0307 	bic.w	r3, r3, #7
 800bdda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	4a15      	ldr	r2, [pc, #84]	@ (800be34 <prvHeapInit+0xb4>)
 800bde0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bde2:	4b14      	ldr	r3, [pc, #80]	@ (800be34 <prvHeapInit+0xb4>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2200      	movs	r2, #0
 800bde8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bdea:	4b12      	ldr	r3, [pc, #72]	@ (800be34 <prvHeapInit+0xb4>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	1ad2      	subs	r2, r2, r3
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800be00:	4b0c      	ldr	r3, [pc, #48]	@ (800be34 <prvHeapInit+0xb4>)
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	4a0a      	ldr	r2, [pc, #40]	@ (800be38 <prvHeapInit+0xb8>)
 800be0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	4a09      	ldr	r2, [pc, #36]	@ (800be3c <prvHeapInit+0xbc>)
 800be16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800be18:	4b09      	ldr	r3, [pc, #36]	@ (800be40 <prvHeapInit+0xc0>)
 800be1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800be1e:	601a      	str	r2, [r3, #0]
}
 800be20:	bf00      	nop
 800be22:	3714      	adds	r7, #20
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	20001078 	.word	0x20001078
 800be30:	20004c78 	.word	0x20004c78
 800be34:	20004c80 	.word	0x20004c80
 800be38:	20004c88 	.word	0x20004c88
 800be3c:	20004c84 	.word	0x20004c84
 800be40:	20004c94 	.word	0x20004c94

0800be44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800be44:	b480      	push	{r7}
 800be46:	b085      	sub	sp, #20
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800be4c:	4b28      	ldr	r3, [pc, #160]	@ (800bef0 <prvInsertBlockIntoFreeList+0xac>)
 800be4e:	60fb      	str	r3, [r7, #12]
 800be50:	e002      	b.n	800be58 <prvInsertBlockIntoFreeList+0x14>
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	60fb      	str	r3, [r7, #12]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d8f7      	bhi.n	800be52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	68ba      	ldr	r2, [r7, #8]
 800be6c:	4413      	add	r3, r2
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	429a      	cmp	r2, r3
 800be72:	d108      	bne.n	800be86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	685a      	ldr	r2, [r3, #4]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	441a      	add	r2, r3
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	441a      	add	r2, r3
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	429a      	cmp	r2, r3
 800be98:	d118      	bne.n	800becc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	4b15      	ldr	r3, [pc, #84]	@ (800bef4 <prvInsertBlockIntoFreeList+0xb0>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d00d      	beq.n	800bec2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	685a      	ldr	r2, [r3, #4]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	441a      	add	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	601a      	str	r2, [r3, #0]
 800bec0:	e008      	b.n	800bed4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bec2:	4b0c      	ldr	r3, [pc, #48]	@ (800bef4 <prvInsertBlockIntoFreeList+0xb0>)
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	601a      	str	r2, [r3, #0]
 800beca:	e003      	b.n	800bed4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bed4:	68fa      	ldr	r2, [r7, #12]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d002      	beq.n	800bee2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bee2:	bf00      	nop
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	20004c78 	.word	0x20004c78
 800bef4:	20004c80 	.word	0x20004c80

0800bef8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800befc:	2200      	movs	r2, #0
 800befe:	4912      	ldr	r1, [pc, #72]	@ (800bf48 <MX_USB_DEVICE_Init+0x50>)
 800bf00:	4812      	ldr	r0, [pc, #72]	@ (800bf4c <MX_USB_DEVICE_Init+0x54>)
 800bf02:	f7fa fcb3 	bl	800686c <USBD_Init>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bf0c:	f7f4 fd5a 	bl	80009c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bf10:	490f      	ldr	r1, [pc, #60]	@ (800bf50 <MX_USB_DEVICE_Init+0x58>)
 800bf12:	480e      	ldr	r0, [pc, #56]	@ (800bf4c <MX_USB_DEVICE_Init+0x54>)
 800bf14:	f7fa fcda 	bl	80068cc <USBD_RegisterClass>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d001      	beq.n	800bf22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bf1e:	f7f4 fd51 	bl	80009c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bf22:	490c      	ldr	r1, [pc, #48]	@ (800bf54 <MX_USB_DEVICE_Init+0x5c>)
 800bf24:	4809      	ldr	r0, [pc, #36]	@ (800bf4c <MX_USB_DEVICE_Init+0x54>)
 800bf26:	f7fa fc11 	bl	800674c <USBD_CDC_RegisterInterface>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bf30:	f7f4 fd48 	bl	80009c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bf34:	4805      	ldr	r0, [pc, #20]	@ (800bf4c <MX_USB_DEVICE_Init+0x54>)
 800bf36:	f7fa fcff 	bl	8006938 <USBD_Start>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d001      	beq.n	800bf44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bf40:	f7f4 fd40 	bl	80009c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bf44:	bf00      	nop
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	200000d4 	.word	0x200000d4
 800bf4c:	20004c98 	.word	0x20004c98
 800bf50:	2000003c 	.word	0x2000003c
 800bf54:	200000c0 	.word	0x200000c0

0800bf58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	4905      	ldr	r1, [pc, #20]	@ (800bf74 <CDC_Init_FS+0x1c>)
 800bf60:	4805      	ldr	r0, [pc, #20]	@ (800bf78 <CDC_Init_FS+0x20>)
 800bf62:	f7fa fc0d 	bl	8006780 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bf66:	4905      	ldr	r1, [pc, #20]	@ (800bf7c <CDC_Init_FS+0x24>)
 800bf68:	4803      	ldr	r0, [pc, #12]	@ (800bf78 <CDC_Init_FS+0x20>)
 800bf6a:	f7fa fc2b 	bl	80067c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bf6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	20005774 	.word	0x20005774
 800bf78:	20004c98 	.word	0x20004c98
 800bf7c:	20004f74 	.word	0x20004f74

0800bf80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bf80:	b480      	push	{r7}
 800bf82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bf84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	4603      	mov	r3, r0
 800bf98:	6039      	str	r1, [r7, #0]
 800bf9a:	71fb      	strb	r3, [r7, #7]
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bfa0:	79fb      	ldrb	r3, [r7, #7]
 800bfa2:	2b23      	cmp	r3, #35	@ 0x23
 800bfa4:	d84a      	bhi.n	800c03c <CDC_Control_FS+0xac>
 800bfa6:	a201      	add	r2, pc, #4	@ (adr r2, 800bfac <CDC_Control_FS+0x1c>)
 800bfa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfac:	0800c03d 	.word	0x0800c03d
 800bfb0:	0800c03d 	.word	0x0800c03d
 800bfb4:	0800c03d 	.word	0x0800c03d
 800bfb8:	0800c03d 	.word	0x0800c03d
 800bfbc:	0800c03d 	.word	0x0800c03d
 800bfc0:	0800c03d 	.word	0x0800c03d
 800bfc4:	0800c03d 	.word	0x0800c03d
 800bfc8:	0800c03d 	.word	0x0800c03d
 800bfcc:	0800c03d 	.word	0x0800c03d
 800bfd0:	0800c03d 	.word	0x0800c03d
 800bfd4:	0800c03d 	.word	0x0800c03d
 800bfd8:	0800c03d 	.word	0x0800c03d
 800bfdc:	0800c03d 	.word	0x0800c03d
 800bfe0:	0800c03d 	.word	0x0800c03d
 800bfe4:	0800c03d 	.word	0x0800c03d
 800bfe8:	0800c03d 	.word	0x0800c03d
 800bfec:	0800c03d 	.word	0x0800c03d
 800bff0:	0800c03d 	.word	0x0800c03d
 800bff4:	0800c03d 	.word	0x0800c03d
 800bff8:	0800c03d 	.word	0x0800c03d
 800bffc:	0800c03d 	.word	0x0800c03d
 800c000:	0800c03d 	.word	0x0800c03d
 800c004:	0800c03d 	.word	0x0800c03d
 800c008:	0800c03d 	.word	0x0800c03d
 800c00c:	0800c03d 	.word	0x0800c03d
 800c010:	0800c03d 	.word	0x0800c03d
 800c014:	0800c03d 	.word	0x0800c03d
 800c018:	0800c03d 	.word	0x0800c03d
 800c01c:	0800c03d 	.word	0x0800c03d
 800c020:	0800c03d 	.word	0x0800c03d
 800c024:	0800c03d 	.word	0x0800c03d
 800c028:	0800c03d 	.word	0x0800c03d
 800c02c:	0800c03d 	.word	0x0800c03d
 800c030:	0800c03d 	.word	0x0800c03d
 800c034:	0800c03d 	.word	0x0800c03d
 800c038:	0800c03d 	.word	0x0800c03d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c03c:	bf00      	nop
  }

  return (USBD_OK);
 800c03e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c040:	4618      	mov	r0, r3
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c056:	6879      	ldr	r1, [r7, #4]
 800c058:	4805      	ldr	r0, [pc, #20]	@ (800c070 <CDC_Receive_FS+0x24>)
 800c05a:	f7fa fbb3 	bl	80067c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c05e:	4804      	ldr	r0, [pc, #16]	@ (800c070 <CDC_Receive_FS+0x24>)
 800c060:	f7fa fbce 	bl	8006800 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c064:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c066:	4618      	mov	r0, r3
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	20004c98 	.word	0x20004c98

0800c074 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c074:	b480      	push	{r7}
 800c076:	b087      	sub	sp, #28
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	4613      	mov	r3, r2
 800c080:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c086:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	371c      	adds	r7, #28
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr
	...

0800c098 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c098:	b480      	push	{r7}
 800c09a:	b083      	sub	sp, #12
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	4603      	mov	r3, r0
 800c0a0:	6039      	str	r1, [r7, #0]
 800c0a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	2212      	movs	r2, #18
 800c0a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c0aa:	4b03      	ldr	r3, [pc, #12]	@ (800c0b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr
 800c0b8:	200000f0 	.word	0x200000f0

0800c0bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	6039      	str	r1, [r7, #0]
 800c0c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	2204      	movs	r2, #4
 800c0cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c0ce:	4b03      	ldr	r3, [pc, #12]	@ (800c0dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr
 800c0dc:	20000104 	.word	0x20000104

0800c0e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	6039      	str	r1, [r7, #0]
 800c0ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c0ec:	79fb      	ldrb	r3, [r7, #7]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d105      	bne.n	800c0fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0f2:	683a      	ldr	r2, [r7, #0]
 800c0f4:	4907      	ldr	r1, [pc, #28]	@ (800c114 <USBD_FS_ProductStrDescriptor+0x34>)
 800c0f6:	4808      	ldr	r0, [pc, #32]	@ (800c118 <USBD_FS_ProductStrDescriptor+0x38>)
 800c0f8:	f7fb fdce 	bl	8007c98 <USBD_GetString>
 800c0fc:	e004      	b.n	800c108 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0fe:	683a      	ldr	r2, [r7, #0]
 800c100:	4904      	ldr	r1, [pc, #16]	@ (800c114 <USBD_FS_ProductStrDescriptor+0x34>)
 800c102:	4805      	ldr	r0, [pc, #20]	@ (800c118 <USBD_FS_ProductStrDescriptor+0x38>)
 800c104:	f7fb fdc8 	bl	8007c98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c108:	4b02      	ldr	r3, [pc, #8]	@ (800c114 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3708      	adds	r7, #8
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	20005f74 	.word	0x20005f74
 800c118:	0800d338 	.word	0x0800d338

0800c11c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	4603      	mov	r3, r0
 800c124:	6039      	str	r1, [r7, #0]
 800c126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c128:	683a      	ldr	r2, [r7, #0]
 800c12a:	4904      	ldr	r1, [pc, #16]	@ (800c13c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c12c:	4804      	ldr	r0, [pc, #16]	@ (800c140 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c12e:	f7fb fdb3 	bl	8007c98 <USBD_GetString>
  return USBD_StrDesc;
 800c132:	4b02      	ldr	r3, [pc, #8]	@ (800c13c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c134:	4618      	mov	r0, r3
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	20005f74 	.word	0x20005f74
 800c140:	0800d350 	.word	0x0800d350

0800c144 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	4603      	mov	r3, r0
 800c14c:	6039      	str	r1, [r7, #0]
 800c14e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	221a      	movs	r2, #26
 800c154:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c156:	f000 f843 	bl	800c1e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c15a:	4b02      	ldr	r3, [pc, #8]	@ (800c164 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3708      	adds	r7, #8
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	20000108 	.word	0x20000108

0800c168 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	4603      	mov	r3, r0
 800c170:	6039      	str	r1, [r7, #0]
 800c172:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c174:	79fb      	ldrb	r3, [r7, #7]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d105      	bne.n	800c186 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c17a:	683a      	ldr	r2, [r7, #0]
 800c17c:	4907      	ldr	r1, [pc, #28]	@ (800c19c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c17e:	4808      	ldr	r0, [pc, #32]	@ (800c1a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c180:	f7fb fd8a 	bl	8007c98 <USBD_GetString>
 800c184:	e004      	b.n	800c190 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	4904      	ldr	r1, [pc, #16]	@ (800c19c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c18a:	4805      	ldr	r0, [pc, #20]	@ (800c1a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c18c:	f7fb fd84 	bl	8007c98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c190:	4b02      	ldr	r3, [pc, #8]	@ (800c19c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c192:	4618      	mov	r0, r3
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	20005f74 	.word	0x20005f74
 800c1a0:	0800d364 	.word	0x0800d364

0800c1a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	6039      	str	r1, [r7, #0]
 800c1ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1b0:	79fb      	ldrb	r3, [r7, #7]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d105      	bne.n	800c1c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1b6:	683a      	ldr	r2, [r7, #0]
 800c1b8:	4907      	ldr	r1, [pc, #28]	@ (800c1d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1ba:	4808      	ldr	r0, [pc, #32]	@ (800c1dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1bc:	f7fb fd6c 	bl	8007c98 <USBD_GetString>
 800c1c0:	e004      	b.n	800c1cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1c2:	683a      	ldr	r2, [r7, #0]
 800c1c4:	4904      	ldr	r1, [pc, #16]	@ (800c1d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1c6:	4805      	ldr	r0, [pc, #20]	@ (800c1dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1c8:	f7fb fd66 	bl	8007c98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1cc:	4b02      	ldr	r3, [pc, #8]	@ (800c1d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	20005f74 	.word	0x20005f74
 800c1dc:	0800d370 	.word	0x0800d370

0800c1e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c224 <Get_SerialNum+0x44>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c1ec:	4b0e      	ldr	r3, [pc, #56]	@ (800c228 <Get_SerialNum+0x48>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c1f2:	4b0e      	ldr	r3, [pc, #56]	@ (800c22c <Get_SerialNum+0x4c>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d009      	beq.n	800c21a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c206:	2208      	movs	r2, #8
 800c208:	4909      	ldr	r1, [pc, #36]	@ (800c230 <Get_SerialNum+0x50>)
 800c20a:	68f8      	ldr	r0, [r7, #12]
 800c20c:	f000 f814 	bl	800c238 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c210:	2204      	movs	r2, #4
 800c212:	4908      	ldr	r1, [pc, #32]	@ (800c234 <Get_SerialNum+0x54>)
 800c214:	68b8      	ldr	r0, [r7, #8]
 800c216:	f000 f80f 	bl	800c238 <IntToUnicode>
  }
}
 800c21a:	bf00      	nop
 800c21c:	3710      	adds	r7, #16
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	1fff7a10 	.word	0x1fff7a10
 800c228:	1fff7a14 	.word	0x1fff7a14
 800c22c:	1fff7a18 	.word	0x1fff7a18
 800c230:	2000010a 	.word	0x2000010a
 800c234:	2000011a 	.word	0x2000011a

0800c238 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c238:	b480      	push	{r7}
 800c23a:	b087      	sub	sp, #28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	4613      	mov	r3, r2
 800c244:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c246:	2300      	movs	r3, #0
 800c248:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c24a:	2300      	movs	r3, #0
 800c24c:	75fb      	strb	r3, [r7, #23]
 800c24e:	e027      	b.n	800c2a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	0f1b      	lsrs	r3, r3, #28
 800c254:	2b09      	cmp	r3, #9
 800c256:	d80b      	bhi.n	800c270 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	0f1b      	lsrs	r3, r3, #28
 800c25c:	b2da      	uxtb	r2, r3
 800c25e:	7dfb      	ldrb	r3, [r7, #23]
 800c260:	005b      	lsls	r3, r3, #1
 800c262:	4619      	mov	r1, r3
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	440b      	add	r3, r1
 800c268:	3230      	adds	r2, #48	@ 0x30
 800c26a:	b2d2      	uxtb	r2, r2
 800c26c:	701a      	strb	r2, [r3, #0]
 800c26e:	e00a      	b.n	800c286 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	0f1b      	lsrs	r3, r3, #28
 800c274:	b2da      	uxtb	r2, r3
 800c276:	7dfb      	ldrb	r3, [r7, #23]
 800c278:	005b      	lsls	r3, r3, #1
 800c27a:	4619      	mov	r1, r3
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	440b      	add	r3, r1
 800c280:	3237      	adds	r2, #55	@ 0x37
 800c282:	b2d2      	uxtb	r2, r2
 800c284:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	011b      	lsls	r3, r3, #4
 800c28a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c28c:	7dfb      	ldrb	r3, [r7, #23]
 800c28e:	005b      	lsls	r3, r3, #1
 800c290:	3301      	adds	r3, #1
 800c292:	68ba      	ldr	r2, [r7, #8]
 800c294:	4413      	add	r3, r2
 800c296:	2200      	movs	r2, #0
 800c298:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c29a:	7dfb      	ldrb	r3, [r7, #23]
 800c29c:	3301      	adds	r3, #1
 800c29e:	75fb      	strb	r3, [r7, #23]
 800c2a0:	7dfa      	ldrb	r2, [r7, #23]
 800c2a2:	79fb      	ldrb	r3, [r7, #7]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d3d3      	bcc.n	800c250 <IntToUnicode+0x18>
  }
}
 800c2a8:	bf00      	nop
 800c2aa:	bf00      	nop
 800c2ac:	371c      	adds	r7, #28
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
	...

0800c2b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b08a      	sub	sp, #40	@ 0x28
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2c0:	f107 0314 	add.w	r3, r7, #20
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	601a      	str	r2, [r3, #0]
 800c2c8:	605a      	str	r2, [r3, #4]
 800c2ca:	609a      	str	r2, [r3, #8]
 800c2cc:	60da      	str	r2, [r3, #12]
 800c2ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c2d8:	d13a      	bne.n	800c350 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2da:	2300      	movs	r3, #0
 800c2dc:	613b      	str	r3, [r7, #16]
 800c2de:	4b1e      	ldr	r3, [pc, #120]	@ (800c358 <HAL_PCD_MspInit+0xa0>)
 800c2e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2e2:	4a1d      	ldr	r2, [pc, #116]	@ (800c358 <HAL_PCD_MspInit+0xa0>)
 800c2e4:	f043 0301 	orr.w	r3, r3, #1
 800c2e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800c2ea:	4b1b      	ldr	r3, [pc, #108]	@ (800c358 <HAL_PCD_MspInit+0xa0>)
 800c2ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2ee:	f003 0301 	and.w	r3, r3, #1
 800c2f2:	613b      	str	r3, [r7, #16]
 800c2f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c2f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c2fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2fc:	2302      	movs	r3, #2
 800c2fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c300:	2300      	movs	r3, #0
 800c302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c304:	2303      	movs	r3, #3
 800c306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c308:	230a      	movs	r3, #10
 800c30a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c30c:	f107 0314 	add.w	r3, r7, #20
 800c310:	4619      	mov	r1, r3
 800c312:	4812      	ldr	r0, [pc, #72]	@ (800c35c <HAL_PCD_MspInit+0xa4>)
 800c314:	f7f5 f82a 	bl	800136c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c318:	4b0f      	ldr	r3, [pc, #60]	@ (800c358 <HAL_PCD_MspInit+0xa0>)
 800c31a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c31c:	4a0e      	ldr	r2, [pc, #56]	@ (800c358 <HAL_PCD_MspInit+0xa0>)
 800c31e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c322:	6353      	str	r3, [r2, #52]	@ 0x34
 800c324:	2300      	movs	r3, #0
 800c326:	60fb      	str	r3, [r7, #12]
 800c328:	4b0b      	ldr	r3, [pc, #44]	@ (800c358 <HAL_PCD_MspInit+0xa0>)
 800c32a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c32c:	4a0a      	ldr	r2, [pc, #40]	@ (800c358 <HAL_PCD_MspInit+0xa0>)
 800c32e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c332:	6453      	str	r3, [r2, #68]	@ 0x44
 800c334:	4b08      	ldr	r3, [pc, #32]	@ (800c358 <HAL_PCD_MspInit+0xa0>)
 800c336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c33c:	60fb      	str	r3, [r7, #12]
 800c33e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c340:	2200      	movs	r2, #0
 800c342:	2105      	movs	r1, #5
 800c344:	2043      	movs	r0, #67	@ 0x43
 800c346:	f7f4 ffe7 	bl	8001318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c34a:	2043      	movs	r0, #67	@ 0x43
 800c34c:	f7f5 f800 	bl	8001350 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c350:	bf00      	nop
 800c352:	3728      	adds	r7, #40	@ 0x28
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	40023800 	.word	0x40023800
 800c35c:	40020000 	.word	0x40020000

0800c360 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c374:	4619      	mov	r1, r3
 800c376:	4610      	mov	r0, r2
 800c378:	f7fa fb2b 	bl	80069d2 <USBD_LL_SetupStage>
}
 800c37c:	bf00      	nop
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	460b      	mov	r3, r1
 800c38e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c396:	78fa      	ldrb	r2, [r7, #3]
 800c398:	6879      	ldr	r1, [r7, #4]
 800c39a:	4613      	mov	r3, r2
 800c39c:	00db      	lsls	r3, r3, #3
 800c39e:	4413      	add	r3, r2
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	440b      	add	r3, r1
 800c3a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	78fb      	ldrb	r3, [r7, #3]
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	f7fa fb65 	bl	8006a7c <USBD_LL_DataOutStage>
}
 800c3b2:	bf00      	nop
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b082      	sub	sp, #8
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c3cc:	78fa      	ldrb	r2, [r7, #3]
 800c3ce:	6879      	ldr	r1, [r7, #4]
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	00db      	lsls	r3, r3, #3
 800c3d4:	4413      	add	r3, r2
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	440b      	add	r3, r1
 800c3da:	3320      	adds	r3, #32
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	78fb      	ldrb	r3, [r7, #3]
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	f7fa fbfe 	bl	8006be2 <USBD_LL_DataInStage>
}
 800c3e6:	bf00      	nop
 800c3e8:	3708      	adds	r7, #8
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b082      	sub	sp, #8
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7fa fd38 	bl	8006e72 <USBD_LL_SOF>
}
 800c402:	bf00      	nop
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b084      	sub	sp, #16
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c412:	2301      	movs	r3, #1
 800c414:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	79db      	ldrb	r3, [r3, #7]
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	d001      	beq.n	800c422 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c41e:	f7f4 fad1 	bl	80009c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c428:	7bfa      	ldrb	r2, [r7, #15]
 800c42a:	4611      	mov	r1, r2
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fa fcdc 	bl	8006dea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c438:	4618      	mov	r0, r3
 800c43a:	f7fa fc84 	bl	8006d46 <USBD_LL_Reset>
}
 800c43e:	bf00      	nop
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
	...

0800c448 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c456:	4618      	mov	r0, r3
 800c458:	f7fa fcd7 	bl	8006e0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	6812      	ldr	r2, [r2, #0]
 800c46a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c46e:	f043 0301 	orr.w	r3, r3, #1
 800c472:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	7adb      	ldrb	r3, [r3, #11]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d005      	beq.n	800c488 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c47c:	4b04      	ldr	r3, [pc, #16]	@ (800c490 <HAL_PCD_SuspendCallback+0x48>)
 800c47e:	691b      	ldr	r3, [r3, #16]
 800c480:	4a03      	ldr	r2, [pc, #12]	@ (800c490 <HAL_PCD_SuspendCallback+0x48>)
 800c482:	f043 0306 	orr.w	r3, r3, #6
 800c486:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c488:	bf00      	nop
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	e000ed00 	.word	0xe000ed00

0800c494 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fa fccd 	bl	8006e42 <USBD_LL_Resume>
}
 800c4a8:	bf00      	nop
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4c2:	78fa      	ldrb	r2, [r7, #3]
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fa fd25 	bl	8006f16 <USBD_LL_IsoOUTIncomplete>
}
 800c4cc:	bf00      	nop
 800c4ce:	3708      	adds	r7, #8
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	460b      	mov	r3, r1
 800c4de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4e6:	78fa      	ldrb	r2, [r7, #3]
 800c4e8:	4611      	mov	r1, r2
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fa fce1 	bl	8006eb2 <USBD_LL_IsoINIncomplete>
}
 800c4f0:	bf00      	nop
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c506:	4618      	mov	r0, r3
 800c508:	f7fa fd37 	bl	8006f7a <USBD_LL_DevConnected>
}
 800c50c:	bf00      	nop
 800c50e:	3708      	adds	r7, #8
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c522:	4618      	mov	r0, r3
 800c524:	f7fa fd34 	bl	8006f90 <USBD_LL_DevDisconnected>
}
 800c528:	bf00      	nop
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d13c      	bne.n	800c5ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c540:	4a20      	ldr	r2, [pc, #128]	@ (800c5c4 <USBD_LL_Init+0x94>)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	4a1e      	ldr	r2, [pc, #120]	@ (800c5c4 <USBD_LL_Init+0x94>)
 800c54c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c550:	4b1c      	ldr	r3, [pc, #112]	@ (800c5c4 <USBD_LL_Init+0x94>)
 800c552:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c556:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c558:	4b1a      	ldr	r3, [pc, #104]	@ (800c5c4 <USBD_LL_Init+0x94>)
 800c55a:	2204      	movs	r2, #4
 800c55c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c55e:	4b19      	ldr	r3, [pc, #100]	@ (800c5c4 <USBD_LL_Init+0x94>)
 800c560:	2202      	movs	r2, #2
 800c562:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c564:	4b17      	ldr	r3, [pc, #92]	@ (800c5c4 <USBD_LL_Init+0x94>)
 800c566:	2200      	movs	r2, #0
 800c568:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c56a:	4b16      	ldr	r3, [pc, #88]	@ (800c5c4 <USBD_LL_Init+0x94>)
 800c56c:	2202      	movs	r2, #2
 800c56e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c570:	4b14      	ldr	r3, [pc, #80]	@ (800c5c4 <USBD_LL_Init+0x94>)
 800c572:	2200      	movs	r2, #0
 800c574:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c576:	4b13      	ldr	r3, [pc, #76]	@ (800c5c4 <USBD_LL_Init+0x94>)
 800c578:	2200      	movs	r2, #0
 800c57a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c57c:	4b11      	ldr	r3, [pc, #68]	@ (800c5c4 <USBD_LL_Init+0x94>)
 800c57e:	2200      	movs	r2, #0
 800c580:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c582:	4b10      	ldr	r3, [pc, #64]	@ (800c5c4 <USBD_LL_Init+0x94>)
 800c584:	2200      	movs	r2, #0
 800c586:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c588:	4b0e      	ldr	r3, [pc, #56]	@ (800c5c4 <USBD_LL_Init+0x94>)
 800c58a:	2200      	movs	r2, #0
 800c58c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c58e:	480d      	ldr	r0, [pc, #52]	@ (800c5c4 <USBD_LL_Init+0x94>)
 800c590:	f7f5 fd3f 	bl	8002012 <HAL_PCD_Init>
 800c594:	4603      	mov	r3, r0
 800c596:	2b00      	cmp	r3, #0
 800c598:	d001      	beq.n	800c59e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c59a:	f7f4 fa13 	bl	80009c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c59e:	2180      	movs	r1, #128	@ 0x80
 800c5a0:	4808      	ldr	r0, [pc, #32]	@ (800c5c4 <USBD_LL_Init+0x94>)
 800c5a2:	f7f6 ff6c 	bl	800347e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c5a6:	2240      	movs	r2, #64	@ 0x40
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	4806      	ldr	r0, [pc, #24]	@ (800c5c4 <USBD_LL_Init+0x94>)
 800c5ac:	f7f6 ff20 	bl	80033f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c5b0:	2280      	movs	r2, #128	@ 0x80
 800c5b2:	2101      	movs	r1, #1
 800c5b4:	4803      	ldr	r0, [pc, #12]	@ (800c5c4 <USBD_LL_Init+0x94>)
 800c5b6:	f7f6 ff1b 	bl	80033f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3708      	adds	r7, #8
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	20006174 	.word	0x20006174

0800c5c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7f5 fe26 	bl	8002230 <HAL_PCD_Start>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5e8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f000 f942 	bl	800c874 <USBD_Get_USB_Status>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3710      	adds	r7, #16
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b084      	sub	sp, #16
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
 800c606:	4608      	mov	r0, r1
 800c608:	4611      	mov	r1, r2
 800c60a:	461a      	mov	r2, r3
 800c60c:	4603      	mov	r3, r0
 800c60e:	70fb      	strb	r3, [r7, #3]
 800c610:	460b      	mov	r3, r1
 800c612:	70bb      	strb	r3, [r7, #2]
 800c614:	4613      	mov	r3, r2
 800c616:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c618:	2300      	movs	r3, #0
 800c61a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c61c:	2300      	movs	r3, #0
 800c61e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c626:	78bb      	ldrb	r3, [r7, #2]
 800c628:	883a      	ldrh	r2, [r7, #0]
 800c62a:	78f9      	ldrb	r1, [r7, #3]
 800c62c:	f7f6 fafa 	bl	8002c24 <HAL_PCD_EP_Open>
 800c630:	4603      	mov	r3, r0
 800c632:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c634:	7bfb      	ldrb	r3, [r7, #15]
 800c636:	4618      	mov	r0, r3
 800c638:	f000 f91c 	bl	800c874 <USBD_Get_USB_Status>
 800c63c:	4603      	mov	r3, r0
 800c63e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c640:	7bbb      	ldrb	r3, [r7, #14]
}
 800c642:	4618      	mov	r0, r3
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b084      	sub	sp, #16
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
 800c652:	460b      	mov	r3, r1
 800c654:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c656:	2300      	movs	r3, #0
 800c658:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c664:	78fa      	ldrb	r2, [r7, #3]
 800c666:	4611      	mov	r1, r2
 800c668:	4618      	mov	r0, r3
 800c66a:	f7f6 fb45 	bl	8002cf8 <HAL_PCD_EP_Close>
 800c66e:	4603      	mov	r3, r0
 800c670:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c672:	7bfb      	ldrb	r3, [r7, #15]
 800c674:	4618      	mov	r0, r3
 800c676:	f000 f8fd 	bl	800c874 <USBD_Get_USB_Status>
 800c67a:	4603      	mov	r3, r0
 800c67c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c67e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c680:	4618      	mov	r0, r3
 800c682:	3710      	adds	r7, #16
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	460b      	mov	r3, r1
 800c692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c694:	2300      	movs	r3, #0
 800c696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c698:	2300      	movs	r3, #0
 800c69a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c6a2:	78fa      	ldrb	r2, [r7, #3]
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7f6 fbfd 	bl	8002ea6 <HAL_PCD_EP_SetStall>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6b0:	7bfb      	ldrb	r3, [r7, #15]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 f8de 	bl	800c874 <USBD_Get_USB_Status>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3710      	adds	r7, #16
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b084      	sub	sp, #16
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c6e0:	78fa      	ldrb	r2, [r7, #3]
 800c6e2:	4611      	mov	r1, r2
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7f6 fc41 	bl	8002f6c <HAL_PCD_EP_ClrStall>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6ee:	7bfb      	ldrb	r3, [r7, #15]
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f000 f8bf 	bl	800c874 <USBD_Get_USB_Status>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3710      	adds	r7, #16
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	460b      	mov	r3, r1
 800c70e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c716:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	da0b      	bge.n	800c738 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c720:	78fb      	ldrb	r3, [r7, #3]
 800c722:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c726:	68f9      	ldr	r1, [r7, #12]
 800c728:	4613      	mov	r3, r2
 800c72a:	00db      	lsls	r3, r3, #3
 800c72c:	4413      	add	r3, r2
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	440b      	add	r3, r1
 800c732:	3316      	adds	r3, #22
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	e00b      	b.n	800c750 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c738:	78fb      	ldrb	r3, [r7, #3]
 800c73a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c73e:	68f9      	ldr	r1, [r7, #12]
 800c740:	4613      	mov	r3, r2
 800c742:	00db      	lsls	r3, r3, #3
 800c744:	4413      	add	r3, r2
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	440b      	add	r3, r1
 800c74a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c74e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c750:	4618      	mov	r0, r3
 800c752:	3714      	adds	r7, #20
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr

0800c75c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	460b      	mov	r3, r1
 800c766:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c76c:	2300      	movs	r3, #0
 800c76e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c776:	78fa      	ldrb	r2, [r7, #3]
 800c778:	4611      	mov	r1, r2
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7f6 fa2e 	bl	8002bdc <HAL_PCD_SetAddress>
 800c780:	4603      	mov	r3, r0
 800c782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c784:	7bfb      	ldrb	r3, [r7, #15]
 800c786:	4618      	mov	r0, r3
 800c788:	f000 f874 	bl	800c874 <USBD_Get_USB_Status>
 800c78c:	4603      	mov	r3, r0
 800c78e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c790:	7bbb      	ldrb	r3, [r7, #14]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b086      	sub	sp, #24
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	60f8      	str	r0, [r7, #12]
 800c7a2:	607a      	str	r2, [r7, #4]
 800c7a4:	603b      	str	r3, [r7, #0]
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c7b8:	7af9      	ldrb	r1, [r7, #11]
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	f7f6 fb38 	bl	8002e32 <HAL_PCD_EP_Transmit>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7c6:	7dfb      	ldrb	r3, [r7, #23]
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f000 f853 	bl	800c874 <USBD_Get_USB_Status>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c7d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3718      	adds	r7, #24
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b086      	sub	sp, #24
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	607a      	str	r2, [r7, #4]
 800c7e6:	603b      	str	r3, [r7, #0]
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c7fa:	7af9      	ldrb	r1, [r7, #11]
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	f7f6 fac4 	bl	8002d8c <HAL_PCD_EP_Receive>
 800c804:	4603      	mov	r3, r0
 800c806:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c808:	7dfb      	ldrb	r3, [r7, #23]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f000 f832 	bl	800c874 <USBD_Get_USB_Status>
 800c810:	4603      	mov	r3, r0
 800c812:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c814:	7dbb      	ldrb	r3, [r7, #22]
}
 800c816:	4618      	mov	r0, r3
 800c818:	3718      	adds	r7, #24
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}

0800c81e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c81e:	b580      	push	{r7, lr}
 800c820:	b082      	sub	sp, #8
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
 800c826:	460b      	mov	r3, r1
 800c828:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c830:	78fa      	ldrb	r2, [r7, #3]
 800c832:	4611      	mov	r1, r2
 800c834:	4618      	mov	r0, r3
 800c836:	f7f6 fae4 	bl	8002e02 <HAL_PCD_EP_GetRxCount>
 800c83a:	4603      	mov	r3, r0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c84c:	4b03      	ldr	r3, [pc, #12]	@ (800c85c <USBD_static_malloc+0x18>)
}
 800c84e:	4618      	mov	r0, r3
 800c850:	370c      	adds	r7, #12
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr
 800c85a:	bf00      	nop
 800c85c:	20006658 	.word	0x20006658

0800c860 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]

}
 800c868:	bf00      	nop
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c874:	b480      	push	{r7}
 800c876:	b085      	sub	sp, #20
 800c878:	af00      	add	r7, sp, #0
 800c87a:	4603      	mov	r3, r0
 800c87c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c87e:	2300      	movs	r3, #0
 800c880:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c882:	79fb      	ldrb	r3, [r7, #7]
 800c884:	2b03      	cmp	r3, #3
 800c886:	d817      	bhi.n	800c8b8 <USBD_Get_USB_Status+0x44>
 800c888:	a201      	add	r2, pc, #4	@ (adr r2, 800c890 <USBD_Get_USB_Status+0x1c>)
 800c88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c88e:	bf00      	nop
 800c890:	0800c8a1 	.word	0x0800c8a1
 800c894:	0800c8a7 	.word	0x0800c8a7
 800c898:	0800c8ad 	.word	0x0800c8ad
 800c89c:	0800c8b3 	.word	0x0800c8b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c8a4:	e00b      	b.n	800c8be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c8a6:	2303      	movs	r3, #3
 800c8a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c8aa:	e008      	b.n	800c8be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c8b0:	e005      	b.n	800c8be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c8b2:	2303      	movs	r3, #3
 800c8b4:	73fb      	strb	r3, [r7, #15]
    break;
 800c8b6:	e002      	b.n	800c8be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c8b8:	2303      	movs	r3, #3
 800c8ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c8bc:	bf00      	nop
  }
  return usb_status;
 800c8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3714      	adds	r7, #20
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <siprintf>:
 800c8cc:	b40e      	push	{r1, r2, r3}
 800c8ce:	b500      	push	{lr}
 800c8d0:	b09c      	sub	sp, #112	@ 0x70
 800c8d2:	ab1d      	add	r3, sp, #116	@ 0x74
 800c8d4:	9002      	str	r0, [sp, #8]
 800c8d6:	9006      	str	r0, [sp, #24]
 800c8d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c8dc:	4809      	ldr	r0, [pc, #36]	@ (800c904 <siprintf+0x38>)
 800c8de:	9107      	str	r1, [sp, #28]
 800c8e0:	9104      	str	r1, [sp, #16]
 800c8e2:	4909      	ldr	r1, [pc, #36]	@ (800c908 <siprintf+0x3c>)
 800c8e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8e8:	9105      	str	r1, [sp, #20]
 800c8ea:	6800      	ldr	r0, [r0, #0]
 800c8ec:	9301      	str	r3, [sp, #4]
 800c8ee:	a902      	add	r1, sp, #8
 800c8f0:	f000 f9f8 	bl	800cce4 <_svfiprintf_r>
 800c8f4:	9b02      	ldr	r3, [sp, #8]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	701a      	strb	r2, [r3, #0]
 800c8fa:	b01c      	add	sp, #112	@ 0x70
 800c8fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c900:	b003      	add	sp, #12
 800c902:	4770      	bx	lr
 800c904:	20000124 	.word	0x20000124
 800c908:	ffff0208 	.word	0xffff0208

0800c90c <memset>:
 800c90c:	4402      	add	r2, r0
 800c90e:	4603      	mov	r3, r0
 800c910:	4293      	cmp	r3, r2
 800c912:	d100      	bne.n	800c916 <memset+0xa>
 800c914:	4770      	bx	lr
 800c916:	f803 1b01 	strb.w	r1, [r3], #1
 800c91a:	e7f9      	b.n	800c910 <memset+0x4>

0800c91c <_reclaim_reent>:
 800c91c:	4b29      	ldr	r3, [pc, #164]	@ (800c9c4 <_reclaim_reent+0xa8>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4283      	cmp	r3, r0
 800c922:	b570      	push	{r4, r5, r6, lr}
 800c924:	4604      	mov	r4, r0
 800c926:	d04b      	beq.n	800c9c0 <_reclaim_reent+0xa4>
 800c928:	69c3      	ldr	r3, [r0, #28]
 800c92a:	b1ab      	cbz	r3, 800c958 <_reclaim_reent+0x3c>
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	b16b      	cbz	r3, 800c94c <_reclaim_reent+0x30>
 800c930:	2500      	movs	r5, #0
 800c932:	69e3      	ldr	r3, [r4, #28]
 800c934:	68db      	ldr	r3, [r3, #12]
 800c936:	5959      	ldr	r1, [r3, r5]
 800c938:	2900      	cmp	r1, #0
 800c93a:	d13b      	bne.n	800c9b4 <_reclaim_reent+0x98>
 800c93c:	3504      	adds	r5, #4
 800c93e:	2d80      	cmp	r5, #128	@ 0x80
 800c940:	d1f7      	bne.n	800c932 <_reclaim_reent+0x16>
 800c942:	69e3      	ldr	r3, [r4, #28]
 800c944:	4620      	mov	r0, r4
 800c946:	68d9      	ldr	r1, [r3, #12]
 800c948:	f000 f878 	bl	800ca3c <_free_r>
 800c94c:	69e3      	ldr	r3, [r4, #28]
 800c94e:	6819      	ldr	r1, [r3, #0]
 800c950:	b111      	cbz	r1, 800c958 <_reclaim_reent+0x3c>
 800c952:	4620      	mov	r0, r4
 800c954:	f000 f872 	bl	800ca3c <_free_r>
 800c958:	6961      	ldr	r1, [r4, #20]
 800c95a:	b111      	cbz	r1, 800c962 <_reclaim_reent+0x46>
 800c95c:	4620      	mov	r0, r4
 800c95e:	f000 f86d 	bl	800ca3c <_free_r>
 800c962:	69e1      	ldr	r1, [r4, #28]
 800c964:	b111      	cbz	r1, 800c96c <_reclaim_reent+0x50>
 800c966:	4620      	mov	r0, r4
 800c968:	f000 f868 	bl	800ca3c <_free_r>
 800c96c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c96e:	b111      	cbz	r1, 800c976 <_reclaim_reent+0x5a>
 800c970:	4620      	mov	r0, r4
 800c972:	f000 f863 	bl	800ca3c <_free_r>
 800c976:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c978:	b111      	cbz	r1, 800c980 <_reclaim_reent+0x64>
 800c97a:	4620      	mov	r0, r4
 800c97c:	f000 f85e 	bl	800ca3c <_free_r>
 800c980:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c982:	b111      	cbz	r1, 800c98a <_reclaim_reent+0x6e>
 800c984:	4620      	mov	r0, r4
 800c986:	f000 f859 	bl	800ca3c <_free_r>
 800c98a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c98c:	b111      	cbz	r1, 800c994 <_reclaim_reent+0x78>
 800c98e:	4620      	mov	r0, r4
 800c990:	f000 f854 	bl	800ca3c <_free_r>
 800c994:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c996:	b111      	cbz	r1, 800c99e <_reclaim_reent+0x82>
 800c998:	4620      	mov	r0, r4
 800c99a:	f000 f84f 	bl	800ca3c <_free_r>
 800c99e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c9a0:	b111      	cbz	r1, 800c9a8 <_reclaim_reent+0x8c>
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	f000 f84a 	bl	800ca3c <_free_r>
 800c9a8:	6a23      	ldr	r3, [r4, #32]
 800c9aa:	b14b      	cbz	r3, 800c9c0 <_reclaim_reent+0xa4>
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c9b2:	4718      	bx	r3
 800c9b4:	680e      	ldr	r6, [r1, #0]
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	f000 f840 	bl	800ca3c <_free_r>
 800c9bc:	4631      	mov	r1, r6
 800c9be:	e7bb      	b.n	800c938 <_reclaim_reent+0x1c>
 800c9c0:	bd70      	pop	{r4, r5, r6, pc}
 800c9c2:	bf00      	nop
 800c9c4:	20000124 	.word	0x20000124

0800c9c8 <__errno>:
 800c9c8:	4b01      	ldr	r3, [pc, #4]	@ (800c9d0 <__errno+0x8>)
 800c9ca:	6818      	ldr	r0, [r3, #0]
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	20000124 	.word	0x20000124

0800c9d4 <__libc_init_array>:
 800c9d4:	b570      	push	{r4, r5, r6, lr}
 800c9d6:	4d0d      	ldr	r5, [pc, #52]	@ (800ca0c <__libc_init_array+0x38>)
 800c9d8:	4c0d      	ldr	r4, [pc, #52]	@ (800ca10 <__libc_init_array+0x3c>)
 800c9da:	1b64      	subs	r4, r4, r5
 800c9dc:	10a4      	asrs	r4, r4, #2
 800c9de:	2600      	movs	r6, #0
 800c9e0:	42a6      	cmp	r6, r4
 800c9e2:	d109      	bne.n	800c9f8 <__libc_init_array+0x24>
 800c9e4:	4d0b      	ldr	r5, [pc, #44]	@ (800ca14 <__libc_init_array+0x40>)
 800c9e6:	4c0c      	ldr	r4, [pc, #48]	@ (800ca18 <__libc_init_array+0x44>)
 800c9e8:	f000 fc66 	bl	800d2b8 <_init>
 800c9ec:	1b64      	subs	r4, r4, r5
 800c9ee:	10a4      	asrs	r4, r4, #2
 800c9f0:	2600      	movs	r6, #0
 800c9f2:	42a6      	cmp	r6, r4
 800c9f4:	d105      	bne.n	800ca02 <__libc_init_array+0x2e>
 800c9f6:	bd70      	pop	{r4, r5, r6, pc}
 800c9f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9fc:	4798      	blx	r3
 800c9fe:	3601      	adds	r6, #1
 800ca00:	e7ee      	b.n	800c9e0 <__libc_init_array+0xc>
 800ca02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca06:	4798      	blx	r3
 800ca08:	3601      	adds	r6, #1
 800ca0a:	e7f2      	b.n	800c9f2 <__libc_init_array+0x1e>
 800ca0c:	0800d454 	.word	0x0800d454
 800ca10:	0800d454 	.word	0x0800d454
 800ca14:	0800d454 	.word	0x0800d454
 800ca18:	0800d458 	.word	0x0800d458

0800ca1c <__retarget_lock_acquire_recursive>:
 800ca1c:	4770      	bx	lr

0800ca1e <__retarget_lock_release_recursive>:
 800ca1e:	4770      	bx	lr

0800ca20 <memcpy>:
 800ca20:	440a      	add	r2, r1
 800ca22:	4291      	cmp	r1, r2
 800ca24:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca28:	d100      	bne.n	800ca2c <memcpy+0xc>
 800ca2a:	4770      	bx	lr
 800ca2c:	b510      	push	{r4, lr}
 800ca2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca36:	4291      	cmp	r1, r2
 800ca38:	d1f9      	bne.n	800ca2e <memcpy+0xe>
 800ca3a:	bd10      	pop	{r4, pc}

0800ca3c <_free_r>:
 800ca3c:	b538      	push	{r3, r4, r5, lr}
 800ca3e:	4605      	mov	r5, r0
 800ca40:	2900      	cmp	r1, #0
 800ca42:	d041      	beq.n	800cac8 <_free_r+0x8c>
 800ca44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca48:	1f0c      	subs	r4, r1, #4
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	bfb8      	it	lt
 800ca4e:	18e4      	addlt	r4, r4, r3
 800ca50:	f000 f8e0 	bl	800cc14 <__malloc_lock>
 800ca54:	4a1d      	ldr	r2, [pc, #116]	@ (800cacc <_free_r+0x90>)
 800ca56:	6813      	ldr	r3, [r2, #0]
 800ca58:	b933      	cbnz	r3, 800ca68 <_free_r+0x2c>
 800ca5a:	6063      	str	r3, [r4, #4]
 800ca5c:	6014      	str	r4, [r2, #0]
 800ca5e:	4628      	mov	r0, r5
 800ca60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca64:	f000 b8dc 	b.w	800cc20 <__malloc_unlock>
 800ca68:	42a3      	cmp	r3, r4
 800ca6a:	d908      	bls.n	800ca7e <_free_r+0x42>
 800ca6c:	6820      	ldr	r0, [r4, #0]
 800ca6e:	1821      	adds	r1, r4, r0
 800ca70:	428b      	cmp	r3, r1
 800ca72:	bf01      	itttt	eq
 800ca74:	6819      	ldreq	r1, [r3, #0]
 800ca76:	685b      	ldreq	r3, [r3, #4]
 800ca78:	1809      	addeq	r1, r1, r0
 800ca7a:	6021      	streq	r1, [r4, #0]
 800ca7c:	e7ed      	b.n	800ca5a <_free_r+0x1e>
 800ca7e:	461a      	mov	r2, r3
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	b10b      	cbz	r3, 800ca88 <_free_r+0x4c>
 800ca84:	42a3      	cmp	r3, r4
 800ca86:	d9fa      	bls.n	800ca7e <_free_r+0x42>
 800ca88:	6811      	ldr	r1, [r2, #0]
 800ca8a:	1850      	adds	r0, r2, r1
 800ca8c:	42a0      	cmp	r0, r4
 800ca8e:	d10b      	bne.n	800caa8 <_free_r+0x6c>
 800ca90:	6820      	ldr	r0, [r4, #0]
 800ca92:	4401      	add	r1, r0
 800ca94:	1850      	adds	r0, r2, r1
 800ca96:	4283      	cmp	r3, r0
 800ca98:	6011      	str	r1, [r2, #0]
 800ca9a:	d1e0      	bne.n	800ca5e <_free_r+0x22>
 800ca9c:	6818      	ldr	r0, [r3, #0]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	6053      	str	r3, [r2, #4]
 800caa2:	4408      	add	r0, r1
 800caa4:	6010      	str	r0, [r2, #0]
 800caa6:	e7da      	b.n	800ca5e <_free_r+0x22>
 800caa8:	d902      	bls.n	800cab0 <_free_r+0x74>
 800caaa:	230c      	movs	r3, #12
 800caac:	602b      	str	r3, [r5, #0]
 800caae:	e7d6      	b.n	800ca5e <_free_r+0x22>
 800cab0:	6820      	ldr	r0, [r4, #0]
 800cab2:	1821      	adds	r1, r4, r0
 800cab4:	428b      	cmp	r3, r1
 800cab6:	bf04      	itt	eq
 800cab8:	6819      	ldreq	r1, [r3, #0]
 800caba:	685b      	ldreq	r3, [r3, #4]
 800cabc:	6063      	str	r3, [r4, #4]
 800cabe:	bf04      	itt	eq
 800cac0:	1809      	addeq	r1, r1, r0
 800cac2:	6021      	streq	r1, [r4, #0]
 800cac4:	6054      	str	r4, [r2, #4]
 800cac6:	e7ca      	b.n	800ca5e <_free_r+0x22>
 800cac8:	bd38      	pop	{r3, r4, r5, pc}
 800caca:	bf00      	nop
 800cacc:	200069bc 	.word	0x200069bc

0800cad0 <sbrk_aligned>:
 800cad0:	b570      	push	{r4, r5, r6, lr}
 800cad2:	4e0f      	ldr	r6, [pc, #60]	@ (800cb10 <sbrk_aligned+0x40>)
 800cad4:	460c      	mov	r4, r1
 800cad6:	6831      	ldr	r1, [r6, #0]
 800cad8:	4605      	mov	r5, r0
 800cada:	b911      	cbnz	r1, 800cae2 <sbrk_aligned+0x12>
 800cadc:	f000 fba6 	bl	800d22c <_sbrk_r>
 800cae0:	6030      	str	r0, [r6, #0]
 800cae2:	4621      	mov	r1, r4
 800cae4:	4628      	mov	r0, r5
 800cae6:	f000 fba1 	bl	800d22c <_sbrk_r>
 800caea:	1c43      	adds	r3, r0, #1
 800caec:	d103      	bne.n	800caf6 <sbrk_aligned+0x26>
 800caee:	f04f 34ff 	mov.w	r4, #4294967295
 800caf2:	4620      	mov	r0, r4
 800caf4:	bd70      	pop	{r4, r5, r6, pc}
 800caf6:	1cc4      	adds	r4, r0, #3
 800caf8:	f024 0403 	bic.w	r4, r4, #3
 800cafc:	42a0      	cmp	r0, r4
 800cafe:	d0f8      	beq.n	800caf2 <sbrk_aligned+0x22>
 800cb00:	1a21      	subs	r1, r4, r0
 800cb02:	4628      	mov	r0, r5
 800cb04:	f000 fb92 	bl	800d22c <_sbrk_r>
 800cb08:	3001      	adds	r0, #1
 800cb0a:	d1f2      	bne.n	800caf2 <sbrk_aligned+0x22>
 800cb0c:	e7ef      	b.n	800caee <sbrk_aligned+0x1e>
 800cb0e:	bf00      	nop
 800cb10:	200069b8 	.word	0x200069b8

0800cb14 <_malloc_r>:
 800cb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb18:	1ccd      	adds	r5, r1, #3
 800cb1a:	f025 0503 	bic.w	r5, r5, #3
 800cb1e:	3508      	adds	r5, #8
 800cb20:	2d0c      	cmp	r5, #12
 800cb22:	bf38      	it	cc
 800cb24:	250c      	movcc	r5, #12
 800cb26:	2d00      	cmp	r5, #0
 800cb28:	4606      	mov	r6, r0
 800cb2a:	db01      	blt.n	800cb30 <_malloc_r+0x1c>
 800cb2c:	42a9      	cmp	r1, r5
 800cb2e:	d904      	bls.n	800cb3a <_malloc_r+0x26>
 800cb30:	230c      	movs	r3, #12
 800cb32:	6033      	str	r3, [r6, #0]
 800cb34:	2000      	movs	r0, #0
 800cb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc10 <_malloc_r+0xfc>
 800cb3e:	f000 f869 	bl	800cc14 <__malloc_lock>
 800cb42:	f8d8 3000 	ldr.w	r3, [r8]
 800cb46:	461c      	mov	r4, r3
 800cb48:	bb44      	cbnz	r4, 800cb9c <_malloc_r+0x88>
 800cb4a:	4629      	mov	r1, r5
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	f7ff ffbf 	bl	800cad0 <sbrk_aligned>
 800cb52:	1c43      	adds	r3, r0, #1
 800cb54:	4604      	mov	r4, r0
 800cb56:	d158      	bne.n	800cc0a <_malloc_r+0xf6>
 800cb58:	f8d8 4000 	ldr.w	r4, [r8]
 800cb5c:	4627      	mov	r7, r4
 800cb5e:	2f00      	cmp	r7, #0
 800cb60:	d143      	bne.n	800cbea <_malloc_r+0xd6>
 800cb62:	2c00      	cmp	r4, #0
 800cb64:	d04b      	beq.n	800cbfe <_malloc_r+0xea>
 800cb66:	6823      	ldr	r3, [r4, #0]
 800cb68:	4639      	mov	r1, r7
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	eb04 0903 	add.w	r9, r4, r3
 800cb70:	f000 fb5c 	bl	800d22c <_sbrk_r>
 800cb74:	4581      	cmp	r9, r0
 800cb76:	d142      	bne.n	800cbfe <_malloc_r+0xea>
 800cb78:	6821      	ldr	r1, [r4, #0]
 800cb7a:	1a6d      	subs	r5, r5, r1
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	4630      	mov	r0, r6
 800cb80:	f7ff ffa6 	bl	800cad0 <sbrk_aligned>
 800cb84:	3001      	adds	r0, #1
 800cb86:	d03a      	beq.n	800cbfe <_malloc_r+0xea>
 800cb88:	6823      	ldr	r3, [r4, #0]
 800cb8a:	442b      	add	r3, r5
 800cb8c:	6023      	str	r3, [r4, #0]
 800cb8e:	f8d8 3000 	ldr.w	r3, [r8]
 800cb92:	685a      	ldr	r2, [r3, #4]
 800cb94:	bb62      	cbnz	r2, 800cbf0 <_malloc_r+0xdc>
 800cb96:	f8c8 7000 	str.w	r7, [r8]
 800cb9a:	e00f      	b.n	800cbbc <_malloc_r+0xa8>
 800cb9c:	6822      	ldr	r2, [r4, #0]
 800cb9e:	1b52      	subs	r2, r2, r5
 800cba0:	d420      	bmi.n	800cbe4 <_malloc_r+0xd0>
 800cba2:	2a0b      	cmp	r2, #11
 800cba4:	d917      	bls.n	800cbd6 <_malloc_r+0xc2>
 800cba6:	1961      	adds	r1, r4, r5
 800cba8:	42a3      	cmp	r3, r4
 800cbaa:	6025      	str	r5, [r4, #0]
 800cbac:	bf18      	it	ne
 800cbae:	6059      	strne	r1, [r3, #4]
 800cbb0:	6863      	ldr	r3, [r4, #4]
 800cbb2:	bf08      	it	eq
 800cbb4:	f8c8 1000 	streq.w	r1, [r8]
 800cbb8:	5162      	str	r2, [r4, r5]
 800cbba:	604b      	str	r3, [r1, #4]
 800cbbc:	4630      	mov	r0, r6
 800cbbe:	f000 f82f 	bl	800cc20 <__malloc_unlock>
 800cbc2:	f104 000b 	add.w	r0, r4, #11
 800cbc6:	1d23      	adds	r3, r4, #4
 800cbc8:	f020 0007 	bic.w	r0, r0, #7
 800cbcc:	1ac2      	subs	r2, r0, r3
 800cbce:	bf1c      	itt	ne
 800cbd0:	1a1b      	subne	r3, r3, r0
 800cbd2:	50a3      	strne	r3, [r4, r2]
 800cbd4:	e7af      	b.n	800cb36 <_malloc_r+0x22>
 800cbd6:	6862      	ldr	r2, [r4, #4]
 800cbd8:	42a3      	cmp	r3, r4
 800cbda:	bf0c      	ite	eq
 800cbdc:	f8c8 2000 	streq.w	r2, [r8]
 800cbe0:	605a      	strne	r2, [r3, #4]
 800cbe2:	e7eb      	b.n	800cbbc <_malloc_r+0xa8>
 800cbe4:	4623      	mov	r3, r4
 800cbe6:	6864      	ldr	r4, [r4, #4]
 800cbe8:	e7ae      	b.n	800cb48 <_malloc_r+0x34>
 800cbea:	463c      	mov	r4, r7
 800cbec:	687f      	ldr	r7, [r7, #4]
 800cbee:	e7b6      	b.n	800cb5e <_malloc_r+0x4a>
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	42a3      	cmp	r3, r4
 800cbf6:	d1fb      	bne.n	800cbf0 <_malloc_r+0xdc>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	6053      	str	r3, [r2, #4]
 800cbfc:	e7de      	b.n	800cbbc <_malloc_r+0xa8>
 800cbfe:	230c      	movs	r3, #12
 800cc00:	6033      	str	r3, [r6, #0]
 800cc02:	4630      	mov	r0, r6
 800cc04:	f000 f80c 	bl	800cc20 <__malloc_unlock>
 800cc08:	e794      	b.n	800cb34 <_malloc_r+0x20>
 800cc0a:	6005      	str	r5, [r0, #0]
 800cc0c:	e7d6      	b.n	800cbbc <_malloc_r+0xa8>
 800cc0e:	bf00      	nop
 800cc10:	200069bc 	.word	0x200069bc

0800cc14 <__malloc_lock>:
 800cc14:	4801      	ldr	r0, [pc, #4]	@ (800cc1c <__malloc_lock+0x8>)
 800cc16:	f7ff bf01 	b.w	800ca1c <__retarget_lock_acquire_recursive>
 800cc1a:	bf00      	nop
 800cc1c:	200069b4 	.word	0x200069b4

0800cc20 <__malloc_unlock>:
 800cc20:	4801      	ldr	r0, [pc, #4]	@ (800cc28 <__malloc_unlock+0x8>)
 800cc22:	f7ff befc 	b.w	800ca1e <__retarget_lock_release_recursive>
 800cc26:	bf00      	nop
 800cc28:	200069b4 	.word	0x200069b4

0800cc2c <__ssputs_r>:
 800cc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc30:	688e      	ldr	r6, [r1, #8]
 800cc32:	461f      	mov	r7, r3
 800cc34:	42be      	cmp	r6, r7
 800cc36:	680b      	ldr	r3, [r1, #0]
 800cc38:	4682      	mov	sl, r0
 800cc3a:	460c      	mov	r4, r1
 800cc3c:	4690      	mov	r8, r2
 800cc3e:	d82d      	bhi.n	800cc9c <__ssputs_r+0x70>
 800cc40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cc48:	d026      	beq.n	800cc98 <__ssputs_r+0x6c>
 800cc4a:	6965      	ldr	r5, [r4, #20]
 800cc4c:	6909      	ldr	r1, [r1, #16]
 800cc4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc52:	eba3 0901 	sub.w	r9, r3, r1
 800cc56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc5a:	1c7b      	adds	r3, r7, #1
 800cc5c:	444b      	add	r3, r9
 800cc5e:	106d      	asrs	r5, r5, #1
 800cc60:	429d      	cmp	r5, r3
 800cc62:	bf38      	it	cc
 800cc64:	461d      	movcc	r5, r3
 800cc66:	0553      	lsls	r3, r2, #21
 800cc68:	d527      	bpl.n	800ccba <__ssputs_r+0x8e>
 800cc6a:	4629      	mov	r1, r5
 800cc6c:	f7ff ff52 	bl	800cb14 <_malloc_r>
 800cc70:	4606      	mov	r6, r0
 800cc72:	b360      	cbz	r0, 800ccce <__ssputs_r+0xa2>
 800cc74:	6921      	ldr	r1, [r4, #16]
 800cc76:	464a      	mov	r2, r9
 800cc78:	f7ff fed2 	bl	800ca20 <memcpy>
 800cc7c:	89a3      	ldrh	r3, [r4, #12]
 800cc7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cc82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc86:	81a3      	strh	r3, [r4, #12]
 800cc88:	6126      	str	r6, [r4, #16]
 800cc8a:	6165      	str	r5, [r4, #20]
 800cc8c:	444e      	add	r6, r9
 800cc8e:	eba5 0509 	sub.w	r5, r5, r9
 800cc92:	6026      	str	r6, [r4, #0]
 800cc94:	60a5      	str	r5, [r4, #8]
 800cc96:	463e      	mov	r6, r7
 800cc98:	42be      	cmp	r6, r7
 800cc9a:	d900      	bls.n	800cc9e <__ssputs_r+0x72>
 800cc9c:	463e      	mov	r6, r7
 800cc9e:	6820      	ldr	r0, [r4, #0]
 800cca0:	4632      	mov	r2, r6
 800cca2:	4641      	mov	r1, r8
 800cca4:	f000 faa8 	bl	800d1f8 <memmove>
 800cca8:	68a3      	ldr	r3, [r4, #8]
 800ccaa:	1b9b      	subs	r3, r3, r6
 800ccac:	60a3      	str	r3, [r4, #8]
 800ccae:	6823      	ldr	r3, [r4, #0]
 800ccb0:	4433      	add	r3, r6
 800ccb2:	6023      	str	r3, [r4, #0]
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccba:	462a      	mov	r2, r5
 800ccbc:	f000 fac6 	bl	800d24c <_realloc_r>
 800ccc0:	4606      	mov	r6, r0
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d1e0      	bne.n	800cc88 <__ssputs_r+0x5c>
 800ccc6:	6921      	ldr	r1, [r4, #16]
 800ccc8:	4650      	mov	r0, sl
 800ccca:	f7ff feb7 	bl	800ca3c <_free_r>
 800ccce:	230c      	movs	r3, #12
 800ccd0:	f8ca 3000 	str.w	r3, [sl]
 800ccd4:	89a3      	ldrh	r3, [r4, #12]
 800ccd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccda:	81a3      	strh	r3, [r4, #12]
 800ccdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cce0:	e7e9      	b.n	800ccb6 <__ssputs_r+0x8a>
	...

0800cce4 <_svfiprintf_r>:
 800cce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce8:	4698      	mov	r8, r3
 800ccea:	898b      	ldrh	r3, [r1, #12]
 800ccec:	061b      	lsls	r3, r3, #24
 800ccee:	b09d      	sub	sp, #116	@ 0x74
 800ccf0:	4607      	mov	r7, r0
 800ccf2:	460d      	mov	r5, r1
 800ccf4:	4614      	mov	r4, r2
 800ccf6:	d510      	bpl.n	800cd1a <_svfiprintf_r+0x36>
 800ccf8:	690b      	ldr	r3, [r1, #16]
 800ccfa:	b973      	cbnz	r3, 800cd1a <_svfiprintf_r+0x36>
 800ccfc:	2140      	movs	r1, #64	@ 0x40
 800ccfe:	f7ff ff09 	bl	800cb14 <_malloc_r>
 800cd02:	6028      	str	r0, [r5, #0]
 800cd04:	6128      	str	r0, [r5, #16]
 800cd06:	b930      	cbnz	r0, 800cd16 <_svfiprintf_r+0x32>
 800cd08:	230c      	movs	r3, #12
 800cd0a:	603b      	str	r3, [r7, #0]
 800cd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd10:	b01d      	add	sp, #116	@ 0x74
 800cd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd16:	2340      	movs	r3, #64	@ 0x40
 800cd18:	616b      	str	r3, [r5, #20]
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd1e:	2320      	movs	r3, #32
 800cd20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd24:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd28:	2330      	movs	r3, #48	@ 0x30
 800cd2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cec8 <_svfiprintf_r+0x1e4>
 800cd2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd32:	f04f 0901 	mov.w	r9, #1
 800cd36:	4623      	mov	r3, r4
 800cd38:	469a      	mov	sl, r3
 800cd3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd3e:	b10a      	cbz	r2, 800cd44 <_svfiprintf_r+0x60>
 800cd40:	2a25      	cmp	r2, #37	@ 0x25
 800cd42:	d1f9      	bne.n	800cd38 <_svfiprintf_r+0x54>
 800cd44:	ebba 0b04 	subs.w	fp, sl, r4
 800cd48:	d00b      	beq.n	800cd62 <_svfiprintf_r+0x7e>
 800cd4a:	465b      	mov	r3, fp
 800cd4c:	4622      	mov	r2, r4
 800cd4e:	4629      	mov	r1, r5
 800cd50:	4638      	mov	r0, r7
 800cd52:	f7ff ff6b 	bl	800cc2c <__ssputs_r>
 800cd56:	3001      	adds	r0, #1
 800cd58:	f000 80a7 	beq.w	800ceaa <_svfiprintf_r+0x1c6>
 800cd5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd5e:	445a      	add	r2, fp
 800cd60:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd62:	f89a 3000 	ldrb.w	r3, [sl]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f000 809f 	beq.w	800ceaa <_svfiprintf_r+0x1c6>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd76:	f10a 0a01 	add.w	sl, sl, #1
 800cd7a:	9304      	str	r3, [sp, #16]
 800cd7c:	9307      	str	r3, [sp, #28]
 800cd7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd82:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd84:	4654      	mov	r4, sl
 800cd86:	2205      	movs	r2, #5
 800cd88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd8c:	484e      	ldr	r0, [pc, #312]	@ (800cec8 <_svfiprintf_r+0x1e4>)
 800cd8e:	f7f3 fa27 	bl	80001e0 <memchr>
 800cd92:	9a04      	ldr	r2, [sp, #16]
 800cd94:	b9d8      	cbnz	r0, 800cdce <_svfiprintf_r+0xea>
 800cd96:	06d0      	lsls	r0, r2, #27
 800cd98:	bf44      	itt	mi
 800cd9a:	2320      	movmi	r3, #32
 800cd9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cda0:	0711      	lsls	r1, r2, #28
 800cda2:	bf44      	itt	mi
 800cda4:	232b      	movmi	r3, #43	@ 0x2b
 800cda6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdaa:	f89a 3000 	ldrb.w	r3, [sl]
 800cdae:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdb0:	d015      	beq.n	800cdde <_svfiprintf_r+0xfa>
 800cdb2:	9a07      	ldr	r2, [sp, #28]
 800cdb4:	4654      	mov	r4, sl
 800cdb6:	2000      	movs	r0, #0
 800cdb8:	f04f 0c0a 	mov.w	ip, #10
 800cdbc:	4621      	mov	r1, r4
 800cdbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdc2:	3b30      	subs	r3, #48	@ 0x30
 800cdc4:	2b09      	cmp	r3, #9
 800cdc6:	d94b      	bls.n	800ce60 <_svfiprintf_r+0x17c>
 800cdc8:	b1b0      	cbz	r0, 800cdf8 <_svfiprintf_r+0x114>
 800cdca:	9207      	str	r2, [sp, #28]
 800cdcc:	e014      	b.n	800cdf8 <_svfiprintf_r+0x114>
 800cdce:	eba0 0308 	sub.w	r3, r0, r8
 800cdd2:	fa09 f303 	lsl.w	r3, r9, r3
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	9304      	str	r3, [sp, #16]
 800cdda:	46a2      	mov	sl, r4
 800cddc:	e7d2      	b.n	800cd84 <_svfiprintf_r+0xa0>
 800cdde:	9b03      	ldr	r3, [sp, #12]
 800cde0:	1d19      	adds	r1, r3, #4
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	9103      	str	r1, [sp, #12]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	bfbb      	ittet	lt
 800cdea:	425b      	neglt	r3, r3
 800cdec:	f042 0202 	orrlt.w	r2, r2, #2
 800cdf0:	9307      	strge	r3, [sp, #28]
 800cdf2:	9307      	strlt	r3, [sp, #28]
 800cdf4:	bfb8      	it	lt
 800cdf6:	9204      	strlt	r2, [sp, #16]
 800cdf8:	7823      	ldrb	r3, [r4, #0]
 800cdfa:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdfc:	d10a      	bne.n	800ce14 <_svfiprintf_r+0x130>
 800cdfe:	7863      	ldrb	r3, [r4, #1]
 800ce00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce02:	d132      	bne.n	800ce6a <_svfiprintf_r+0x186>
 800ce04:	9b03      	ldr	r3, [sp, #12]
 800ce06:	1d1a      	adds	r2, r3, #4
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	9203      	str	r2, [sp, #12]
 800ce0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce10:	3402      	adds	r4, #2
 800ce12:	9305      	str	r3, [sp, #20]
 800ce14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ced8 <_svfiprintf_r+0x1f4>
 800ce18:	7821      	ldrb	r1, [r4, #0]
 800ce1a:	2203      	movs	r2, #3
 800ce1c:	4650      	mov	r0, sl
 800ce1e:	f7f3 f9df 	bl	80001e0 <memchr>
 800ce22:	b138      	cbz	r0, 800ce34 <_svfiprintf_r+0x150>
 800ce24:	9b04      	ldr	r3, [sp, #16]
 800ce26:	eba0 000a 	sub.w	r0, r0, sl
 800ce2a:	2240      	movs	r2, #64	@ 0x40
 800ce2c:	4082      	lsls	r2, r0
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	3401      	adds	r4, #1
 800ce32:	9304      	str	r3, [sp, #16]
 800ce34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce38:	4824      	ldr	r0, [pc, #144]	@ (800cecc <_svfiprintf_r+0x1e8>)
 800ce3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce3e:	2206      	movs	r2, #6
 800ce40:	f7f3 f9ce 	bl	80001e0 <memchr>
 800ce44:	2800      	cmp	r0, #0
 800ce46:	d036      	beq.n	800ceb6 <_svfiprintf_r+0x1d2>
 800ce48:	4b21      	ldr	r3, [pc, #132]	@ (800ced0 <_svfiprintf_r+0x1ec>)
 800ce4a:	bb1b      	cbnz	r3, 800ce94 <_svfiprintf_r+0x1b0>
 800ce4c:	9b03      	ldr	r3, [sp, #12]
 800ce4e:	3307      	adds	r3, #7
 800ce50:	f023 0307 	bic.w	r3, r3, #7
 800ce54:	3308      	adds	r3, #8
 800ce56:	9303      	str	r3, [sp, #12]
 800ce58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce5a:	4433      	add	r3, r6
 800ce5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce5e:	e76a      	b.n	800cd36 <_svfiprintf_r+0x52>
 800ce60:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce64:	460c      	mov	r4, r1
 800ce66:	2001      	movs	r0, #1
 800ce68:	e7a8      	b.n	800cdbc <_svfiprintf_r+0xd8>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	3401      	adds	r4, #1
 800ce6e:	9305      	str	r3, [sp, #20]
 800ce70:	4619      	mov	r1, r3
 800ce72:	f04f 0c0a 	mov.w	ip, #10
 800ce76:	4620      	mov	r0, r4
 800ce78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce7c:	3a30      	subs	r2, #48	@ 0x30
 800ce7e:	2a09      	cmp	r2, #9
 800ce80:	d903      	bls.n	800ce8a <_svfiprintf_r+0x1a6>
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d0c6      	beq.n	800ce14 <_svfiprintf_r+0x130>
 800ce86:	9105      	str	r1, [sp, #20]
 800ce88:	e7c4      	b.n	800ce14 <_svfiprintf_r+0x130>
 800ce8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce8e:	4604      	mov	r4, r0
 800ce90:	2301      	movs	r3, #1
 800ce92:	e7f0      	b.n	800ce76 <_svfiprintf_r+0x192>
 800ce94:	ab03      	add	r3, sp, #12
 800ce96:	9300      	str	r3, [sp, #0]
 800ce98:	462a      	mov	r2, r5
 800ce9a:	4b0e      	ldr	r3, [pc, #56]	@ (800ced4 <_svfiprintf_r+0x1f0>)
 800ce9c:	a904      	add	r1, sp, #16
 800ce9e:	4638      	mov	r0, r7
 800cea0:	f3af 8000 	nop.w
 800cea4:	1c42      	adds	r2, r0, #1
 800cea6:	4606      	mov	r6, r0
 800cea8:	d1d6      	bne.n	800ce58 <_svfiprintf_r+0x174>
 800ceaa:	89ab      	ldrh	r3, [r5, #12]
 800ceac:	065b      	lsls	r3, r3, #25
 800ceae:	f53f af2d 	bmi.w	800cd0c <_svfiprintf_r+0x28>
 800ceb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ceb4:	e72c      	b.n	800cd10 <_svfiprintf_r+0x2c>
 800ceb6:	ab03      	add	r3, sp, #12
 800ceb8:	9300      	str	r3, [sp, #0]
 800ceba:	462a      	mov	r2, r5
 800cebc:	4b05      	ldr	r3, [pc, #20]	@ (800ced4 <_svfiprintf_r+0x1f0>)
 800cebe:	a904      	add	r1, sp, #16
 800cec0:	4638      	mov	r0, r7
 800cec2:	f000 f879 	bl	800cfb8 <_printf_i>
 800cec6:	e7ed      	b.n	800cea4 <_svfiprintf_r+0x1c0>
 800cec8:	0800d418 	.word	0x0800d418
 800cecc:	0800d422 	.word	0x0800d422
 800ced0:	00000000 	.word	0x00000000
 800ced4:	0800cc2d 	.word	0x0800cc2d
 800ced8:	0800d41e 	.word	0x0800d41e

0800cedc <_printf_common>:
 800cedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cee0:	4616      	mov	r6, r2
 800cee2:	4698      	mov	r8, r3
 800cee4:	688a      	ldr	r2, [r1, #8]
 800cee6:	690b      	ldr	r3, [r1, #16]
 800cee8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ceec:	4293      	cmp	r3, r2
 800ceee:	bfb8      	it	lt
 800cef0:	4613      	movlt	r3, r2
 800cef2:	6033      	str	r3, [r6, #0]
 800cef4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cef8:	4607      	mov	r7, r0
 800cefa:	460c      	mov	r4, r1
 800cefc:	b10a      	cbz	r2, 800cf02 <_printf_common+0x26>
 800cefe:	3301      	adds	r3, #1
 800cf00:	6033      	str	r3, [r6, #0]
 800cf02:	6823      	ldr	r3, [r4, #0]
 800cf04:	0699      	lsls	r1, r3, #26
 800cf06:	bf42      	ittt	mi
 800cf08:	6833      	ldrmi	r3, [r6, #0]
 800cf0a:	3302      	addmi	r3, #2
 800cf0c:	6033      	strmi	r3, [r6, #0]
 800cf0e:	6825      	ldr	r5, [r4, #0]
 800cf10:	f015 0506 	ands.w	r5, r5, #6
 800cf14:	d106      	bne.n	800cf24 <_printf_common+0x48>
 800cf16:	f104 0a19 	add.w	sl, r4, #25
 800cf1a:	68e3      	ldr	r3, [r4, #12]
 800cf1c:	6832      	ldr	r2, [r6, #0]
 800cf1e:	1a9b      	subs	r3, r3, r2
 800cf20:	42ab      	cmp	r3, r5
 800cf22:	dc26      	bgt.n	800cf72 <_printf_common+0x96>
 800cf24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cf28:	6822      	ldr	r2, [r4, #0]
 800cf2a:	3b00      	subs	r3, #0
 800cf2c:	bf18      	it	ne
 800cf2e:	2301      	movne	r3, #1
 800cf30:	0692      	lsls	r2, r2, #26
 800cf32:	d42b      	bmi.n	800cf8c <_printf_common+0xb0>
 800cf34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cf38:	4641      	mov	r1, r8
 800cf3a:	4638      	mov	r0, r7
 800cf3c:	47c8      	blx	r9
 800cf3e:	3001      	adds	r0, #1
 800cf40:	d01e      	beq.n	800cf80 <_printf_common+0xa4>
 800cf42:	6823      	ldr	r3, [r4, #0]
 800cf44:	6922      	ldr	r2, [r4, #16]
 800cf46:	f003 0306 	and.w	r3, r3, #6
 800cf4a:	2b04      	cmp	r3, #4
 800cf4c:	bf02      	ittt	eq
 800cf4e:	68e5      	ldreq	r5, [r4, #12]
 800cf50:	6833      	ldreq	r3, [r6, #0]
 800cf52:	1aed      	subeq	r5, r5, r3
 800cf54:	68a3      	ldr	r3, [r4, #8]
 800cf56:	bf0c      	ite	eq
 800cf58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf5c:	2500      	movne	r5, #0
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	bfc4      	itt	gt
 800cf62:	1a9b      	subgt	r3, r3, r2
 800cf64:	18ed      	addgt	r5, r5, r3
 800cf66:	2600      	movs	r6, #0
 800cf68:	341a      	adds	r4, #26
 800cf6a:	42b5      	cmp	r5, r6
 800cf6c:	d11a      	bne.n	800cfa4 <_printf_common+0xc8>
 800cf6e:	2000      	movs	r0, #0
 800cf70:	e008      	b.n	800cf84 <_printf_common+0xa8>
 800cf72:	2301      	movs	r3, #1
 800cf74:	4652      	mov	r2, sl
 800cf76:	4641      	mov	r1, r8
 800cf78:	4638      	mov	r0, r7
 800cf7a:	47c8      	blx	r9
 800cf7c:	3001      	adds	r0, #1
 800cf7e:	d103      	bne.n	800cf88 <_printf_common+0xac>
 800cf80:	f04f 30ff 	mov.w	r0, #4294967295
 800cf84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf88:	3501      	adds	r5, #1
 800cf8a:	e7c6      	b.n	800cf1a <_printf_common+0x3e>
 800cf8c:	18e1      	adds	r1, r4, r3
 800cf8e:	1c5a      	adds	r2, r3, #1
 800cf90:	2030      	movs	r0, #48	@ 0x30
 800cf92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cf96:	4422      	add	r2, r4
 800cf98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cf9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cfa0:	3302      	adds	r3, #2
 800cfa2:	e7c7      	b.n	800cf34 <_printf_common+0x58>
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	4622      	mov	r2, r4
 800cfa8:	4641      	mov	r1, r8
 800cfaa:	4638      	mov	r0, r7
 800cfac:	47c8      	blx	r9
 800cfae:	3001      	adds	r0, #1
 800cfb0:	d0e6      	beq.n	800cf80 <_printf_common+0xa4>
 800cfb2:	3601      	adds	r6, #1
 800cfb4:	e7d9      	b.n	800cf6a <_printf_common+0x8e>
	...

0800cfb8 <_printf_i>:
 800cfb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfbc:	7e0f      	ldrb	r7, [r1, #24]
 800cfbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cfc0:	2f78      	cmp	r7, #120	@ 0x78
 800cfc2:	4691      	mov	r9, r2
 800cfc4:	4680      	mov	r8, r0
 800cfc6:	460c      	mov	r4, r1
 800cfc8:	469a      	mov	sl, r3
 800cfca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cfce:	d807      	bhi.n	800cfe0 <_printf_i+0x28>
 800cfd0:	2f62      	cmp	r7, #98	@ 0x62
 800cfd2:	d80a      	bhi.n	800cfea <_printf_i+0x32>
 800cfd4:	2f00      	cmp	r7, #0
 800cfd6:	f000 80d2 	beq.w	800d17e <_printf_i+0x1c6>
 800cfda:	2f58      	cmp	r7, #88	@ 0x58
 800cfdc:	f000 80b9 	beq.w	800d152 <_printf_i+0x19a>
 800cfe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cfe4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cfe8:	e03a      	b.n	800d060 <_printf_i+0xa8>
 800cfea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cfee:	2b15      	cmp	r3, #21
 800cff0:	d8f6      	bhi.n	800cfe0 <_printf_i+0x28>
 800cff2:	a101      	add	r1, pc, #4	@ (adr r1, 800cff8 <_printf_i+0x40>)
 800cff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cff8:	0800d051 	.word	0x0800d051
 800cffc:	0800d065 	.word	0x0800d065
 800d000:	0800cfe1 	.word	0x0800cfe1
 800d004:	0800cfe1 	.word	0x0800cfe1
 800d008:	0800cfe1 	.word	0x0800cfe1
 800d00c:	0800cfe1 	.word	0x0800cfe1
 800d010:	0800d065 	.word	0x0800d065
 800d014:	0800cfe1 	.word	0x0800cfe1
 800d018:	0800cfe1 	.word	0x0800cfe1
 800d01c:	0800cfe1 	.word	0x0800cfe1
 800d020:	0800cfe1 	.word	0x0800cfe1
 800d024:	0800d165 	.word	0x0800d165
 800d028:	0800d08f 	.word	0x0800d08f
 800d02c:	0800d11f 	.word	0x0800d11f
 800d030:	0800cfe1 	.word	0x0800cfe1
 800d034:	0800cfe1 	.word	0x0800cfe1
 800d038:	0800d187 	.word	0x0800d187
 800d03c:	0800cfe1 	.word	0x0800cfe1
 800d040:	0800d08f 	.word	0x0800d08f
 800d044:	0800cfe1 	.word	0x0800cfe1
 800d048:	0800cfe1 	.word	0x0800cfe1
 800d04c:	0800d127 	.word	0x0800d127
 800d050:	6833      	ldr	r3, [r6, #0]
 800d052:	1d1a      	adds	r2, r3, #4
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	6032      	str	r2, [r6, #0]
 800d058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d05c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d060:	2301      	movs	r3, #1
 800d062:	e09d      	b.n	800d1a0 <_printf_i+0x1e8>
 800d064:	6833      	ldr	r3, [r6, #0]
 800d066:	6820      	ldr	r0, [r4, #0]
 800d068:	1d19      	adds	r1, r3, #4
 800d06a:	6031      	str	r1, [r6, #0]
 800d06c:	0606      	lsls	r6, r0, #24
 800d06e:	d501      	bpl.n	800d074 <_printf_i+0xbc>
 800d070:	681d      	ldr	r5, [r3, #0]
 800d072:	e003      	b.n	800d07c <_printf_i+0xc4>
 800d074:	0645      	lsls	r5, r0, #25
 800d076:	d5fb      	bpl.n	800d070 <_printf_i+0xb8>
 800d078:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d07c:	2d00      	cmp	r5, #0
 800d07e:	da03      	bge.n	800d088 <_printf_i+0xd0>
 800d080:	232d      	movs	r3, #45	@ 0x2d
 800d082:	426d      	negs	r5, r5
 800d084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d088:	4859      	ldr	r0, [pc, #356]	@ (800d1f0 <_printf_i+0x238>)
 800d08a:	230a      	movs	r3, #10
 800d08c:	e011      	b.n	800d0b2 <_printf_i+0xfa>
 800d08e:	6821      	ldr	r1, [r4, #0]
 800d090:	6833      	ldr	r3, [r6, #0]
 800d092:	0608      	lsls	r0, r1, #24
 800d094:	f853 5b04 	ldr.w	r5, [r3], #4
 800d098:	d402      	bmi.n	800d0a0 <_printf_i+0xe8>
 800d09a:	0649      	lsls	r1, r1, #25
 800d09c:	bf48      	it	mi
 800d09e:	b2ad      	uxthmi	r5, r5
 800d0a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d0a2:	4853      	ldr	r0, [pc, #332]	@ (800d1f0 <_printf_i+0x238>)
 800d0a4:	6033      	str	r3, [r6, #0]
 800d0a6:	bf14      	ite	ne
 800d0a8:	230a      	movne	r3, #10
 800d0aa:	2308      	moveq	r3, #8
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d0b2:	6866      	ldr	r6, [r4, #4]
 800d0b4:	60a6      	str	r6, [r4, #8]
 800d0b6:	2e00      	cmp	r6, #0
 800d0b8:	bfa2      	ittt	ge
 800d0ba:	6821      	ldrge	r1, [r4, #0]
 800d0bc:	f021 0104 	bicge.w	r1, r1, #4
 800d0c0:	6021      	strge	r1, [r4, #0]
 800d0c2:	b90d      	cbnz	r5, 800d0c8 <_printf_i+0x110>
 800d0c4:	2e00      	cmp	r6, #0
 800d0c6:	d04b      	beq.n	800d160 <_printf_i+0x1a8>
 800d0c8:	4616      	mov	r6, r2
 800d0ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800d0ce:	fb03 5711 	mls	r7, r3, r1, r5
 800d0d2:	5dc7      	ldrb	r7, [r0, r7]
 800d0d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d0d8:	462f      	mov	r7, r5
 800d0da:	42bb      	cmp	r3, r7
 800d0dc:	460d      	mov	r5, r1
 800d0de:	d9f4      	bls.n	800d0ca <_printf_i+0x112>
 800d0e0:	2b08      	cmp	r3, #8
 800d0e2:	d10b      	bne.n	800d0fc <_printf_i+0x144>
 800d0e4:	6823      	ldr	r3, [r4, #0]
 800d0e6:	07df      	lsls	r7, r3, #31
 800d0e8:	d508      	bpl.n	800d0fc <_printf_i+0x144>
 800d0ea:	6923      	ldr	r3, [r4, #16]
 800d0ec:	6861      	ldr	r1, [r4, #4]
 800d0ee:	4299      	cmp	r1, r3
 800d0f0:	bfde      	ittt	le
 800d0f2:	2330      	movle	r3, #48	@ 0x30
 800d0f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d0f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d0fc:	1b92      	subs	r2, r2, r6
 800d0fe:	6122      	str	r2, [r4, #16]
 800d100:	f8cd a000 	str.w	sl, [sp]
 800d104:	464b      	mov	r3, r9
 800d106:	aa03      	add	r2, sp, #12
 800d108:	4621      	mov	r1, r4
 800d10a:	4640      	mov	r0, r8
 800d10c:	f7ff fee6 	bl	800cedc <_printf_common>
 800d110:	3001      	adds	r0, #1
 800d112:	d14a      	bne.n	800d1aa <_printf_i+0x1f2>
 800d114:	f04f 30ff 	mov.w	r0, #4294967295
 800d118:	b004      	add	sp, #16
 800d11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d11e:	6823      	ldr	r3, [r4, #0]
 800d120:	f043 0320 	orr.w	r3, r3, #32
 800d124:	6023      	str	r3, [r4, #0]
 800d126:	4833      	ldr	r0, [pc, #204]	@ (800d1f4 <_printf_i+0x23c>)
 800d128:	2778      	movs	r7, #120	@ 0x78
 800d12a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d12e:	6823      	ldr	r3, [r4, #0]
 800d130:	6831      	ldr	r1, [r6, #0]
 800d132:	061f      	lsls	r7, r3, #24
 800d134:	f851 5b04 	ldr.w	r5, [r1], #4
 800d138:	d402      	bmi.n	800d140 <_printf_i+0x188>
 800d13a:	065f      	lsls	r7, r3, #25
 800d13c:	bf48      	it	mi
 800d13e:	b2ad      	uxthmi	r5, r5
 800d140:	6031      	str	r1, [r6, #0]
 800d142:	07d9      	lsls	r1, r3, #31
 800d144:	bf44      	itt	mi
 800d146:	f043 0320 	orrmi.w	r3, r3, #32
 800d14a:	6023      	strmi	r3, [r4, #0]
 800d14c:	b11d      	cbz	r5, 800d156 <_printf_i+0x19e>
 800d14e:	2310      	movs	r3, #16
 800d150:	e7ac      	b.n	800d0ac <_printf_i+0xf4>
 800d152:	4827      	ldr	r0, [pc, #156]	@ (800d1f0 <_printf_i+0x238>)
 800d154:	e7e9      	b.n	800d12a <_printf_i+0x172>
 800d156:	6823      	ldr	r3, [r4, #0]
 800d158:	f023 0320 	bic.w	r3, r3, #32
 800d15c:	6023      	str	r3, [r4, #0]
 800d15e:	e7f6      	b.n	800d14e <_printf_i+0x196>
 800d160:	4616      	mov	r6, r2
 800d162:	e7bd      	b.n	800d0e0 <_printf_i+0x128>
 800d164:	6833      	ldr	r3, [r6, #0]
 800d166:	6825      	ldr	r5, [r4, #0]
 800d168:	6961      	ldr	r1, [r4, #20]
 800d16a:	1d18      	adds	r0, r3, #4
 800d16c:	6030      	str	r0, [r6, #0]
 800d16e:	062e      	lsls	r6, r5, #24
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	d501      	bpl.n	800d178 <_printf_i+0x1c0>
 800d174:	6019      	str	r1, [r3, #0]
 800d176:	e002      	b.n	800d17e <_printf_i+0x1c6>
 800d178:	0668      	lsls	r0, r5, #25
 800d17a:	d5fb      	bpl.n	800d174 <_printf_i+0x1bc>
 800d17c:	8019      	strh	r1, [r3, #0]
 800d17e:	2300      	movs	r3, #0
 800d180:	6123      	str	r3, [r4, #16]
 800d182:	4616      	mov	r6, r2
 800d184:	e7bc      	b.n	800d100 <_printf_i+0x148>
 800d186:	6833      	ldr	r3, [r6, #0]
 800d188:	1d1a      	adds	r2, r3, #4
 800d18a:	6032      	str	r2, [r6, #0]
 800d18c:	681e      	ldr	r6, [r3, #0]
 800d18e:	6862      	ldr	r2, [r4, #4]
 800d190:	2100      	movs	r1, #0
 800d192:	4630      	mov	r0, r6
 800d194:	f7f3 f824 	bl	80001e0 <memchr>
 800d198:	b108      	cbz	r0, 800d19e <_printf_i+0x1e6>
 800d19a:	1b80      	subs	r0, r0, r6
 800d19c:	6060      	str	r0, [r4, #4]
 800d19e:	6863      	ldr	r3, [r4, #4]
 800d1a0:	6123      	str	r3, [r4, #16]
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1a8:	e7aa      	b.n	800d100 <_printf_i+0x148>
 800d1aa:	6923      	ldr	r3, [r4, #16]
 800d1ac:	4632      	mov	r2, r6
 800d1ae:	4649      	mov	r1, r9
 800d1b0:	4640      	mov	r0, r8
 800d1b2:	47d0      	blx	sl
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	d0ad      	beq.n	800d114 <_printf_i+0x15c>
 800d1b8:	6823      	ldr	r3, [r4, #0]
 800d1ba:	079b      	lsls	r3, r3, #30
 800d1bc:	d413      	bmi.n	800d1e6 <_printf_i+0x22e>
 800d1be:	68e0      	ldr	r0, [r4, #12]
 800d1c0:	9b03      	ldr	r3, [sp, #12]
 800d1c2:	4298      	cmp	r0, r3
 800d1c4:	bfb8      	it	lt
 800d1c6:	4618      	movlt	r0, r3
 800d1c8:	e7a6      	b.n	800d118 <_printf_i+0x160>
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	4632      	mov	r2, r6
 800d1ce:	4649      	mov	r1, r9
 800d1d0:	4640      	mov	r0, r8
 800d1d2:	47d0      	blx	sl
 800d1d4:	3001      	adds	r0, #1
 800d1d6:	d09d      	beq.n	800d114 <_printf_i+0x15c>
 800d1d8:	3501      	adds	r5, #1
 800d1da:	68e3      	ldr	r3, [r4, #12]
 800d1dc:	9903      	ldr	r1, [sp, #12]
 800d1de:	1a5b      	subs	r3, r3, r1
 800d1e0:	42ab      	cmp	r3, r5
 800d1e2:	dcf2      	bgt.n	800d1ca <_printf_i+0x212>
 800d1e4:	e7eb      	b.n	800d1be <_printf_i+0x206>
 800d1e6:	2500      	movs	r5, #0
 800d1e8:	f104 0619 	add.w	r6, r4, #25
 800d1ec:	e7f5      	b.n	800d1da <_printf_i+0x222>
 800d1ee:	bf00      	nop
 800d1f0:	0800d429 	.word	0x0800d429
 800d1f4:	0800d43a 	.word	0x0800d43a

0800d1f8 <memmove>:
 800d1f8:	4288      	cmp	r0, r1
 800d1fa:	b510      	push	{r4, lr}
 800d1fc:	eb01 0402 	add.w	r4, r1, r2
 800d200:	d902      	bls.n	800d208 <memmove+0x10>
 800d202:	4284      	cmp	r4, r0
 800d204:	4623      	mov	r3, r4
 800d206:	d807      	bhi.n	800d218 <memmove+0x20>
 800d208:	1e43      	subs	r3, r0, #1
 800d20a:	42a1      	cmp	r1, r4
 800d20c:	d008      	beq.n	800d220 <memmove+0x28>
 800d20e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d212:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d216:	e7f8      	b.n	800d20a <memmove+0x12>
 800d218:	4402      	add	r2, r0
 800d21a:	4601      	mov	r1, r0
 800d21c:	428a      	cmp	r2, r1
 800d21e:	d100      	bne.n	800d222 <memmove+0x2a>
 800d220:	bd10      	pop	{r4, pc}
 800d222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d22a:	e7f7      	b.n	800d21c <memmove+0x24>

0800d22c <_sbrk_r>:
 800d22c:	b538      	push	{r3, r4, r5, lr}
 800d22e:	4d06      	ldr	r5, [pc, #24]	@ (800d248 <_sbrk_r+0x1c>)
 800d230:	2300      	movs	r3, #0
 800d232:	4604      	mov	r4, r0
 800d234:	4608      	mov	r0, r1
 800d236:	602b      	str	r3, [r5, #0]
 800d238:	f7f3 fd28 	bl	8000c8c <_sbrk>
 800d23c:	1c43      	adds	r3, r0, #1
 800d23e:	d102      	bne.n	800d246 <_sbrk_r+0x1a>
 800d240:	682b      	ldr	r3, [r5, #0]
 800d242:	b103      	cbz	r3, 800d246 <_sbrk_r+0x1a>
 800d244:	6023      	str	r3, [r4, #0]
 800d246:	bd38      	pop	{r3, r4, r5, pc}
 800d248:	200069b0 	.word	0x200069b0

0800d24c <_realloc_r>:
 800d24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d250:	4680      	mov	r8, r0
 800d252:	4615      	mov	r5, r2
 800d254:	460c      	mov	r4, r1
 800d256:	b921      	cbnz	r1, 800d262 <_realloc_r+0x16>
 800d258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d25c:	4611      	mov	r1, r2
 800d25e:	f7ff bc59 	b.w	800cb14 <_malloc_r>
 800d262:	b92a      	cbnz	r2, 800d270 <_realloc_r+0x24>
 800d264:	f7ff fbea 	bl	800ca3c <_free_r>
 800d268:	2400      	movs	r4, #0
 800d26a:	4620      	mov	r0, r4
 800d26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d270:	f000 f81a 	bl	800d2a8 <_malloc_usable_size_r>
 800d274:	4285      	cmp	r5, r0
 800d276:	4606      	mov	r6, r0
 800d278:	d802      	bhi.n	800d280 <_realloc_r+0x34>
 800d27a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d27e:	d8f4      	bhi.n	800d26a <_realloc_r+0x1e>
 800d280:	4629      	mov	r1, r5
 800d282:	4640      	mov	r0, r8
 800d284:	f7ff fc46 	bl	800cb14 <_malloc_r>
 800d288:	4607      	mov	r7, r0
 800d28a:	2800      	cmp	r0, #0
 800d28c:	d0ec      	beq.n	800d268 <_realloc_r+0x1c>
 800d28e:	42b5      	cmp	r5, r6
 800d290:	462a      	mov	r2, r5
 800d292:	4621      	mov	r1, r4
 800d294:	bf28      	it	cs
 800d296:	4632      	movcs	r2, r6
 800d298:	f7ff fbc2 	bl	800ca20 <memcpy>
 800d29c:	4621      	mov	r1, r4
 800d29e:	4640      	mov	r0, r8
 800d2a0:	f7ff fbcc 	bl	800ca3c <_free_r>
 800d2a4:	463c      	mov	r4, r7
 800d2a6:	e7e0      	b.n	800d26a <_realloc_r+0x1e>

0800d2a8 <_malloc_usable_size_r>:
 800d2a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2ac:	1f18      	subs	r0, r3, #4
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	bfbc      	itt	lt
 800d2b2:	580b      	ldrlt	r3, [r1, r0]
 800d2b4:	18c0      	addlt	r0, r0, r3
 800d2b6:	4770      	bx	lr

0800d2b8 <_init>:
 800d2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ba:	bf00      	nop
 800d2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2be:	bc08      	pop	{r3}
 800d2c0:	469e      	mov	lr, r3
 800d2c2:	4770      	bx	lr

0800d2c4 <_fini>:
 800d2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2c6:	bf00      	nop
 800d2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ca:	bc08      	pop	{r3}
 800d2cc:	469e      	mov	lr, r3
 800d2ce:	4770      	bx	lr
